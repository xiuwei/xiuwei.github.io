<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>哈皮的自言自语</title><link>https://xiuwei.github.io/</link><description>Recent content on 哈皮的自言自语</description><generator>Hugo -- gohugo.io</generator><language>zh-Hans</language><lastBuildDate>Mon, 15 Jul 2024 19:00:00 +0000</lastBuildDate><atom:link href="https://xiuwei.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>REST 接口规范</title><link>https://xiuwei.github.io/p/rest-specification/</link><pubDate>Sun, 05 May 2024 19:00:00 +0000</pubDate><guid>https://xiuwei.github.io/p/rest-specification/</guid><description>&lt;img src="https://xiuwei.github.io/p/rest-specification/cover.jpg" alt="Featured image of post REST 接口规范" />&lt;h2 id="restful-api-介绍">
&lt;a href="#restful-api-%e4%bb%8b%e7%bb%8d">#&lt;/a>
RESTful API 介绍
&lt;/h2>&lt;p>在回答“RESTful API 是什么”之前，我们先来看下 REST 是什么意思：REST 代表的是表现层状态转移（REpresentational State Transfer），由 Roy Fielding 在他的论文&lt;a class="link" href="https://www.ics.uci.edu/~fielding/pubs/dissertation/top.htm" target="_blank" rel="noopener"
>《Architectural Styles and the Design of Network-based Software Architectures》&lt;/a>里提出。REST 本身并没有创造新的技术、组件或服务，它只是一种软件架构风格，是一组架构约束条件和原则，而不是技术框架。&lt;/p>
&lt;p>REST 有一系列规范，满足这些规范的 API 均可称为 RESTful API。REST 规范把所有内容都视为资源，也就是说网络上一切皆资源。REST 架构对资源的操作包括获取、创建、修改和删除，这些操作正好对应 HTTP 协议提供的 &lt;code>GET&lt;/code>、&lt;code>POST&lt;/code>、&lt;code>PUT&lt;/code> 和 &lt;code>DELETE&lt;/code> 方法。&lt;/p>
&lt;p>REST 风格虽然适用于很多传输协议，但在实际开发中，由于 REST 天生和 HTTP 协议相辅相成，因此 HTTP 协议已经成了实现 RESTful API 事实上的标准。所以，REST 具有以下核心特点：&lt;/p>
&lt;ul>
&lt;li>以资源（resource）为中心，所有的东西都抽象成资源，所有的行为都应该是在资源上的 CRUD 操作。
&lt;ul>
&lt;li>资源对应着面向对象范式里的对象，面向对象范式以对象为中心。&lt;/li>
&lt;li>资源使用 URI 标识，每个资源实例都有一个唯一的 URI 标识。例如，如果我们有一个用户，用户名是 &lt;code>admin&lt;/code>，那么它的 URI 标识就可以是 &lt;code>/users/admin&lt;/code>。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>资源是有状态的，使用 JSON/XML 等在 HTTP Body 里表征资源的状态。&lt;/li>
&lt;li>客户端通过四个 HTTP 动词，对服务器端资源进行操作，实现“表现层状态转化”。&lt;/li>
&lt;li>无状态，这里的无状态是指每个 RESTful API 请求都包含了所有足够完成本次操作的信息，服务器端无须保持 session。无状态对于服务端的弹性扩容是很重要的。&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>提示：因为怕你弄混概念，这里强调下 REST 和 RESTful API 的区别：REST 是一种规范，而 RESTful API 则是满足这种规范的 API 接口。&lt;/p>
&lt;/blockquote>
&lt;h2 id="restful-api-设计原则">
&lt;a href="#restful-api-%e8%ae%be%e8%ae%a1%e5%8e%9f%e5%88%99">#&lt;/a>
RESTful API 设计原则
&lt;/h2>&lt;p>上面我们说了，RESTful API 就是满足 REST 规范的 API，由此看来，RESTful API 的核心是规范，那么具体有哪些规范呢？&lt;/p>
&lt;p>接下来从 URI 设计、API 版本管理等七个方面，详细介绍 RESTful API 的设计原则。&lt;/p>
&lt;h3 id="uri-设计">
&lt;a href="#uri-%e8%ae%be%e8%ae%a1">#&lt;/a>
URI 设计
&lt;/h3>&lt;p>资源都是使用 URI 标识的，我们应该按照一定的规范来设计 URI，通过规范化可以使我们的 API 接口更加易读、易用。以下是 URI 设计时，应该遵循的一些规范：&lt;/p>
&lt;ul>
&lt;li>资源名使用名词而不是动词，并且用名词复数表示。资源分为 Collection 和 Member 两种。
&lt;ul>
&lt;li>Collection：一堆资源的集合。例如我们系统里有很多用户（User），这些用户的集合就是 Collection。Collection 的 URI 标识应该是 域名/资源名复数， 例如 &lt;code>example.com/v1/users&lt;/code>。&lt;/li>
&lt;li>Member：单个特定资源。例如系统中特定名字的用户，就是 Collection 里的一个 Member。Member 的 URI 标识应该是 域名/资源名复数/资源名称， 例如 &lt;code>example.com/v1/users/colin&lt;/code>。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>URI 结尾不应包含 &lt;code>/&lt;/code> 。&lt;/li>
&lt;li>URI 中不能出现下划线 &lt;code>_&lt;/code>，必须用中杠线 &lt;code>-&lt;/code> 代替（有些人推荐用 &lt;code>_&lt;/code>，有些人推荐用 &lt;code>-&lt;/code>，统一使用一种格式即可，我比较推荐用 &lt;code>-&lt;/code>）。&lt;/li>
&lt;li>URI 路径用小写，不要用大写。&lt;/li>
&lt;li>避免层级过深的 URI。超过 2 层的资源嵌套会很乱，建议将其他资源转化为 &lt;code>?&lt;/code> 参数，比如：&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="line">&lt;span class="cl">/schools/qinghua/classes/rooma/students/colin # 不推荐
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">/students?school=qinghua&amp;amp;class=rooma # 推荐
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这里有个地方需要注意：在实际的 API 开发中，可能你会发现有些操作不能很好地映射为一个 REST 资源，这时候，你可以参考下面的做法。&lt;/p>
&lt;ul>
&lt;li>将一个操作变成资源的一个属性，比如想在系统中暂时禁用某个用户，可以这么设计 URI：&lt;code>/users/colin?active=false&lt;/code>。&lt;/li>
&lt;li>将操作当作是一个资源的嵌套资源，比如一个 GitHub 的加星操作：&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="line">&lt;span class="cl">PUT /gists/:id/star # github star action
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">DELETE /gists/:id/star # github unstar action
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>如果以上都不能解决问题，有时可以打破这类规范。比如登录操作，登录不属于任何一个资源，URI 可以设计为：&lt;code>/v1/login&lt;/code>。&lt;/p>
&lt;p>在设计 URI 时，如果你遇到一些不确定的地方，推荐你参考 &lt;a class="link" href="https://developer.github.com/v3/" target="_blank" rel="noopener"
>GitHub 标准 RESTful API&lt;/a>。&lt;/p>
&lt;h3 id="rest-资源操作映射为-http-方法">
&lt;a href="#rest-%e8%b5%84%e6%ba%90%e6%93%8d%e4%bd%9c%e6%98%a0%e5%b0%84%e4%b8%ba-http-%e6%96%b9%e6%b3%95">#&lt;/a>
REST 资源操作映射为 HTTP 方法
&lt;/h3>&lt;p>基本上 RESTful API 都是使用 HTTP 协议原生的 &lt;code>GET&lt;/code>、&lt;code>PUT&lt;/code>、&lt;code>POST&lt;/code>、&lt;code>DELETE&lt;/code> 来标识对资源的 CRUD 操作，形成的规范如下表所示：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>HTTP 方法&lt;/th>
&lt;th>Collection 资源（&lt;strong>/v1/users&lt;/strong>）&lt;/th>
&lt;th>Ember 资源（&lt;strong>/v1/users/:username&lt;/strong>）&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>GET&lt;/td>
&lt;td>获取一个 Collection 下所有的 Member 信息&lt;/td>
&lt;td>获取一个 Member 的状态表征&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>POST&lt;/td>
&lt;td>在 Collection 中新建一个 Member&lt;/td>
&lt;td>没有这类操作&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>PUT&lt;/td>
&lt;td>用另外一个 Collection 替换这个 Collection&lt;/td>
&lt;td>更新一个 Member 的状态表征&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>DELETE&lt;/td>
&lt;td>删除整个 Collection，可以用来批量删除资源&lt;/td>
&lt;td>删除这个 Member&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>提示：Collection 代表资源集合，Ember 代表特定的资源。&lt;/p>
&lt;p>下面是一个具体的映射例子：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>HTTP 方法&lt;/th>
&lt;th>行为&lt;/th>
&lt;th>URI&lt;/th>
&lt;th>示例说明&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>GET&lt;/td>
&lt;td>获取资源列表&lt;/td>
&lt;td>&lt;code>/users&lt;/code>&lt;/td>
&lt;td>获取用户列表&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>GET&lt;/td>
&lt;td>获取一个具体的资源表述&lt;/td>
&lt;td>&lt;code>/users/colin&lt;/code>&lt;/td>
&lt;td>获取&lt;code>colin&lt;/code>用户的详细信息&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>POST&lt;/td>
&lt;td>创建一个新的资源&lt;/td>
&lt;td>&lt;code>/users&lt;/code>&lt;/td>
&lt;td>创建一个新的用户&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>PUT&lt;/td>
&lt;td>更新一个资源&lt;/td>
&lt;td>&lt;code>/users/colin&lt;/code>&lt;/td>
&lt;td>更新用户名为&lt;code>colin&lt;/code>的用户&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>DELET&lt;/td>
&lt;td>删除服务器上的一个资源&lt;/td>
&lt;td>&lt;code>/users/colin&lt;/code>&lt;/td>
&lt;td>删除用户名为&lt;code>colin&lt;/code>的用户&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;code>GET&lt;/code>、&lt;code>PUT&lt;/code>、&lt;code>POST&lt;/code>、&lt;code>DELETE&lt;/code> 是 RESTful API 最常用的 HTTP 请求方法。HTTP 还提供了另外 3 种请求方法，这些方法不经常使用，这里也列举出来供你参考：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>HTTP 方法&lt;/th>
&lt;th>Collection 资源（/v1/users）&lt;/th>
&lt;th>Ember 资源（/v1/users/:username）&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>PATCH&lt;/td>
&lt;td>整个 Collection 进行部分更新，通常用于更新 Collection 的某些属性或字段&lt;/td>
&lt;td>获取一个 Member 的元信息&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>HEAD&lt;/td>
&lt;td>获取一个 Collection 的元信息，但不需要获取实际资源的内容&lt;/td>
&lt;td>获取 Member 的元信息，但不需要获取实际资源的内容&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>OPTIONS&lt;/td>
&lt;td>获取整个 Collection 支持的通信选项，比如支持的 HTTP 方法、请求头等信息&lt;/td>
&lt;td>获取 Member 支持的通信选项，包括支持的 HTTP 方法、请求头等信息&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;blockquote>
&lt;p>提示：OPTIONS 请求方法通常用于跨域请求时的预检请求。&lt;/p>
&lt;/blockquote>
&lt;p>对资源的操作应该满足安全性和幂等性：&lt;/p>
&lt;ul>
&lt;li>安全性：不会改变资源状态，可以理解为只读的。&lt;/li>
&lt;li>幂等性：执行 1 次和执行 N 次，对资源状态改变的效果是等价的。&lt;/li>
&lt;/ul>
&lt;p>使用不同 HTTP 方法时，资源操作的安全性和幂等性对照见下表：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>HTTP 方法&lt;/th>
&lt;th>是否安全&lt;/th>
&lt;th>是否幂等&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>GET&lt;/td>
&lt;td>是&lt;/td>
&lt;td>是&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>POST&lt;/td>
&lt;td>否&lt;/td>
&lt;td>否&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>PUT&lt;/td>
&lt;td>否&lt;/td>
&lt;td>是&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>DELETE&lt;/td>
&lt;td>否&lt;/td>
&lt;td>是&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>PATCH&lt;/td>
&lt;td>否&lt;/td>
&lt;td>是&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>HEAD&lt;/td>
&lt;td>是&lt;/td>
&lt;td>是&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>OPTIONS&lt;/td>
&lt;td>是&lt;/td>
&lt;td>是&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>在使用 HTTP 方法的时候，有以下两点需要你注意：&lt;/p>
&lt;ul>
&lt;li>GET 返回的结果，要尽量可用于 &lt;code>PUT&lt;/code>、&lt;code>POST&lt;/code> 操作中。例如，用 GET 方法获得了一个 user 的信息，调用者修改 user 的邮件，然后将此结果再用 &lt;code>PUT&lt;/code> 方法更新。这要求 &lt;code>GET&lt;/code>、&lt;code>PUT&lt;/code>、&lt;code>POST&lt;/code> 操作的资源属性类型是一样的。&lt;/li>
&lt;li>如果对资源进行状态/属性变更，要用 &lt;code>PUT&lt;/code> 方法，&lt;code>POST&lt;/code> 方法仅用来创建或者批量删除这两种场景。&lt;/li>
&lt;/ul>
&lt;p>在设计 API 时，经常会有批量删除的需求，需要在请求中携带多个需要删除的资源名，但是 HTTP 的 &lt;code>DELETE&lt;/code> 方法不能携带多个资源名，这时候可以通过下面三种方式来解决：&lt;/p>
&lt;ul>
&lt;li>发起多个 DELETE 请求。&lt;/li>
&lt;li>操作路径中带多个 id，id 之间用分隔符分隔， 例如：&lt;code>DELETE /v1/users?ids=1,2,3&lt;/code> 。&lt;/li>
&lt;li>直接使用 POST 方式来批量删除，Body 中传入需要删除的资源列表。&lt;/li>
&lt;/ul>
&lt;p>其中，第二种是我最推荐的方式，因为使用了匹配的 &lt;code>DELETE&lt;/code> 动词，并且不需要发送多次 &lt;code>DELETE&lt;/code> 请求。这时候，你可能会问如果 id 列表太长，会不会有性能问题？其实不会的，因为在一个真实的项目中，我们每次允许删除的条目个数是有限的，每次最大删除的条目数，通常跟每个页面的最大展示条数保持一致。&lt;/p>
&lt;p>你需要注意的是，这三种方式都有各自的使用场景，你可以根据需要自行选择。如果选择了某一种方式，那么整个项目都需要统一用这种方式。&lt;/p>
&lt;h3 id="匹配-http-请求方法的参数">
&lt;a href="#%e5%8c%b9%e9%85%8d-http-%e8%af%b7%e6%b1%82%e6%96%b9%e6%b3%95%e7%9a%84%e5%8f%82%e6%95%b0">#&lt;/a>
匹配 HTTP 请求方法的参数
&lt;/h3>&lt;p>HTTP 有很多请求方法，例如：&lt;code>GET&lt;/code>、&lt;code>PUT&lt;/code>、&lt;code>POST&lt;/code>、&lt;code>DELETE&lt;/code> 等。在执行 HTTP 请求时，根据请求方法的类型，其参数指定位置也是有规范。在执行请求时，HTTP 请求方法和请求参数不匹配的请求，客户端会报错或者拒绝请求。&lt;/p>
&lt;p>HTTP 请求参数，可以视情况设置在以下位置：&lt;/p>
&lt;ul>
&lt;li>查询参数（Query Parameters）：查询参数是附加在 URL 路径后面的键值对，使用 &lt;code>?&lt;/code> 开头，多个参数之间使用 &lt;code>&amp;amp;&lt;/code> 分隔，例如：&lt;code>http://example.com/api/resource?param1=value1&amp;amp;param2=value2&lt;/code>。查询参数通常用于对资源进行过滤、分页、排序等操作；&lt;/li>
&lt;li>路径参数（Path Parameters）：路径参数是出现在 URL 路径中的一部分，通常用花括号 &lt;code>{}&lt;/code> 包裹，例如：&lt;code>http://example.com/api/resource/{id}&lt;/code>。路径参数用于标识资源的唯一标识符或者其他需要在 URL 中直接体现的参数；&lt;/li>
&lt;li>请求头（Request Headers）：请求头是包含在 HTTP 请求头部中的键值对，例如：&lt;code>Content-Type: application/json&lt;/code>。请求头用于传递请求的元数据、授权信息、内容类型等；&lt;/li>
&lt;li>请求体（Request Body）：请求体是包含在 HTTP 请求中的主体部分，通常用于 &lt;code>POST&lt;/code>、&lt;code>PUT&lt;/code>、&lt;code>PATCH&lt;/code> 等方法中传递数据。请求体用于传递请求的具体数据，通常使用 JSON、XML 等格式；&lt;/li>
&lt;li>Cookie：Cookie 是存储在客户端的一小段文本信息，会随着每次请求被发送到服务器。Cookie 用于在客户端和服务器之间保持状态，通常用于会话管理、用户认证等。&lt;/li>
&lt;/ul>
&lt;p>下表是不同 HTTP 请求方法所支持的请求参数的设置位置：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>请求方法&lt;/th>
&lt;th>参数位置&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>GET&lt;/td>
&lt;td>适配的请求参数位置：查询参数（Query Parameters）和路径参数（Path Parameters）；GET 请求通常通过查询参数传递参数，也可以通过路径参数传递需要标识的资源。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>POST&lt;/td>
&lt;td>适配的请求参数位置：请求体（Request Body）；POST 请求通常通过请求体传递需要创建的资源的数据。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>PUT&lt;/td>
&lt;td>适配的请求参数位置：路径参数（Path Parameters）和请求体（Request Body）；PUT 请求通常通过路径参数指定要更新的资源，通过请求体传递更新后的数据。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>DELETE&lt;/td>
&lt;td>适配的请求参数位置：路径参数（Path Parameters）；DELETE 请求通常通过路径参数指定要删除的资源。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>PATCH&lt;/td>
&lt;td>适配的请求参数位置：路径参数（Path Parameters）和请求体（Request Body）；PATCH 请求通常通过路径参数指定要部分更新的资源，通过请求体传递更新的部分数据。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>HEAD&lt;/td>
&lt;td>适配的请求参数位置：查询参数（Query Parameters）和路径参数（Path Parameters）；HEAD 请求通常通过查询参数和路径参数传递参数，用于获取资源的元信息而不获取资源本身。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>OPTIONS&lt;/td>
&lt;td>适配的请求参数位置：无特定参数位置要求；OPTIONS 请求通常用于获取目标资源所支持的通信选项，不需要特定的请求参数位置。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="统一的返回格式">
&lt;a href="#%e7%bb%9f%e4%b8%80%e7%9a%84%e8%bf%94%e5%9b%9e%e6%a0%bc%e5%bc%8f">#&lt;/a>
统一的返回格式
&lt;/h3>&lt;p>一般来说，一个系统的 RESTful API 会向外界开放多个资源的接口，每个接口的返回格式要保持一致。另外，每个接口都会返回成功和失败两种消息，这两种消息的格式也要保持一致。不然，客户端代码要适配不同接口的返回格式，每个返回格式又要适配成功和失败两种消息格式，会大大增加用户的学习和使用成本。返回的格式没有强制的标准，你可以根据实际的业务需要返回不同的格式。&lt;/p>
&lt;h3 id="api-版本管理">
&lt;a href="#api-%e7%89%88%e6%9c%ac%e7%ae%a1%e7%90%86">#&lt;/a>
API 版本管理
&lt;/h3>&lt;p>随着时间的推移、需求的变更，一个 API 往往满足不了现有的需求，这时候就需要对 API 进行修改。对 API 进行修改时，不能影响其他调用系统的正常使用，这就要求 API 变更做到向下兼容，也就是新老版本共存。&lt;/p>
&lt;p>但在实际场景中，很可能会出现同一个 API 无法向下兼容的情况。这时候最好的解决办法是从一开始就引入 API 版本机制，当不能向下兼容时，就引入一个新的版本，老的版本则保留原样。这样既能保证服务的可用性和安全性，同时也能满足新需求。&lt;/p>
&lt;p>API 版本有不同的标识方法，在 RESTful API 开发中，通常将版本标识放在如下 3 个位置：&lt;/p>
&lt;ul>
&lt;li>URL 中，比如 &lt;code>/v1/users&lt;/code>。&lt;/li>
&lt;li>HTTP Header 中，比如 &lt;code>Accept: vnd.example-com.foo+json; version=1.0&lt;/code>。&lt;/li>
&lt;li>Form 参数中，比如 &lt;code>/users?version=v1&lt;/code>。&lt;/li>
&lt;/ul>
&lt;p>通常建议将版本标识放在 URL 中的，比如 /v1/users，这样做的好处是很直观，GitHub、Kubernetes、Etcd 等很多优秀的 API 均采用这种方式。&lt;/p>
&lt;p>这里要注意，有些开发人员不建议将版本放在 URL 中，因为他们觉得不同的版本可以理解成同一种资源的不同表现形式，所以应该采用同一个 URI。对于这一点，没有严格的标准，根据项目实际需要选择一种方式即可。&lt;/p>
&lt;h3 id="api-命名">
&lt;a href="#api-%e5%91%bd%e5%90%8d">#&lt;/a>
API 命名
&lt;/h3>&lt;p>API 通常的命名方式有三种，分别是驼峰命名法（serverAddress）、蛇形命名法（server_address）和脊柱命名法（server-address）。&lt;/p>
&lt;p>驼峰命名法和蛇形命名法都需要切换输入法，会增加操作的复杂性，也容易出错，所以这里建议用脊柱命名法。GitHub API 用的就是脊柱命名法，例如 &lt;a class="link" href="https://docs.github.com/en/rest/reference/actions#get-allowed-actions-for-an-organization" target="_blank" rel="noopener"
>selected-actions&lt;/a>。&lt;/p>
&lt;h3 id="统一分页过滤排序搜索功能">
&lt;a href="#%e7%bb%9f%e4%b8%80%e5%88%86%e9%a1%b5%e8%bf%87%e6%bb%a4%e6%8e%92%e5%ba%8f%e6%90%9c%e7%b4%a2%e5%8a%9f%e8%83%bd">#&lt;/a>
统一分页/过滤/排序/搜索功能
&lt;/h3>&lt;p>REST 资源的查询接口，通常情况下都需要实现分页、过滤、排序、搜索功能，因为这些功能是每个 REST 资源都能用到的，所以可以实现为一个公共的 API 组件。下面来介绍下这些功能。&lt;/p>
&lt;ul>
&lt;li>分页：在列出一个 Collection 下所有的 Member 时，应该提供分页功能，例如 &lt;code>/users?offset=0&amp;amp;limit=20&lt;/code>（&lt;code>limit&lt;/code>，指定返回记录的数量；offset，指定返回记录的开始位置）。引入分页功能可以减少 API 响应的延时，同时可以避免返回太多条目，导致服务器/客户端响应特别慢，甚至导致服务器/客户端 crash 的情况。&lt;/li>
&lt;li>过滤：如果用户不需要一个资源的全部状态属性，可以在 URI 参数里指定返回哪些属性，例如 &lt;code>/users?fields=email,username,address&lt;/code>。&lt;/li>
&lt;li>排序：用户很多时候会根据创建时间或者其他因素，列出一个 Collection 中前 100 个 Member，这时可以在 URI 参数中指明排序参数，例如 &lt;code>/users?sort=age,desc&lt;/code>。&lt;/li>
&lt;li>搜索：当一个资源的 Member 太多时，用户可能想通过搜索，快速找到所需要的 Member，或着想搜下有没有名字为 &lt;code>xxx&lt;/code> 的某类资源，这时候就需要提供搜索功能。搜索建议按模糊匹配来搜索。&lt;/li>
&lt;/ul>
&lt;h3 id="域名">
&lt;a href="#%e5%9f%9f%e5%90%8d">#&lt;/a>
域名
&lt;/h3>&lt;p>API 的域名设置主要有两种方式：&lt;/p>
&lt;ul>
&lt;li>&lt;code>https://example.com/api&lt;/code>，这种方式适合 API 将来不会有进一步扩展的情况，比如刚开始 &lt;code>example.com&lt;/code> 域名下只有一套 API 系统，未来也只有这一套 API 系统。&lt;/li>
&lt;li>&lt;code>https://xxx.api.example.com&lt;/code>，如果 &lt;code>example.com&lt;/code> 域名下未来会新增另一个系统 API，这时候最好的方式是每个系统的 API 拥有专有的 API 域名，比如：&lt;code>storage.api.example.com&lt;/code>，&lt;code>network.api.example.com&lt;/code>。腾讯云的域名就是采用这种方式。&lt;/li>
&lt;/ul>
&lt;p>到这里，我们就将 REST 设计原则中的核心原则讲完了，这里有个需要注意的点：不同公司、不同团队、不同项目可能采取不同的 REST 设计原则，以上所列的基本上都是大家公认的原则。&lt;/p>
&lt;p>REST 设计原则中，还有一些原则因为内容比较多，并且可以独立成模块，所以放在后面来讲。比如 RESTful API 安全性、状态返回码、认证等。&lt;/p>
&lt;h2 id="总结">
&lt;a href="#%e6%80%bb%e7%bb%93">#&lt;/a>
总结
&lt;/h2>&lt;p>本文详细介绍了 RESTful API 及 RESTful API 设计原则。REST 是一种 API 规范，而 RESTful API 则是满足这种规范的 API 接口，RESTful API 的核心是规范。&lt;/p>
&lt;p>在 REST 规范中，资源通过 URI 来标识，资源名使用名词而不是动词，并且用名词复数表示，资源都是分为 Collection 和 Member 两种。RESTful API 中，分别使用 &lt;code>POST&lt;/code> 、 &lt;code>DELETE&lt;/code> 、 &lt;code>PUT&lt;/code> 、 &lt;code>GET&lt;/code> 来表示 REST 资源的增删改查，HTTP 方法、Collection、Member 不同组合会产生不同的操作，具体的映射你可以看下 &lt;strong>REST 资源操作映射为 HTTP 方法&lt;/strong> 部分的表格。&lt;/p>
&lt;p>为了方便用户使用和理解，每个 RESTful API 的返回格式、错误和正确消息的返回格式，都应该保持一致。RESTful API 需要支持 API 版本，并且版本应该能够向前兼容，我们可以将版本号放在 URL 中、HTTP Header 中、Form 参数中，但这里我建议将版本号放在 URL 中，例如 &lt;code>/v1/users&lt;/code>，这种形式比较直观。&lt;/p>
&lt;p>另外，我们可以通过脊柱命名法来命名 API 接口名。对于一个 REST 资源，其查询接口还应该支持分页/过滤/排序/搜索功能，这些功能可以用同一套机制来实现。 API 的域名可以采用 &lt;code>https://example.com/api&lt;/code> 和 &lt;code>https://xxx.api.example.com&lt;/code> 两种格式。&lt;/p></description></item><item><title>实战指南：在 Kubernetes 上部署 Spring Boot 微服务并实施健康检查</title><link>https://xiuwei.github.io/p/kubernetes-springboot-health-check/</link><pubDate>Sat, 20 Apr 2024 21:00:00 +0000</pubDate><guid>https://xiuwei.github.io/p/kubernetes-springboot-health-check/</guid><description>&lt;img src="https://xiuwei.github.io/p/kubernetes-springboot-health-check/cover.jpg" alt="Featured image of post 实战指南：在 Kubernetes 上部署 Spring Boot 微服务并实施健康检查" />&lt;h2 id="1-引言">
&lt;a href="#1-%e5%bc%95%e8%a8%80">#&lt;/a>
1. 引言
&lt;/h2>&lt;p>在云原生应用开发中，健康检查是确保微服务可靠性和稳定性的关键环节。特别是在 Kubernetes 这样的容器编排平台上，通过健康检查可以有效地监控和管理应用程序的状态，及时发现并处理潜在的故障情况，从而确保整个系统的正常运行。&lt;/p>
&lt;p>而 Spring Boot 作为一种流行的 Java 微服务框架，其在 Kubernetes 上的部署和健康检查配置也是开发者们关注的焦点。本文将针对这一问题，提供一套完整的实战指南，帮助读者深入了解在 Kubernetes 环境中部署 Spring Boot 微服务并实施健康检查的步骤和方法。&lt;/p>
&lt;h2 id="2-原理">
&lt;a href="#2-%e5%8e%9f%e7%90%86">#&lt;/a>
2. 原理
&lt;/h2>&lt;h3 id="21-kubernetes健康检查机制">
&lt;a href="#21-kubernetes%e5%81%a5%e5%ba%b7%e6%a3%80%e6%9f%a5%e6%9c%ba%e5%88%b6">#&lt;/a>
2.1 Kubernetes健康检查机制
&lt;/h3>&lt;p>Kubernetes中的健康检查主要使用 就绪性探针 &lt;code>readinessProbe&lt;/code> 、存活性探针 &lt;code>livenessProbe&lt;/code> 和启动探针 &lt;code>startupProbe&lt;/code> 来实现，service即为负载均衡，k8s保证 service 后面的 pod 都可用，是k8s中自愈能力的主要手段，主要基于这两种探测机制，可以实现如下需求：&lt;/p>
&lt;ul>
&lt;li>异常实例自动剔除，并重启新实例。&lt;/li>
&lt;li>多种类型探针检测，保证异常pod不接入流量。&lt;/li>
&lt;li>不停机部署，更安全的滚动升级。&lt;/li>
&lt;/ul>
&lt;h4 id="211-探针类型">
&lt;a href="#211-%e6%8e%a2%e9%92%88%e7%b1%bb%e5%9e%8b">#&lt;/a>
2.1.1 探针类型
&lt;/h4>&lt;p>针对运行中的容器，&lt;code>kubelet&lt;/code> 可以选择是否执行以下三种探针，以及如何针对探测结果作出反应：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>livenessProbe:&lt;/strong> 指示容器是否正在运行。如果存活态探测失败，则 kubelet 会杀死容器， 并且容器将根据其&lt;code>重启策略&lt;/code>进行重启。如果容器不提供存活探针，则默认状态为 Success。&lt;/li>
&lt;li>&lt;strong>readinessProbe:&lt;/strong> 指示容器是否准备好为请求提供服务。如果就绪态探测失败， 端点控制器将从与 Pod 匹配的所有服务的端点列表中删除该 Pod 的 IP 地址。初始延迟之前的就绪态的状态值默认为 &lt;code>Failure&lt;/code>。 如果容器不提供就绪态探针，则默认状态为 &lt;code>Success。&lt;/code>&lt;/li>
&lt;li>&lt;strong>startupProbe:&lt;/strong> 指示容器中的应用是否已经启动。如果提供了启动探针，则所有其他探针都会被 禁用，直到此探针成功为止。如果启动探测失败，kubelet 将杀死容器，而容器依其&lt;code>重启策略&lt;/code>进行重启。 如果容器没有提供启动探测，则默认状态为 &lt;code>Success。&lt;/code>&lt;/li>
&lt;/ul>
&lt;h4 id="212-探针结果">
&lt;a href="#212-%e6%8e%a2%e9%92%88%e7%bb%93%e6%9e%9c">#&lt;/a>
2.1.2 探针结果
&lt;/h4>&lt;p>每次探测都将获得以下三种结果之一：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Success（成功）:&lt;/strong> 容器通过了诊断。&lt;/li>
&lt;li>&lt;strong>Failure（失败）:&lt;/strong> 容器未通过诊断。&lt;/li>
&lt;li>&lt;strong>Unknown（未知）:&lt;/strong> 诊断失败，因此不会采取任何行动。&lt;/li>
&lt;/ul>
&lt;h4 id="213-探针检查机制">
&lt;a href="#213-%e6%8e%a2%e9%92%88%e6%a3%80%e6%9f%a5%e6%9c%ba%e5%88%b6">#&lt;/a>
2.1.3 探针检查机制
&lt;/h4>&lt;p>使用探针来检查容器有四种不同的方法。 每个探针都必须准确定义为这四种机制中的一种：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>exec：&lt;/strong> 在容器内执行指定命令。如果命令退出时返回码为 0 则认为诊断成功。&lt;/li>
&lt;li>&lt;strong>grpc：&lt;/strong> 使用 gRPC 执行一个远程过程调用。 目标应该实现 gRPC 健康检查。 如果响应的状态是 &amp;ldquo;SERVING&amp;rdquo;，则认为诊断成功。&lt;/li>
&lt;li>&lt;strong>httpGet：&lt;/strong> 对容器的 IP 地址上指定端口和路径执行 HTTP GET 请求。如果响应的状态码大于等于 200 且小于 400，则诊断被认为是成功的。&lt;/li>
&lt;li>&lt;strong>tcpSocket：&lt;/strong> 对容器的 IP 地址上的指定端口执行 TCP 检查。如果端口打开，则诊断被认为是成功的。 如果远程系统（容器）在打开连接后立即将其关闭，这算作是健康的。&lt;/li>
&lt;/ul>
&lt;h3 id="22-spring-boot对kubernetes容器探针的支持">
&lt;a href="#22-spring-boot%e5%af%b9kubernetes%e5%ae%b9%e5%99%a8%e6%8e%a2%e9%92%88%e7%9a%84%e6%94%af%e6%8c%81">#&lt;/a>
2.2 Spring Boot对Kubernetes容器探针的支持
&lt;/h3>&lt;p>Spring Boot 2.3 版本引入了容器探针功能，其中包括了 &lt;code>/actuator/health/liveness&lt;/code> 和 &lt;code>/actuator/health/readiness&lt;/code> 这两个健康检查路径。这些路径是为了更好地支持部署在 Kubernetes 等容器环境中的应用程序。&lt;/p>
&lt;ul>
&lt;li>&lt;code>/actuator/health/liveness&lt;/code> 用于存活性检查，用于确定应用程序是否仍然在运行。&lt;/li>
&lt;li>&lt;code>/actuator/health/readiness&lt;/code> 用于就绪性检查，用于确定应用程序是否准备好接收流量。&lt;/li>
&lt;/ul>
&lt;p>Spring Boot Actuator 会自动将这两个路径暴露出来，并通过它们来执行相应的健康检查。这样，当你在 Kubernetes 中部署 Spring Boot 应用程序时，Kubernetes 可以利用这些路径来确定容器是否健康和准备好接收流量。&lt;/p>
&lt;p>这种集成简化了在 Kubernetes 中部署 Spring Boot 应用程序的流程，并提高了应用程序的可靠性和可用性。&lt;/p>
&lt;h4 id="221-spring-boot-如何识别k8s环境">
&lt;a href="#221-spring-boot-%e5%a6%82%e4%bd%95%e8%af%86%e5%88%abk8s%e7%8e%af%e5%a2%83">#&lt;/a>
2.2.1 Spring Boot 如何识别k8s环境
&lt;/h4>&lt;p>Spring Boot 通过检查环境中的 &lt;code>&amp;quot;*_SERVICE_HOST&amp;quot;&lt;/code> 和 &lt;code>&amp;quot;*_SERVICE_PORT&amp;quot;&lt;/code> 变量来自动检测 Kubernetes 部署环境。也可以使用 &lt;code>spring.main.cloud-platform&lt;/code> 配置属性覆盖此检测。&lt;/p>
&lt;p>Spring Boot 识别到 Kubernetes 环境后，Spring Boot Actuator 会自动将&lt;code>/actuator/health/liveness&lt;/code> 和 &lt;code>/actuator/health/readiness&lt;/code>这两个端点暴露出来。&lt;/p>
&lt;blockquote>
&lt;p>小技巧：本地验证这一特性可以通过手动设置 &lt;em>KUBERNETES_SERVICE_HOST&lt;/em> 和 &lt;em>KUBERNETES_SERVICE_PORT&lt;/em> 这两个环境变量来开启存活和就绪检查。访问 &lt;em>http://localhost:8080/actuator/health/liveness&lt;/em> 响应200状态码时代表已开启。&lt;/p>
&lt;/blockquote>
&lt;h4 id="222-spring-boot-与k8s容器探针的结合">
&lt;a href="#222-spring-boot-%e4%b8%8ek8s%e5%ae%b9%e5%99%a8%e6%8e%a2%e9%92%88%e7%9a%84%e7%bb%93%e5%90%88">#&lt;/a>
2.2.2 Spring Boot 与k8s容器探针的结合
&lt;/h4>&lt;p>默认情况下，Spring Boot 管理应用程序可用性状态。如果部署在 Kubernetes 环境中，Actuator 会从收集“Liveness”和“Readiness”信息，并将该信息用于各类专用的 &lt;code>HealthIndicators&lt;/code>。&lt;/p>
&lt;p>Kubernetes 存活与就绪检查配置示例：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">livenessProbe&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">httpGet&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">path&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;/actuator/health/liveness&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">port&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">&amp;lt;actuator-port&amp;gt;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">failureThreshold&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">...&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">periodSeconds&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">...&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">readinessProbe&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">httpGet&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">path&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;/actuator/health/readiness&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">port&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">&amp;lt;actuator-port&amp;gt;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">failureThreshold&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">...&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">periodSeconds&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">...&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>&lt;actuator-port> 应设置为 actuator endpoints 的端口。它可能是 Web 服务器端口或为 Actuator 单独设置的端口。通过 &amp;ldquo;management.server.port&amp;rdquo; 配置指定。&lt;/p>
&lt;/blockquote>
&lt;h4 id="223-spring-boot-生命周期与探测状态">
&lt;a href="#223-spring-boot-%e7%94%9f%e5%91%bd%e5%91%a8%e6%9c%9f%e4%b8%8e%e6%8e%a2%e6%b5%8b%e7%8a%b6%e6%80%81">#&lt;/a>
2.2.3 Spring Boot 生命周期与探测状态
&lt;/h4>&lt;p>Kubernetes Probes 支持的一个重要方面是它与应用程序生命周期的一致性。（应用程序的内存中内部状态）和实际探针（公开该状态）之间存在显着差异。根据应用程序生命周期的阶段，探测器可能不可用。&lt;/p>
&lt;p>Spring Boot 在启动和关闭期间发布 &lt;em>Application Events&lt;/em>，探测器可以监听此类事件并暴露 &lt;em>AvailabilityState&lt;/em> 信息。&lt;/p>
&lt;p>下表显示了AvailabilityState和HTTP连接器在不同阶段的状态。&lt;/p>
&lt;p>当 Spring Boot 应用程序启动时：
&lt;img src="https://xiuwei.github.io/p/kubernetes-springboot-health-check/image.png"
width="1990"
height="542"
srcset="https://xiuwei.github.io/p/kubernetes-springboot-health-check/image_hub8d9176f3a8360729b7465a357c86566_137478_480x0_resize_box_3.png 480w, https://xiuwei.github.io/p/kubernetes-springboot-health-check/image_hub8d9176f3a8360729b7465a357c86566_137478_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="alt text"
class="gallery-image"
data-flex-grow="367"
data-flex-basis="881px"
>&lt;/p>
&lt;p>当 Spring Boot 应用程序 关闭时:
&lt;img src="https://xiuwei.github.io/p/kubernetes-springboot-health-check/image-1.png"
width="1948"
height="498"
srcset="https://xiuwei.github.io/p/kubernetes-springboot-health-check/image-1_hu05efa868d7dab2ee38f7d14b4f8433cc_122400_480x0_resize_box_3.png 480w, https://xiuwei.github.io/p/kubernetes-springboot-health-check/image-1_hu05efa868d7dab2ee38f7d14b4f8433cc_122400_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="alt text"
class="gallery-image"
data-flex-grow="391"
data-flex-basis="938px"
>&lt;/p>
&lt;h2 id="3-准备工作">
&lt;a href="#3-%e5%87%86%e5%a4%87%e5%b7%a5%e4%bd%9c">#&lt;/a>
3. 准备工作
&lt;/h2>&lt;p>在开始部署 Spring Boot 微服务到 Kubernetes 之前，我们首先需要准备好以下工作环境和所需工具：&lt;/p>
&lt;ul>
&lt;li>一个运行正常的 Kubernetes 集群，可以是本地的 minikube 集群或者云上的托管 Kubernetes 服务。&lt;/li>
&lt;li>已经构建好的 Spring Boot 应用程序的 Docker 镜像，可以通过 Dockerfile 构建，或者使用 Maven 插件和 Docker 插件直接构建。&lt;/li>
&lt;li>Kubernetes 部署和服务资源的 YAML 配置文件，用于定义应用程序的部署、服务和健康检查配置。&lt;/li>
&lt;/ul>
&lt;h2 id="4-在-kubernetes-中部署-spring-boot-微服务">
&lt;a href="#4-%e5%9c%a8-kubernetes-%e4%b8%ad%e9%83%a8%e7%bd%b2-spring-boot-%e5%be%ae%e6%9c%8d%e5%8a%a1">#&lt;/a>
4. 在 Kubernetes 中部署 Spring Boot 微服务
&lt;/h2>&lt;p>在准备工作完成之后，我们就可以开始在 Kubernetes 中部署 Spring Boot 微服务了。首先，我们需要创建一个 Kubernetes 部署资源，用来描述应用程序的容器镜像、副本数等信息。接下来，我们再创建一个 Kubernetes 服务资源，用来暴露应用程序的网络端口，以便其他服务可以访问到该应用程序。让我们一起来看看具体的操作步骤：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>创建 Kubernetes 部署资源：&lt;/strong> 在 Kubernetes 中，部署资源用于定义应用程序的部署策略和运行配置。我们可以通过一个 YAML 配置文件来创建一个部署资源，示例配置文件如下所示：&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">apps/v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Deployment&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">my-springboot-app&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">replicas&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">3&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">selector&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">matchLabels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">app&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">my-springboot-app&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">template&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">labels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">app&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">my-springboot-app&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">containers&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">my-springboot-app&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">your-docker-registry/my-springboot-app:latest&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">ports&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">containerPort&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">8080&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在这个示例中，我们定义了一个名为 &lt;code>my-springboot-app&lt;/code> 的 Deployment 资源，指定了要运行的容器镜像和副本数，并暴露了容器的 8080 端口。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>创建 Kubernetes 服务资源：&lt;/strong> 在 Kubernetes 中，服务资源用于定义应用程序的网络访问方式和负载均衡策略。我们同样可以通过一个 YAML 配置文件来创建一个服务资源，示例配置文件如下所示：&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Service&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">my-springboot-app-service&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">selector&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">app&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">my-springboot-app&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">ports&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">protocol&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">TCP&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">port&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">80&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">targetPort&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">8080&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">type&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">LoadBalancer&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在这个示例中，我们定义了一个名为 &lt;code>my-springboot-app-service&lt;/code> 的 Service 资源，通过 &lt;code>selector&lt;/code> 字段指定了要负载均衡的 Deployment，并将容器的 8080 端口映射到了服务的 80 端口。&lt;/p>
&lt;p>通过上述步骤，我们就可以成功地在 Kubernetes 中部署了一个运行 Spring Boot 微服务的容器应用程序。接下来，我们将重点关注如何配置和实施健康检查，以确保应用程序的稳定性和可靠性。&lt;/p>
&lt;h2 id="5-配置健康检查">
&lt;a href="#5-%e9%85%8d%e7%bd%ae%e5%81%a5%e5%ba%b7%e6%a3%80%e6%9f%a5">#&lt;/a>
5. 配置健康检查
&lt;/h2>&lt;p>在 Kubernetes 中，健康检查通过 liveness 探针和 readiness 探针来实现。liveness 探针用于检查应用程序是否处于运行状态，而 readiness 探针用于检查应用程序是否已准备好接收流量。下面我们将分别介绍如何在 Spring Boot 应用程序中实现这两种探针，并在 Kubernetes 中进行配置。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>实现 liveness 探针：&lt;/strong> 在 Spring Boot 应用程序中实现 liveness 探针非常简单，我们只需创建一个端点接口，用于检查应用程序的运行状态即可。例如，我们可以创建一个 &lt;code>/actuator/health&lt;/code> 的端点，用于返回应用程序的健康状态。在 Spring Boot 应用程序中，我们可以通过 Spring Boot Actuator 模块来实现这一功能。在 &lt;code>application.properties&lt;/code> 配置文件中添加以下配置：&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-properties" data-lang="properties">&lt;span class="line">&lt;span class="cl">&lt;span class="na">management.endpoint.health.enabled&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">true&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">management.endpoint.health.probes.enabled&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">true&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">management.endpoints.web.exposure.include&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">health&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>然后，我们就可以访问 &lt;code>/actuator/health&lt;/code> 端点来检查应用程序的运行状态了。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>实现 readiness 探针：&lt;/strong> 与 liveness 探针类似，实现 readiness 探针也很简单。我们可以创建一个类似的端点接口，用于检查应用程序是否已准备好接收流量。例如，我们可以创建一个 &lt;code>/actuator/readiness&lt;/code> 的端点，用于返回应用程序的就绪状态。同样地，我们可以通过 Spring Boot Actuator 模块来实现这一功能，在 &lt;code>application.properties&lt;/code> 配置文件中添加以下配置：&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-properties" data-lang="properties">&lt;span class="line">&lt;span class="cl">&lt;span class="na">management.endpoint.health.enabled&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">true&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">management.endpoint.health.probes.enabled&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">true&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">management.endpoint.health.probes.include&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">readiness&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>然后，我们就可以访问 &lt;code>/actuator/readiness&lt;/code> 端点来检查应用程序的就绪状态了。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>在 Kubernetes 中配置健康检查：&lt;/strong> 在 Kubernetes 的部署配置文件中，我们可以通过 &lt;code>livenessProbe&lt;/code> 和 &lt;code>readinessProbe&lt;/code> 字段来定义容器的健康检查。例如，我们可以使用以下配置来定义一个 liveness 探针：&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">livenessProbe&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">httpGet&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">path&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">/actuator/health&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">port&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">8080&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">initialDelaySeconds&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">30&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">periodSeconds&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">10&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这个配置将会在容器启动后等待 30 秒后开始进行 liveness 探测，每隔 10 秒进行一次探测，检查 &lt;code>/actuator/health&lt;/code> 端点的返回状态。&lt;/p>
&lt;p>类似地，我们也可以使用类似的配置来定义一个 readiness 探针。&lt;/p>
&lt;p>通过上述步骤，我们就成功地在 Spring Boot 应用程序中实现了 liveness 探针和 readiness 探针，并在 Kubernetes 中进行了相应的配置。接下来，我们将进行实战演练，验证健康检查的配置是否生效，以及如何使用 kubectl 命令来查看应用程序的健康状态。&lt;/p>
&lt;h2 id="6-验证">
&lt;a href="#6-%e9%aa%8c%e8%af%81">#&lt;/a>
6. 验证
&lt;/h2>&lt;p>在本节中，我们将演示如何使用 kubectl 命令来查看应用程序的健康状态，并验证健康检查的配置是否生效。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>查看 liveness 探针状态：&lt;/strong> 使用以下命令可以查看应用程序的 liveness 探针状态：&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">kubectl describe pod &amp;lt;pod_name&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>该命令将输出包含容器状态和事件的详细信息。在输出结果中，可以找到有关 liveness 探针的相关信息，例如探针的执行结果和最后一次执行的时间戳。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>验证 readiness 探针状态：&lt;/strong> 使用以下命令可以验证应用程序的 readiness 探针状态：&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">kubectl get pods
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>该命令将列出所有运行中的 Pod，并显示它们的状态。通过观察 READY 列中的值，可以了解到每个 Pod 是否已准备好接收流量。&lt;/p>
&lt;p>通过上述命令，我们可以轻松地验证健康检查的配置是否生效，并了解应用程序的健康状态。如果出现健康检查失败或异常的情况，我们还可以使用 kubectl 命令来进行故障排除和调试，以找出问题的根源并及时处理。&lt;/p>
&lt;h2 id="7-总结">
&lt;a href="#7-%e6%80%bb%e7%bb%93">#&lt;/a>
7. 总结
&lt;/h2>&lt;p>通过本文的实战指南，我们深入探讨了在 Kubernetes 环境中部署 Spring Boot 微服务并实施健康检查的方法和步骤。我们首先介绍了健康检查的概念和重要性，然后详细讲解了如何在 Spring Boot 应用程序中实现 liveness 探针和 readiness 探针，并在 Kubernetes 中进行配置。最后，我们进行了实战演练，验证了健康检查的配置是否生效，并了解了如何使用 kubectl 命令来查看应用程序的健康状态和进行故障排除。&lt;/p>
&lt;p>通过正确地配置和实施健康检查，我们可以有效地监控和管理应用程序的状态，及时发现并处理潜在的故障情况，从而确保整个系统的正常运行。希望本文对您理解和掌握云原生健康检查的实践技巧有所帮助，也欢迎您在实际应用中进行进一步的尝试和探索。&lt;/p>
&lt;h2 id="参考资料">
&lt;a href="#%e5%8f%82%e8%80%83%e8%b5%84%e6%96%99">#&lt;/a>
参考资料
&lt;/h2>&lt;ul>
&lt;li>&lt;a class="link" href="https://kubernetes.io/zh-cn/docs/concepts/workloads/pods/pod-lifecycle/#container-probes" target="_blank" rel="noopener"
>https://kubernetes.io/zh-cn/docs/concepts/workloads/pods/pod-lifecycle/#container-probes&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://kubernetes.io/zh-cn/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes" target="_blank" rel="noopener"
>https://kubernetes.io/zh-cn/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://docs.spring.io/spring-boot/docs/current/reference/html/actuator.html#actuator.endpoints.kubernetes-probes" target="_blank" rel="noopener"
>https://docs.spring.io/spring-boot/docs/current/reference/html/actuator.html#actuator.endpoints.kubernetes-probes&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://docs.spring.io/spring-boot/docs/current/reference/html/deployment.html#deployment.cloud.kubernetes.container-lifecycle" target="_blank" rel="noopener"
>https://docs.spring.io/spring-boot/docs/current/reference/html/deployment.html#deployment.cloud.kubernetes.container-lifecycle&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://docs.spring.io/spring-boot/docs/current/reference/html/web.html#web.graceful-shutdown" target="_blank" rel="noopener"
>https://docs.spring.io/spring-boot/docs/current/reference/html/web.html#web.graceful-shutdown&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>解析 AMQP 0-9-1 模型：构建可靠的消息传递系统</title><link>https://xiuwei.github.io/p/amqp_0-9-1_model_explained/</link><pubDate>Fri, 12 Apr 2024 21:00:00 +0000</pubDate><guid>https://xiuwei.github.io/p/amqp_0-9-1_model_explained/</guid><description>&lt;img src="https://xiuwei.github.io/p/amqp_0-9-1_model_explained/cover.jpg" alt="Featured image of post 解析 AMQP 0-9-1 模型：构建可靠的消息传递系统" />&lt;h2 id="amqp-0-9-1-和-amqp-模型高阶概述">
&lt;a href="#amqp-0-9-1-%e5%92%8c-amqp-%e6%a8%a1%e5%9e%8b%e9%ab%98%e9%98%b6%e6%a6%82%e8%bf%b0">#&lt;/a>
AMQP 0-9-1 和 AMQP 模型高阶概述
&lt;/h2>&lt;h3 id="amqp-0-9-1-是什么">
&lt;a href="#amqp-0-9-1-%e6%98%af%e4%bb%80%e4%b9%88">#&lt;/a>
AMQP 0-9-1 是什么?
&lt;/h3>&lt;p>AMQP（高级消息队列协议）是一个网络协议。它支持符合要求的客户端应用（application）和消息中间件代理（messaging middleware broker）之间进行通信。&lt;/p>
&lt;h3 id="消息代理brokers和他们所扮演的角色">
&lt;a href="#%e6%b6%88%e6%81%af%e4%bb%a3%e7%90%86brokers%e5%92%8c%e4%bb%96%e4%bb%ac%e6%89%80%e6%89%ae%e6%bc%94%e7%9a%84%e8%a7%92%e8%89%b2">#&lt;/a>
消息代理（Brokers）和他们所扮演的角色
&lt;/h3>&lt;p>消息代理（Messaging brokers）从发布者（publishers）亦称生产者（producers）那儿接收消息，并根据既定的路由规则把接收到的消息发送给处理消息的消费者（consumers）。&lt;/p>
&lt;p>由于AMQP是一个网络协议，所以这个过程中的发布者，消费者，消息代理 可以存在于不同的设备上。&lt;/p>
&lt;h3 id="amqp-0-9-1-模型简介">
&lt;a href="#amqp-0-9-1-%e6%a8%a1%e5%9e%8b%e7%ae%80%e4%bb%8b">#&lt;/a>
AMQP 0-9-1 模型简介
&lt;/h3>&lt;p>AMQP 0-9-1的工作过程如下图：消息（message）被发布者（publisher）发送给交换机（exchange），交换机常常被比喻成邮局或者邮箱。然后交换机将收到的消息根据路由规则分发给绑定的队列（queue）。最后AMQP代理会将消息投递给订阅了此队列的消费者，或者消费者按照需求自行获取。&lt;/p>
&lt;p>&lt;img src="https://xiuwei.github.io/p/amqp_0-9-1_model_explained/image.png"
width="700"
height="328"
srcset="https://xiuwei.github.io/p/amqp_0-9-1_model_explained/image_hu9df082a53ba58215e84dbde1a02364d6_51728_480x0_resize_box_3.png 480w, https://xiuwei.github.io/p/amqp_0-9-1_model_explained/image_hu9df082a53ba58215e84dbde1a02364d6_51728_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="AMQP 0-9-1的工作过程"
class="gallery-image"
data-flex-grow="213"
data-flex-basis="512px"
>&lt;/p>
&lt;p>发布者（publisher）发布消息时可以给消息指定各种消息属性（message meta-data）。有些属性有可能会被消息代理（brokers）使用，然而其他的属性则是完全不透明的，它们只能被接收消息的应用所使用。&lt;/p>
&lt;p>从安全角度考虑，网络是不可靠的，接收消息的应用也有可能在处理消息的时候失败。基于此原因，AMQP模块包含了一个消息确认（message acknowledgements）的概念：当一个消息从队列中投递给消费者后（consumer），消费者会通知一下消息代理（broker），这个可以是自动的也可以由处理消息的应用的开发者执行。当“消息确认”被启用的时候，消息代理不会完全将消息从队列中删除，直到它收到来自消费者的确认回执（acknowledgement）。&lt;/p>
&lt;p>在某些情况下，例如当一个消息无法被成功路由时，消息或许会被返回给发布者并被丢弃。或者，如果消息代理执行了延期操作，消息会被放入一个所谓的死信队列中。此时，消息发布者可以选择某些参数来处理这些特殊情况。&lt;/p>
&lt;p>队列，交换机和绑定统称为AMQP实体（AMQP entities）。&lt;/p>
&lt;h3 id="amqp-0-9-1-是一个可编程的协议">
&lt;a href="#amqp-0-9-1-%e6%98%af%e4%b8%80%e4%b8%aa%e5%8f%af%e7%bc%96%e7%a8%8b%e7%9a%84%e5%8d%8f%e8%ae%ae">#&lt;/a>
AMQP 0-9-1 是一个可编程的协议
&lt;/h3>&lt;p>AMQP 0-9-1是一个可编程协议，某种意义上说AMQP的实体和路由规则是由应用本身定义的，而不是由消息代理定义。包括像声明队列和交换机，定义他们之间的绑定，订阅队列等等关于协议本身的操作。&lt;/p>
&lt;p>这虽然能让开发人员自由发挥，但也需要他们注意潜在的定义冲突。当然这在实践中很少会发生，如果发生，会以配置错误（misconfiguration）的形式表现出来。&lt;/p>
&lt;p>应用程序（Applications）声明AMQP实体，定义需要的路由方案，或者删除不再需要的AMQP实体。&lt;/p>
&lt;h2 id="交换机和交换机类型">
&lt;a href="#%e4%ba%a4%e6%8d%a2%e6%9c%ba%e5%92%8c%e4%ba%a4%e6%8d%a2%e6%9c%ba%e7%b1%bb%e5%9e%8b">#&lt;/a>
交换机和交换机类型
&lt;/h2>&lt;p>交换机是用来发送消息的AMQP实体。交换机拿到一个消息之后将它路由给一个或零个队列。它使用哪种路由算法是由交换机类型和被称作绑定（bindings）的规则所决定的。AMQP 0-9-1的代理提供了四种交换机。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Exchange type&lt;/th>
&lt;th>Default pre-declared names&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Direct exchange&lt;/td>
&lt;td>(Empty string) and amq.direct&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Fanout exchange&lt;/td>
&lt;td>amq.fanout&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Topic exchange&lt;/td>
&lt;td>amq.topic&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Headers exchange&lt;/td>
&lt;td>amq.match (and amq.headers in RabbitMQ)&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>除交换机类型外，在声明交换机时还可以附带许多其他的属性，其中最重要的几个分别是：&lt;/p>
&lt;ul>
&lt;li>Name&lt;/li>
&lt;li>Durability （消息代理重启后，交换机是否还存在）&lt;/li>
&lt;li>Auto-delete （当所有与之绑定的消息队列都完成了对此交换机的使用后，删掉它）&lt;/li>
&lt;li>Arguments（依赖代理本身）&lt;/li>
&lt;/ul>
&lt;p>交换机可以有两个状态：持久（durable）、暂存（transient）。持久化的交换机会在消息代理（broker）重启后依旧存在，而暂存的交换机则不会（它们需要在代理再次上线后重新被声明）。然而并不是所有的应用场景都需要持久化的交换机。&lt;/p>
&lt;h3 id="默认交换机default-exchange">
&lt;a href="#%e9%bb%98%e8%ae%a4%e4%ba%a4%e6%8d%a2%e6%9c%badefault-exchange">#&lt;/a>
默认交换机（Default Exchange）
&lt;/h3>&lt;p>默认交换机（default exchange）实际上是一个由消息代理预先声明好的没有名字（名字为空字符串）的直连交换机（direct exchange）。它有一个特殊的属性使得它对于简单应用特别有用处：那就是每个新建队列（queue）都会自动绑定到默认交换机上，绑定的路由键（routing key）名称与队列名称相同。&lt;/p>
&lt;p>举个栗子：当你声明了一个名为&amp;quot;search-indexing-online&amp;quot;的队列，AMQP代理会自动将其绑定到默认交换机上，绑定（binding）的路由键名称也是为&amp;quot;search-indexing-online&amp;quot;。因此，当携带着名为&amp;quot;search-indexing-online&amp;quot;的路由键的消息被发送到默认交换机的时候，此消息会被默认交换机路由至名为&amp;quot;search-indexing-online&amp;quot;的队列中。换句话说，默认交换机看起来貌似能够直接将消息投递给队列，尽管技术上并没有做相关的操作。&lt;/p>
&lt;h3 id="直连交换机direct-exchange">
&lt;a href="#%e7%9b%b4%e8%bf%9e%e4%ba%a4%e6%8d%a2%e6%9c%badirect-exchange">#&lt;/a>
直连交换机（Direct Exchange）
&lt;/h3>&lt;p>直连型交换机（direct exchange）是根据消息携带的路由键（routing key）将消息投递给对应队列的。直连交换机用来处理消息的单播路由（unicast routing）（尽管它也可以处理多播路由）。&lt;/p>
&lt;p>下边介绍它是如何工作的：&lt;/p>
&lt;ul>
&lt;li>将一个队列绑定到某个交换机上，同时赋予该绑定一个路由键（routing key）K&lt;/li>
&lt;li>当一个携带着路由键为 R 的消息被发送给直连交换机时，交换机会把它路由给绑定值同样为R的队列，即K = R&lt;/li>
&lt;li>如果多个队列绑定到具有相同路由键 K 的直接交换机，则交换机会将消息路由到 K = R 的所有队列&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://xiuwei.github.io/p/amqp_0-9-1_model_explained/image-1.png"
width="698"
height="526"
srcset="https://xiuwei.github.io/p/amqp_0-9-1_model_explained/image-1_hu1369f4caf9cfd49ce6feaf0257bd2424_130923_480x0_resize_box_3.png 480w, https://xiuwei.github.io/p/amqp_0-9-1_model_explained/image-1_hu1369f4caf9cfd49ce6feaf0257bd2424_130923_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="直连型交换机图例"
class="gallery-image"
data-flex-grow="132"
data-flex-basis="318px"
>&lt;/p>
&lt;h3 id="扇型交换机fanout-exchange">
&lt;a href="#%e6%89%87%e5%9e%8b%e4%ba%a4%e6%8d%a2%e6%9c%bafanout-exchange">#&lt;/a>
扇型交换机（Fanout Exchange）
&lt;/h3>&lt;p>扇型交换机（funout exchange）将消息路由给绑定到它身上的所有队列，而不理会绑定的路由键。如果N个队列绑定到某个扇型交换机上，当有消息发送给此扇型交换机时，交换机会将消息的拷贝分别发送给这所有的N个队列。扇型用来交换机处理消息的广播路由（broadcast routing）。&lt;/p>
&lt;p>因为扇型交换机投递消息的拷贝到所有绑定到它的队列，所以他的应用案例都极其相似：&lt;/p>
&lt;ul>
&lt;li>大规模多用户在线（MMO）游戏可以使用它来处理排行榜更新等全局事件&lt;/li>
&lt;li>体育新闻网站可以用它来近乎实时地将比分更新分发给移动客户端&lt;/li>
&lt;li>分发系统使用它来广播各种状态和配置更新&lt;/li>
&lt;li>在群聊的时候，它被用来分发消息给参与群聊的用户。（AMQP没有内置presence的概念，因此XMPP可能会是个更好的选择）&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://xiuwei.github.io/p/amqp_0-9-1_model_explained/image-2.png"
width="698"
height="463"
srcset="https://xiuwei.github.io/p/amqp_0-9-1_model_explained/image-2_hu8fecc7ee99a13019f043a47adb021a3a_76255_480x0_resize_box_3.png 480w, https://xiuwei.github.io/p/amqp_0-9-1_model_explained/image-2_hu8fecc7ee99a13019f043a47adb021a3a_76255_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="扇型交换机图例"
class="gallery-image"
data-flex-grow="150"
data-flex-basis="361px"
>&lt;/p>
&lt;h3 id="主题交换机topic-exchange">
&lt;a href="#%e4%b8%bb%e9%a2%98%e4%ba%a4%e6%8d%a2%e6%9c%batopic-exchange">#&lt;/a>
主题交换机（Topic Exchange）
&lt;/h3>&lt;p>主题交换机（topic exchanges）通过对消息的路由键和队列到交换机的绑定模式之间的匹配，将消息路由给一个或多个队列。主题交换机经常用来实现各种分发/订阅模式及其变种。主题交换机通常用来实现消息的多播路由（multicast routing）。&lt;/p>
&lt;p>主题交换机拥有非常广泛的用户案例。无论何时，当一个问题涉及到那些想要有针对性的选择需要接收消息的 多消费者/多应用（multiple consumers/applications） 的时候，主题交换机都可以被列入考虑范围。&lt;/p>
&lt;p>使用案例：&lt;/p>
&lt;ul>
&lt;li>分发有关于特定地理位置的数据，例如销售点&lt;/li>
&lt;li>由多个工作者（workers）完成的后台任务，每个工作者负责处理某些特定的任务&lt;/li>
&lt;li>股票价格更新（以及其他类型的金融数据更新）&lt;/li>
&lt;li>涉及到分类或者标签的新闻更新（例如，针对特定的运动项目或者队伍）&lt;/li>
&lt;li>云端的不同种类服务的协调&lt;/li>
&lt;li>分布式架构/基于系统的软件封装，其中每个构建者仅能处理一个特定的架构或者系统。&lt;/li>
&lt;/ul>
&lt;h3 id="头交换机headers-exchange">
&lt;a href="#%e5%a4%b4%e4%ba%a4%e6%8d%a2%e6%9c%baheaders-exchange">#&lt;/a>
头交换机（Headers Exchange）
&lt;/h3>&lt;p>有时消息的路由操作会涉及到多个属性，此时使用消息头就比用路由键更容易表达，头交换机（headers exchange）就是为此而生的。头交换机使用多个消息属性来代替路由键建立路由规则。通过判断消息头的值能否与指定的绑定相匹配来确立路由规则。&lt;/p>
&lt;p>我们可以绑定一个队列到头交换机上，并给他们之间的绑定使用多个用于匹配的头（header）。这个案例中，消息代理得从应用开发者那儿取到更多一段信息，换句话说，它需要考虑某条消息（message）是需要部分匹配还是全部匹配。上边说的“更多一段消息”就是&amp;quot;x-match&amp;quot;参数。当&amp;quot;x-match&amp;quot;设置为“any”时，消息头的任意一个值被匹配就可以满足条件，而当&amp;quot;x-match&amp;quot;设置为“all”的时候，就需要消息头的所有值都匹配成功。&lt;/p>
&lt;p>头交换机可以视为直连交换机的另一种表现形式。头交换机能够像直连交换机一样工作，不同之处在于头交换机的路由规则是建立在头属性值之上，而不是路由键。路由键必须是一个字符串，而头属性值则没有这个约束，它们甚至可以是整数或者哈希值（字典）等。&lt;/p>
&lt;h2 id="队列queues">
&lt;a href="#%e9%98%9f%e5%88%97queues">#&lt;/a>
队列（Queues）
&lt;/h2>&lt;p>AMQP中的队列（queue）跟其他消息队列或任务队列中的队列是很相似的：它们存储着即将被应用消费掉的消息。队列跟交换机共享某些属性，但是队列也有一些另外的属性。&lt;/p>
&lt;ul>
&lt;li>Name&lt;/li>
&lt;li>Durable（消息代理重启后，队列依旧存在）&lt;/li>
&lt;li>Exclusive（只被一个连接（connection）使用，而且当连接关闭后队列即被删除）&lt;/li>
&lt;li>Auto-delete（当最后一个消费者退订后即被删除）&lt;/li>
&lt;li>Arguments（一些消息代理用他来完成类似与TTL的某些额外功能）&lt;/li>
&lt;/ul>
&lt;p>队列在声明（declare）后才能被使用。如果一个队列尚不存在，声明一个队列会创建它。如果声明的队列已经存在，并且属性完全相同，那么此次声明不会对原有队列产生任何影响。如果声明中的属性与已存在队列的属性有差异，那么一个错误代码为406的通道级异常就会被抛出。&lt;/p>
&lt;h3 id="队列名称">
&lt;a href="#%e9%98%9f%e5%88%97%e5%90%8d%e7%a7%b0">#&lt;/a>
队列名称
&lt;/h3>&lt;p>队列的名字可以由应用（application）来取，也可以让消息代理（broker）直接生成一个。队列的名字可以是最多255字节的一个utf-8字符串。若希望AMQP消息代理生成队列名，需要给队列的name参数赋值一个空字符串：在同一个通道（channel）的后续的方法（method）中，我们可以使用空字符串来表示之前生成的队列名称。之所以之后的方法可以获取正确的队列名是因为通道可以默默地记住消息代理最后一次生成的队列名称。&lt;/p>
&lt;p>以&amp;quot;amq.&amp;ldquo;开始的队列名称被预留做消息代理内部使用。如果试图在队列声明时打破这一规则的话，一个通道级的403 (ACCESS_REFUSED)错误会被抛出。&lt;/p>
&lt;h3 id="队列持久化queue-durability">
&lt;a href="#%e9%98%9f%e5%88%97%e6%8c%81%e4%b9%85%e5%8c%96queue-durability">#&lt;/a>
队列持久化（Queue Durability）
&lt;/h3>&lt;p>持久化队列（Durable queues）会被存储在磁盘上，当消息代理（broker）重启的时候，它依旧存在。没有被持久化的队列称作暂存队列（Transient queues）。并不是所有的场景和案例都需要将队列持久化。&lt;/p>
&lt;p>持久化的队列并不会使得路由到它的消息也具有持久性。倘若消息代理挂掉了，重新启动，那么在重启的过程中持久化队列会被重新声明，无论怎样，只有经过持久化的消息才能被重新恢复。&lt;/p>
&lt;h2 id="绑定bindings">
&lt;a href="#%e7%bb%91%e5%ae%9abindings">#&lt;/a>
绑定（Bindings）
&lt;/h2>&lt;p>绑定（Binding）是交换机（exchange）将消息（message）路由给队列（queue）所需遵循的规则。如果要指示交换机“E”将消息路由给队列“Q”，那么“Q”就需要与“E”进行绑定。绑定操作需要定义一个可选的路由键（routing key）属性给某些类型的交换机。路由键的意义在于从发送给交换机的众多消息中选择出某些消息，将其路由给绑定的队列。&lt;/p>
&lt;p>打个比方：&lt;/p>
&lt;ul>
&lt;li>队列（queue）是我们想要去的位于纽约的目的地&lt;/li>
&lt;li>交换机（exchange）是JFK机场&lt;/li>
&lt;li>绑定（binding）就是JFK机场到目的地的路线。能够到达目的地的路线可以是一条或者多条&lt;/li>
&lt;/ul>
&lt;p>拥有了交换机这个中间层，很多由发布者直接到队列难以实现的路由方案能够得以实现，并且避免了应用开发者的许多重复劳动。&lt;/p>
&lt;p>如果AMQP的消息无法路由到队列（例如，发送到的交换机没有绑定队列），消息会被就地销毁或者返还给发布者。如何处理取决于发布者设置的消息属性。&lt;/p>
&lt;h2 id="消费者consumers">
&lt;a href="#%e6%b6%88%e8%b4%b9%e8%80%85consumers">#&lt;/a>
消费者（Consumers）
&lt;/h2>&lt;p>消息如果只是存储在队列里是没有任何用处的。被应用消费掉，消息的价值才能够体现。在AMQP 0-9-1 模型中，有两种途径可以达到此目的：&lt;/p>
&lt;ul>
&lt;li>将消息投递给应用 (&amp;ldquo;push API&amp;rdquo;)&lt;/li>
&lt;li>应用根据需要主动获取消息 (&amp;ldquo;pull API&amp;rdquo;)&lt;/li>
&lt;/ul>
&lt;p>使用push API，应用（application）需要明确表示出它在某个特定队列里所感兴趣的，想要消费的消息。如是，我们可以说应用注册了一个消费者，或者说订阅了一个队列。一个队列可以注册多个消费者，也可以注册一个独享的消费者（当独享消费者存在时，其他消费者即被排除在外）。&lt;/p>
&lt;p>每个消费者（订阅者）都有一个叫做消费者标签的标识符。它可以被用来退订消息。消费者标签实际上是一个字符串。&lt;/p>
&lt;h3 id="消息确认message-acknowledgements">
&lt;a href="#%e6%b6%88%e6%81%af%e7%a1%ae%e8%ae%a4message-acknowledgements">#&lt;/a>
消息确认（Message Acknowledgements）
&lt;/h3>&lt;p>消费者应用（Consumer applications） - 用来接受和处理消息的应用 - 在处理消息的时候偶尔会失败或者有时会直接崩溃掉。而且网络原因也有可能引起各种问题。这就给我们出了个难题，AMQP代理在什么时候删除消息才是正确的？AMQP 0-9-1 规范给我们两种建议：&lt;/p>
&lt;p>当消息代理（broker）将消息发送给应用后立即删除。（使用AMQP方法：basic.deliver或basic.get-ok）
待应用（application）发送一个确认回执（acknowledgement）后再删除消息。（使用AMQP方法：basic.ack）
前者被称作自动确认模式（automatic acknowledgement model），后者被称作显式确认模式（explicit acknowledgement model）。在显式模式下，由消费者应用来选择什么时候发送确认回执（acknowledgement）。应用可以在收到消息后立即发送，或将未处理的消息存储后发送，或等到消息被处理完毕后再发送确认回执（例如，成功获取一个网页内容并将其存储之后）。&lt;/p>
&lt;p>如果一个消费者在尚未发送确认回执的情况下挂掉了，那AMQP代理会将消息重新投递给另一个消费者。如果当时没有可用的消费者了，消息代理会死等下一个注册到此队列的消费者，然后再次尝试投递。&lt;/p>
&lt;h3 id="拒绝消息rejecting-messages">
&lt;a href="#%e6%8b%92%e7%bb%9d%e6%b6%88%e6%81%afrejecting-messages">#&lt;/a>
拒绝消息（Rejecting Messages）
&lt;/h3>&lt;p>当一个消费者接收到某条消息后，处理过程有可能成功，有可能失败。应用可以向消息代理表明，本条消息由于“拒绝消息（Rejecting Messages）”的原因处理失败了（或者未能在此时完成）。当拒绝某条消息时，应用可以告诉消息代理如何处理这条消息——销毁它或者重新放入队列。当此队列只有一个消费者时，请确认不要由于拒绝消息并且选择了重新放入队列的行为而引起消息在同一个消费者身上无限循环的情况发生。&lt;/p>
&lt;h3 id="negative-acknowledgements">
&lt;a href="#negative-acknowledgements">#&lt;/a>
Negative Acknowledgements
&lt;/h3>&lt;p>在AMQP中，basic.reject方法用来执行拒绝消息的操作。但basic.reject有个限制：你不能使用它决绝多个带有确认回执（acknowledgements）的消息。但是如果你使用的是RabbitMQ，那么你可以使用被称作negative acknowledgements（也叫nacks）的AMQP 0-9-1扩展来解决这个问题。更多的信息请参考帮助页面&lt;/p>
&lt;h3 id="预取消息prefetching-messages">
&lt;a href="#%e9%a2%84%e5%8f%96%e6%b6%88%e6%81%afprefetching-messages">#&lt;/a>
预取消息（Prefetching Messages）
&lt;/h3>&lt;p>在多个消费者共享一个队列的案例中，明确指定在收到下一个确认回执前每个消费者一次可以接受多少条消息是非常有用的。这可以在试图批量发布消息的时候起到简单的负载均衡和提高消息吞吐量的作用。For example, if a producing application sends messages every minute because of the nature of the work it is doing.（？？？例如，如果生产应用每分钟才发送一条消息，这说明处理工作尚在运行。）&lt;/p>
&lt;p>注意，RabbitMQ只支持通道级的预取计数，而不是连接级的或者基于大小的预取。&lt;/p>
&lt;h2 id="消息属性和有效载荷message-attributes-and-payload">
&lt;a href="#%e6%b6%88%e6%81%af%e5%b1%9e%e6%80%a7%e5%92%8c%e6%9c%89%e6%95%88%e8%bd%bd%e8%8d%b7message-attributes-and-payload">#&lt;/a>
消息属性和有效载荷（Message Attributes and Payload）
&lt;/h2>&lt;p>AMQP模型中的消息（Message）对象是带有属性（Attributes）的。有些属性及其常见，以至于AMQP 0-9-1 明确的定义了它们，并且应用开发者们无需费心思思考这些属性名字所代表的具体含义。例如：&lt;/p>
&lt;ul>
&lt;li>Content type（内容类型）&lt;/li>
&lt;li>Content encoding（内容编码）&lt;/li>
&lt;li>Routing key（路由键）&lt;/li>
&lt;li>Delivery mode (persistent or not) 投递模式（持久化 或 非持久化）&lt;/li>
&lt;li>Message priority（消息优先权）&lt;/li>
&lt;li>Message publishing timestamp（消息发布的时间戳）&lt;/li>
&lt;li>Expiration period（消息有效期）&lt;/li>
&lt;li>Publisher application id（发布应用的ID）&lt;/li>
&lt;/ul>
&lt;p>有些属性是被AMQP代理所使用的，但是大多数是开放给接收它们的应用解释器用的。有些属性是可选的也被称作消息头（headers）。他们跟HTTP协议的X-Headers很相似。消息属性需要在消息被发布的时候定义。&lt;/p>
&lt;p>AMQP的消息除属性外，也含有一个有效载荷 - Payload（消息实际携带的数据），它被AMQP代理当作不透明的字节数组来对待。消息代理不会检查或者修改有效载荷。消息可以只包含属性而不携带有效载荷。它通常会使用类似JSON这种序列化的格式数据，为了节省，协议缓冲器和MessagePack将结构化数据序列化，以便以消息的有效载荷的形式发布。AMQP及其同行者们通常使用&amp;quot;content-type&amp;rdquo; 和 &amp;ldquo;content-encoding&amp;rdquo; 这两个字段来与消息沟通进行有效载荷的辨识工作，但这仅仅是基于约定而已。&lt;/p>
&lt;p>消息能够以持久化的方式发布，AMQP代理会将此消息存储在磁盘上。如果服务器重启，系统会确认收到的持久化消息未丢失。简单地将消息发送给一个持久化的交换机或者路由给一个持久化的队列，并不会使得此消息具有持久化性质：它完全取决与消息本身的持久模式（persistence mode）。将消息以持久化方式发布时，会对性能造成一定的影响（就像数据库操作一样，健壮性的存在必定造成一些性能牺牲）。&lt;/p>
&lt;h2 id="amqp-0-9-1-方法">
&lt;a href="#amqp-0-9-1-%e6%96%b9%e6%b3%95">#&lt;/a>
AMQP 0-9-1 方法
&lt;/h2>&lt;p>AMQP 0-9-1由许多方法（methods）构成。方法即是操作，这跟面向对象编程中的方法没半毛钱关系。AMQP的方法被分组在类（class）中。这里的类仅仅是对AMQP方法的逻辑分组而已。在 AMQP 0-9-1参考 中有对AMQP方法的详细介绍。&lt;/p>
&lt;p>让我们来看看交换机类，有一组方法被关联到了交换机的操作上。这些方法如下所示：&lt;/p>
&lt;ul>
&lt;li>exchange.declare&lt;/li>
&lt;li>exchange.declare-ok&lt;/li>
&lt;li>exchange.delete&lt;/li>
&lt;li>exchange.delete-ok&lt;/li>
&lt;/ul>
&lt;p>（请注意，RabbitMQ网站参考中包含了特用于RabbitMQ的交换机类的扩展，这里我们不对其进行讨论）&lt;/p>
&lt;p>以上的操作来自逻辑上的配对：exchange.declare 和 exchange.declare-ok，exchange.delete 和 exchange.delete-ok. 这些操作分为“请求 - requests”（由客户端发送）和“响应 - responses”（由代理发送，用来回应之前提到的“请求”操作）。&lt;/p>
&lt;p>如下的例子：客户端要求消息代理使用exchange.declare方法声明一个新的交换机：
&lt;img src="https://xiuwei.github.io/p/amqp_0-9-1_model_explained/image-3.png"
width="551"
height="155"
srcset="https://xiuwei.github.io/p/amqp_0-9-1_model_explained/image-3_hu8db8d483b5200b60f7675a9896d4dd37_44595_480x0_resize_box_3.png 480w, https://xiuwei.github.io/p/amqp_0-9-1_model_explained/image-3_hu8db8d483b5200b60f7675a9896d4dd37_44595_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="exchange.declare"
class="gallery-image"
data-flex-grow="355"
data-flex-basis="853px"
>&lt;/p>
&lt;p>如上图所示，exchange.declare方法携带了好几个参数。这些参数可以允许客户端指定交换机名称、类型、是否持久化等等。&lt;/p>
&lt;p>操作成功后，消息代理使用exchange.declare-ok方法进行回应：
&lt;img src="https://xiuwei.github.io/p/amqp_0-9-1_model_explained/image-4.png"
width="551"
height="155"
srcset="https://xiuwei.github.io/p/amqp_0-9-1_model_explained/image-4_hu9850aaca366c1b50a4cfec803c423b3f_34698_480x0_resize_box_3.png 480w, https://xiuwei.github.io/p/amqp_0-9-1_model_explained/image-4_hu9850aaca366c1b50a4cfec803c423b3f_34698_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="exchange.declare-ok"
class="gallery-image"
data-flex-grow="355"
data-flex-basis="853px"
>&lt;/p>
&lt;p>exchange.declare-ok方法除了通道号之外没有携带任何其他参数（通道-channel 会在本指南稍后章节进行介绍）。&lt;/p>
&lt;p>AMQP队列类的配对方法 - queue.declare方法 和 queue.declare-ok有着与其他配对方法非常相似的一系列事件：
&lt;img src="https://xiuwei.github.io/p/amqp_0-9-1_model_explained/image-5.png"
width="551"
height="155"
srcset="https://xiuwei.github.io/p/amqp_0-9-1_model_explained/image-5_hu0a398e5dfc7528b3c21db62c86d6df1d_39130_480x0_resize_box_3.png 480w, https://xiuwei.github.io/p/amqp_0-9-1_model_explained/image-5_hu0a398e5dfc7528b3c21db62c86d6df1d_39130_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="queue.declare"
class="gallery-image"
data-flex-grow="355"
data-flex-basis="853px"
>
&lt;img src="https://xiuwei.github.io/p/amqp_0-9-1_model_explained/image-6.png"
width="551"
height="155"
srcset="https://xiuwei.github.io/p/amqp_0-9-1_model_explained/image-6_hu0d477143c88a9947645dfc18354afce6_48025_480x0_resize_box_3.png 480w, https://xiuwei.github.io/p/amqp_0-9-1_model_explained/image-6_hu0d477143c88a9947645dfc18354afce6_48025_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="queue.declare-ok"
class="gallery-image"
data-flex-grow="355"
data-flex-basis="853px"
>&lt;/p>
&lt;p>不是所有的AMQP方法都有与其配对的“另一半”。许多（basic.publish是最被广泛使用的）都没有相对应的“响应”方法，另外一些（如basic.get）有着一种以上与之对应的“响应”方法。&lt;/p>
&lt;h2 id="连接connections">
&lt;a href="#%e8%bf%9e%e6%8e%a5connections">#&lt;/a>
连接（Connections）
&lt;/h2>&lt;p>AMQP连接通常是长连接。AMQP是一个使用TCP提供可靠投递的应用层协议。AMQP使用认证机制并且提供TLS（SSL）保护。当一个应用不再需要连接到AMQP代理的时候，需要优雅的释放掉AMQP连接，而不是直接将TCP连接关闭。&lt;/p>
&lt;h2 id="通道channels">
&lt;a href="#%e9%80%9a%e9%81%93channels">#&lt;/a>
通道（Channels）
&lt;/h2>&lt;p>有些应用需要与AMQP代理建立多个连接。无论怎样，同时开启多个TCP连接都是不合适的，因为这样做会消耗掉过多的系统资源并且使得防火墙的配置更加困难。AMQP 0-9-1提供了通道（channels）来处理多连接，可以把通道理解成共享一个TCP连接的多个轻量化连接。&lt;/p>
&lt;p>在涉及多线程/进程的应用中，为每个线程/进程开启一个通道（channel）是很常见的，并且这些通道不能被线程/进程共享。&lt;/p>
&lt;p>一个特定通道上的通讯与其他通道上的通讯是完全隔离的，因此每个AMQP方法都需要携带一个通道号，这样客户端就可以指定此方法是为哪个通道准备的。&lt;/p>
&lt;h2 id="虚拟主机virtual-hosts">
&lt;a href="#%e8%99%9a%e6%8b%9f%e4%b8%bb%e6%9c%bavirtual-hosts">#&lt;/a>
虚拟主机（Virtual Hosts）
&lt;/h2>&lt;p>为了在一个单独的代理上实现多个隔离的环境（用户、用户组、交换机、队列 等），AMQP提供了一个虚拟主机（virtual hosts - vhosts）的概念。这跟Web servers虚拟主机概念非常相似，这为AMQP实体提供了完全隔离的环境。当连接被建立的时候，AMQP客户端来指定使用哪个虚拟主机。&lt;/p>
&lt;h2 id="amqp是可扩展的">
&lt;a href="#amqp%e6%98%af%e5%8f%af%e6%89%a9%e5%b1%95%e7%9a%84">#&lt;/a>
AMQP是可扩展的
&lt;/h2>&lt;p>AMQP 0-9-1 拥有多个扩展点：&lt;/p>
&lt;ul>
&lt;li>定制化交换机类型 可以让开发者们实现一些开箱即用的交换机类型尚未很好覆盖的路由方案。例如 geodata-based routing。&lt;/li>
&lt;li>交换机和队列的声明中可以包含一些消息代理能够用到的额外属性。例如RabbitMQ中的per-queue message TTL即是使用该方式实现。&lt;/li>
&lt;li>特定消息代理的协议扩展。例如RabbitMQ所实现的扩展。&lt;/li>
&lt;li>新的 AMQP 0-9-1 方法类可被引入。&lt;/li>
&lt;li>消息代理可以被其他的插件扩展，例如RabbitMQ的管理前端 和 已经被插件化的HTTP API。&lt;/li>
&lt;/ul>
&lt;p>这些特性使得AMQP 0-9-1模型更加灵活，并且能够适用于解决更加宽泛的问题。&lt;/p>
&lt;h2 id="amqp-0-9-1-客户端生态系统">
&lt;a href="#amqp-0-9-1-%e5%ae%a2%e6%88%b7%e7%ab%af%e7%94%9f%e6%80%81%e7%b3%bb%e7%bb%9f">#&lt;/a>
AMQP 0-9-1 客户端生态系统
&lt;/h2>&lt;p>AMQP 0-9-1 拥有众多的适用于各种流行语言和框架的客户端。其中一部分严格遵循AMQP规范，提供AMQP方法的实现。另一部分提供了额外的技术，方便使用的方法和抽象。有些客户端是异步的（非阻塞的），有些是同步的（阻塞的），有些将这两者同时实现。有些客户端支持“供应商的特定扩展”（例如RabbitMQ的特定扩展）。&lt;/p>
&lt;p>因为AMQP的主要目标之一就是实现交互性，所以对于开发者来讲，了解协议的操作方法而不是只停留在弄懂特定客户端的库就显得十分重要。这样一来，开发者使用不同类型的库与协议进行沟通时就会容易的多。&lt;/p>
&lt;h2 id="参考资料">
&lt;a href="#%e5%8f%82%e8%80%83%e8%b5%84%e6%96%99">#&lt;/a>
参考资料
&lt;/h2>&lt;ul>
&lt;li>&lt;a class="link" href="https://www.rabbitmq.com/tutorials/amqp-concepts#amqp-methods" target="_blank" rel="noopener"
>https://www.rabbitmq.com/tutorials/amqp-concepts#amqp-methods&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>日志规范</title><link>https://xiuwei.github.io/p/log-specification/</link><pubDate>Tue, 02 Apr 2024 19:00:00 +0000</pubDate><guid>https://xiuwei.github.io/p/log-specification/</guid><description>&lt;img src="https://xiuwei.github.io/p/log-specification/cover.jpg" alt="Featured image of post 日志规范" />&lt;h2 id="前言">
&lt;a href="#%e5%89%8d%e8%a8%80">#&lt;/a>
前言
&lt;/h2>&lt;p>如果在阅读日志时，你遇到以下问题，说明你的日志打印需要规范起来：&lt;/p>
&lt;ul>
&lt;li>过多或冗余的日志，干扰排障：有时候，系统可能会记录过多的日志信息，包括一些无关紧要的或冗余的信息。这会导致日志文件过大，不易于查找和分析关键的日志记录；&lt;/li>
&lt;li>&lt;strong>缺乏一致性和标准化：&lt;/strong> 在多个模块或组件中，日志格式和结构可能不一致，导致日志的解析和分析困难。缺乏统一的标准化规范，使得日志的可读性和可维护性下降；&lt;/li>
&lt;li>缺乏上下文信息：打印日志时，只把原始的错误打印出来，没有补充打印上下文信息，例如：请求参数、关键变量值等，导致排障困难，需要重新复现；&lt;/li>
&lt;li>同一个错误层层打印：例如在 Go 简洁架构中，同一个错误日志分别在 Use Case 层和 Service 层分别打印，导致在排障时带来冗余日志干扰，还会导致程序性能下降、浪费存储空间等；&lt;/li>
&lt;li>根因丢失，无法快速定位故障点：有时候，错误日志在向上传递过程中，如果做了包装，要附带一些信息，最原始的报错日志可能就会丢失，导致很难定位出错误根因。&lt;/li>
&lt;/ul>
&lt;p>日志规范是为了提高日志的可读性、可维护性和可搜索性而制定的一系列规则和约定。将日志打印规范化，可以带来以下好处：&lt;/p>
&lt;ul>
&lt;li>可读性：日志规范可以定义日志的格式、结构和语义，使日志信息更易于理解和解读。统一的日志格式可以让开发人员、运维人员和其他团队成员更容易阅读和理解日志，从而更快地定位和解决问题；&lt;/li>
&lt;li>可维护性：日志规范可以定义日志的级别、分类和命名规则，使日志更易于管理和维护。通过规范化的日志级别和分类，可以更好地组织和过滤日志，只关注关键的日志信息，减少冗余和无用的日志记录；&lt;/li>
&lt;li>可搜索性：日志规范可以定义日志的关键字、标签和结构，使日志更易于搜索和过滤。通过定义一致的日志结构和关键字，可以使用日志分析工具或搜索引擎来快速搜索和过滤日志，以便查找特定的事件、错误或异常；&lt;/li>
&lt;li>故障排查：日志规范可以帮助定位和排查故障。规范的日志格式和结构可以提供更多的上下文信息，包括时间戳、请求参数、异常堆栈等，有助于分析和理解故障现象，加快故障排查的速度和准确性；&lt;/li>
&lt;li>性能优化：日志规范可以帮助识别和优化性能问题。通过规范化的日志记录和度量指标，可以更好地监控和分析系统的性能表现，发现潜在的性能瓶颈和优化机会。&lt;/li>
&lt;/ul>
&lt;p>可以看到，日志规范是提高日志质量和效用的重要工具。通过制定和遵守日志规范，可以提升团队协作效率，加快故障排查和问题解决的速度，提高系统的可靠性和性能。&lt;/p>
&lt;p>本文就来介绍下日志记录需要遵循的规范。这些日志规范分为以下 2 类：&lt;/p>
&lt;ul>
&lt;li>必须遵循的：这类规范是所有组件记录日志时都要遵循的规范；&lt;/li>
&lt;li>建议遵循的：这些规范是根据需要选择性需要遵循的规范。&lt;/li>
&lt;/ul>
&lt;h2 id="日志打印规范">
&lt;a href="#%e6%97%a5%e5%bf%97%e6%89%93%e5%8d%b0%e8%a7%84%e8%8c%83">#&lt;/a>
日志打印规范
&lt;/h2>&lt;h3 id="强制必须遵循的规范">
&lt;a href="#%e5%bc%ba%e5%88%b6%e5%bf%85%e9%a1%bb%e9%81%b5%e5%be%aa%e7%9a%84%e8%a7%84%e8%8c%83">#&lt;/a>
【强制】必须遵循的规范]
&lt;/h3>&lt;ul>
&lt;li>所有日志均使用英文进行记录；&lt;/li>
&lt;li>记录日志时，要明确日志级别，选择正确的日志级别；&lt;/li>
&lt;li>打印结构化的日志，不要拼接字符串， 采用 KV 模式；&lt;/li>
&lt;li>日志均以大写开头，结尾不跟 .（可以接受问号和感叹号，但不推荐），例如：log.Errorw(err, &amp;ldquo;Failed to create lru cache&amp;rdquo;)；&lt;/li>
&lt;li>使用过去时，例如：Could not delete B 而不是 Cannot delete B；&lt;/li>
&lt;li>日志信息应使用主语进行记录，当有执行主体时使用完整句子 （A could not do B），如果主体是程序本身则省略主语（Could not do B）；&lt;/li>
&lt;li>日志要脱敏，禁止输出敏感的信息，例如：密码、密钥、手机号、IP 等信息；&lt;/li>
&lt;li>为了方便阅读日志，日志禁止换行；&lt;/li>
&lt;li>日志中不要记录无用信息，防止无用日志淹没重要信息；&lt;/li>
&lt;li>日志信息要准确全面，努力做到仅凭日志就可以定位问题；&lt;/li>
&lt;li>Error 日志必须记录完整的上下文信息，例如：完整输入和输出、关键变量的值等；&lt;/li>
&lt;li>使用 Warn 级别记录用户输入参数错误导致的程序错误。因为我们 Error 和 Warn 级别的日志告警策略不同，在 Warn 级别打印，可以避免频繁告警；&lt;/li>
&lt;li>确保日志打印语句不 Panic，例如：klog.V(4).Infof(&amp;ldquo;Connection error: %s %s: %v&amp;rdquo;, t.Op, t.URL, t.Err)，如果 t 是 nil 就会导致日志调用时发生 panic，会大大加大排障难度；&lt;/li>
&lt;li>日志信息禁用字符串拼接，而要使用占位符。使用占位符，格式更清晰，性能更优。例如：klog.V(4).Infof(&amp;ldquo;Get login token: %s&amp;rdquo;, rp.Token)；&lt;/li>
&lt;li>所有 Operator、Controller、Kube APIServer Style 的组件为了跟 K8S 生态保持兼容，统一使用 &lt;a class="link" href="http://k8s.io/klog/v2" target="_blank" rel="noopener"
>k8s.io/klog/v2open in new window&lt;/a> 包。所有非 Operator、Controller、Kube APIServer Style 的组件统一使用 &lt;a class="link" href="http://github.com/superproj/onex/pkg/log" target="_blank" rel="noopener"
>github.com/superproj/onex/pkg/logopen in new window&lt;/a> 包；&lt;/li>
&lt;li>当时用 &lt;a class="link" href="http://k8s.io/klog/v2" target="_blank" rel="noopener"
>k8s.io/klog/v2open in new window&lt;/a> 记录日志时，需要遵循以下规范：
&lt;ul>
&lt;li>要使用结构化的日志记录方式：klog.InfoS， klog.ErrorS。Example: klog.InfoS(&amp;ldquo;Received HTTP request&amp;rdquo;, &amp;ldquo;method&amp;rdquo;, &amp;ldquo;GET&amp;rdquo;, &amp;ldquo;URL&amp;rdquo;, &amp;ldquo;/metrics&amp;rdquo;, &amp;ldquo;latency&amp;rdquo;, time.Second);&lt;/li>
&lt;li>日志级别：
&lt;ul>
&lt;li>Error 级别日志使用：klog.ErrorS；&lt;/li>
&lt;li>Warning 级别日志使用：klog.V(1).InfoS；&lt;/li>
&lt;li>Info 级别日志使用：klog.V(2).InfoS；&lt;/li>
&lt;li>Debug 级别日志使用：klog.V(4).InfoS；&lt;/li>
&lt;li>Trace 级别日志使用：klog.V(5).InfoS。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>日志键值对，值规范如下：
&lt;ul>
&lt;li>优先使用klog.KObj 或 klog.KObjSlice来记录 Kubernetes 对象；
&lt;ul>
&lt;li>当日志记录对象不是一个标准的 Kubernetes 资源对象时，使用klog.KRef；&lt;/li>
&lt;li>当日志记录对象是单个 Kubernetes 资源对象时（例如：*v1.Pod），使用klog.KObj；&lt;/li>
&lt;li>当日志记录对象是 Kubernetes 资源对象数组时（例如[]*v1.Pod），使用klog.KObjSlice。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>优先传递结构化的对象，而非object.String()；&lt;/li>
&lt;li>当期望将[]byte类型的对象作为string类型记录时，需要明确使用string(&lt;byte array>)进行转换；&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>如果使用 &lt;a class="link" href="http://github.com/superproj/onex/pkg/log%E6%97%A5%E5%BF%97%E5%8C%85%EF%BC%9A" target="_blank" rel="noopener"
>github.com/superproj/onex/pkg/log日志包：open in new window&lt;/a>
&lt;ul>
&lt;li>要使用结构化的日志记录方式：log.C(ctx).Errorw()、log.C(ctx).Infow()等；&lt;/li>
&lt;li>如果日志能获取到 context.Context 变量，需要使用 log.C() 函数打印，例如：log.C(ctx).Warnw(&amp;ldquo;please enable redis, otherwise the idempotent is invalid&amp;rdquo;)。使用 log.C(ctx) 可以输出必要的 KV，例如：&lt;a class="link" href="http://trace.id/" target="_blank" rel="noopener"
>trace.idopen in new window&lt;/a>、&lt;a class="link" href="http://user.id/" target="_blank" rel="noopener"
>user.idopen in new window&lt;/a> 等。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>不要使用 Fatal 级别的日志，因为 Fatal 级别的日志会调用 os.Exit(255) 导致日志退出。如果确实需要退出，请先打印 Error 级别的日志，在调用 os.Exit(255) 显示退出程序；&lt;/li>
&lt;li>不要使用 Panic 级别的日志，这会导致程序 Panic，造成服务不稳定。如果程序需要 Panic，可以通过返回 error，并处理改 error 来达到相同的目的；&lt;/li>
&lt;li>线上日志至少要保留 15 天，因为异常日志具有以 周 为频次发生的特点，保留 15 天，可以帮助你在排障时，有日志可以查询；&lt;/li>
&lt;li>在 Debug、排障过程中，持续不断优化日志输出，定期对代码日志进行 review。如果定位问题时间过长则说明日志需要优化。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>提示：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>任何日志事件都可以简单归为错误日志和非错误日志，所以在使用klog记录日志时，只使用了klog.ErrorS 和klog.InfoS；&lt;/li>
&lt;li>在日志消息中，关于开头字母大小写的惯例因开发团队而异。一些团队更喜欢使用大写字母开头，这有助于强调重要性，以及使日志更易读，尤其是在较长的日志行中。而其他团队更倾向于使用小写字母，因为这样的日志看起来更加紧凑和一致；&lt;/li>
&lt;li>无用日志常见情况：
&lt;ul>
&lt;li>能够放在一条日志中的东西放在多条日志中输出；&lt;/li>
&lt;li>预期会发生且能够正常处理的异常，打印一堆无用的堆栈；&lt;/li>
&lt;li>为了开发调试方便而加入的“临时”日志；&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>日志过少的情况有：
&lt;ul>
&lt;li>请求出错时不能通过日志直接定位问题，需要添加临时日志并重新请求才能定位问题；&lt;/li>
&lt;li>无法确定服务中的后台任务是否按照期望执行；&lt;/li>
&lt;li>无法确定服务的内存数据结构的状态；&lt;/li>
&lt;li>无法确定服务的异常处理逻辑（如重试）是否正常执行；&lt;/li>
&lt;li>无法确定服务启动时配置是否正确加载。&lt;/li>
&lt;li>&amp;hellip;&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="建议建议遵循的规范">
&lt;a href="#%e5%bb%ba%e8%ae%ae%e5%bb%ba%e8%ae%ae%e9%81%b5%e5%be%aa%e7%9a%84%e8%a7%84%e8%8c%83">#&lt;/a>
【建议】建议遵循的规范
&lt;/h3>&lt;ul>
&lt;li>请遵循日志打印基本原则：日志信息要简明扼要、易理解、易搜索，并包含排障所需的上下文
&lt;ul>
&lt;li>失败日志建议格式为 Failed to &amp;lt;动词&amp;gt; + &amp;lt;一些事&amp;gt;，例如：log.Errorw(err, &amp;ldquo;Failed to initialize casbin adapter&amp;rdquo;)；&lt;/li>
&lt;li>成功日志建议格式为 &amp;lt;动词&amp;gt; + &amp;lt;一些事&amp;gt;，例如：log.Infow(&amp;ldquo;Initialize idempotent success&amp;rdquo;)。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>共享库，例如：&lt;a class="link" href="http://github.com/superproj/onex/pkg/db" target="_blank" rel="noopener"
>github.com/superproj/onex/pkg/dbopen in new window&lt;/a> 只返回错误，不记录日志。因为共享库可能会用在命令行工具、其他项目中，如果记录日志，势必会造成命令行工具有日志输出，影响使用体验、共享库的日志输出跟其他项目的日志输出格式不一致等问题；&lt;/li>
&lt;li>日志包名字统一为 &lt;a class="link" href="http://github.com/superproj/onex/pkg/log" target="_blank" rel="noopener"
>github.com/superproj/onex/pkg/logopen in new window&lt;/a> 或 &lt;a class="link" href="http://k8s.io/klog/v2%EF%BC%8C%E5%A6%82%E6%9E%9C%E5%90%8C%E4%B8%80%E4%B8%AA%E6%96%87%E4%BB%B6%E4%B8%AD%E6%9C%89%E5%85%B6%E4%BB%96%E5%90%8C%E5%90%8D%E7%9A%84%E6%97%A5%E5%BF%97%E5%8C%85%EF%BC%8C%E9%9C%80%E8%A6%81%E5%B0%86%E5%85%B6%E4%BB%96%E6%97%A5%E5%BF%97%E5%8C%85%E9%87%8D%E5%91%BD%E5%90%8D%EF%BC%8C%E8%80%8C%E4%B8%94%E9%87%8D%E5%91%BD%E5%90%8D%E7%9A%84%E5%90%8D%E5%AD%97%E8%A6%81%E5%9C%A8" target="_blank" rel="noopener"
>k8s.io/klog/v2，如果同一个文件中有其他同名的日志包，需要将其他日志包重命名，而且重命名的名字要在open in new window&lt;/a>中保持一致，例如：kratoslog &amp;ldquo;&lt;a class="link" href="http://github.com/go-kratos/kratos/v2/log" target="_blank" rel="noopener"
>github.com/go-kratos/kratos/v2/logopen in new window&lt;/a>&amp;quot;；&lt;/li>
&lt;li>Error 日志应该在最原始的报错位置打印，一是避免上层代码缺失部分入参，二是避免漏打；&lt;/li>
&lt;li>服务初始化时，成功信息和失败信息都需要打印，影响启动的错误需要 panic，并打印 FATAL 日志；&lt;/li>
&lt;li>打印参数类型已知的情况下，建议按照对应类型格式化方式打印参数；不确定类型可采用 %v；结构体打印可使用 %+v，可将变量名和变量值都打印出来，但需要注意结构体包含指针类型变量，那打印的只是地址信息，因此需要单独打印。&lt;/li>
&lt;/ul>
&lt;h2 id="选择合适的日志级别">
&lt;a href="#%e9%80%89%e6%8b%a9%e5%90%88%e9%80%82%e7%9a%84%e6%97%a5%e5%bf%97%e7%ba%a7%e5%88%ab">#&lt;/a>
选择合适的日志级别
&lt;/h2>&lt;p>不同级别的日志，具有不同的意义，能实现不同的功能，在开发中，我们应该根据目的，在合适的级别记录日志，这里我同样给你一些建议。具体如下表所示：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>日志级别&lt;/th>
&lt;th>描述&lt;/th>
&lt;th>告警级别&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Debug&lt;/td>
&lt;td>为了获取足够的信息进行 Debug，通常会在 Debug 级别打印很多日志。例如，可以打印整个 HTTP 请求的请求 Body 或者响应 Body。&lt;br>Debug 级别需要打印大量的日志，这会严重拖累程序的性能。并且，Debug 级别的日志，主要是为了能在开发测试阶段更好地 Debug，多是一些不影响现网业务的日志信息。&lt;br>所以，对于 Debug 级别的日志，在服务上线时我们一定要禁止掉。否则，就可能会因为大量的日志导致硬盘空间快速用完，从而造成服务宕机，也可能会影响服务的性能和产品体验。&lt;br>Debug 这个级别的日志可以随意输出，任何你觉得有助于开发、测试阶段调试的日志，都可以在这个级别打印。&lt;/td>
&lt;td>无&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Info&lt;/td>
&lt;td>Info 级别的日志可以记录一些有用的信息，供以后的运营分析，所以 Info 级别的日志不是越多越好，也不是越少越好，应以满足需求为主要目标。一些关键日志，可以在 Info 级别记录，但如果日志量大、输出频度过高，则要考虑在 Debug 级别记录。&lt;br>现网的日志级别一般是 Info 级别，为了不使日志文件占满整个磁盘空间，在记录日志时，要注意避免产生过多的 Info 级别的日志。例如，在 for 循环中，就要慎用 Info 级别的日志。&lt;/td>
&lt;td>无&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Warn&lt;/td>
&lt;td>一些警告类的日志可以记录在 Warn 级别，Warn 级别的日志表示遇到了预期之内的错误，并且已经进行了处理，不会影响主要功能。像这些日志，就需要你关注起来。Warn 更多的是业务级别的警告日志。&lt;/td>
&lt;td>Lark&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Error&lt;/td>
&lt;td>Error 级别的日志告诉我们程序执行出错，这些错误肯定会影响到程序的执行结果，例如请求失败、创建资源失败等。要记录每一个发生错误的日志，避免日后排障过程中这些错误被忽略掉。大部分的错误可以归在 Error 级别&lt;/td>
&lt;td>Lark 转电话&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Panic&lt;/td>
&lt;td>Panic 级别的日志在实际开发中很少用，通常只在需要错误堆栈，或者不想因为发生严重错误导致程序退出，而采用 defer 处理错误时使用&lt;/td>
&lt;td>Lark + 电话&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Fatal&lt;/td>
&lt;td>Fatal 是最高级别的日志，这个级别的日志说明问题已经相当严重，严重到程序无法继续运行，通常是系统级的错误。在开发中也很少使用，除非我们觉得某个错误发生时，整个程序无法继续运行&lt;/td>
&lt;td>Lark + 电话&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>根据的日志规范 Panic、Fatal 级别的日志不需要打印，如果需要，可以使用Error 级别的日志 + os.Exit() 进行处理。&lt;/p>
&lt;p>通常， 为了能够及时发现问题并排障，在发生错误日志时，要告警通知到相关的研发或运维，上述表格，也针对不同的日志级别，给出了告警级别，供你参考。&lt;/p>
&lt;blockquote>
&lt;p>提示：Lark 指代飞书办公软件。&lt;/p>
&lt;/blockquote>
&lt;p>&lt;strong>日志级别选择图：&lt;/strong>
这里用一张图来总结下，如何选择 Debug、Info、Warn、Error、Panic、Fatal 这几种日志级别。&lt;/p>
&lt;p>&lt;img src="https://cdn.nlark.com/yuque/0/2024/png/43447143/1713257876347-befa94ca-2330-403c-8c8e-0e61eba99c35.png#averageHue=%23f0f0f0&amp;amp;clientId=u86c1e48d-415c-4&amp;amp;from=paste&amp;amp;id=ucd1808f5&amp;amp;originHeight=812&amp;amp;originWidth=1920&amp;amp;originalType=url&amp;amp;ratio=1.75&amp;amp;rotation=0&amp;amp;showTitle=true&amp;amp;status=done&amp;amp;style=none&amp;amp;taskId=uc89bb048-8134-40fd-9cbc-7c79f7ed8ec&amp;amp;title=%E6%97%A5%E5%BF%97%E7%BA%A7%E5%88%AB%E9%80%89%E6%8B%A9%E5%9B%BE"
loading="lazy"
alt="日志级别选择图"
>&lt;/p>
&lt;h2 id="日志打印时机">
&lt;a href="#%e6%97%a5%e5%bf%97%e6%89%93%e5%8d%b0%e6%97%b6%e6%9c%ba">#&lt;/a>
日志打印时机
&lt;/h2>&lt;p>在打印日志时，要选择合适的时机进行打印，不能随便打印。&lt;/p>
&lt;h3 id="建议打印时机">
&lt;a href="#%e5%bb%ba%e8%ae%ae%e6%89%93%e5%8d%b0%e6%97%b6%e6%9c%ba">#&lt;/a>
建议打印时机
&lt;/h3>&lt;p>日志主要是用来定位问题的，所以整体来说，我们要在有需要的地方打印日志。那么具体是哪些地方呢？我给你几个建议。&lt;/p>
&lt;ul>
&lt;li>打印程序的配置参数：系统在启动过程中通常会首先读启动参数，可以在系统启动后将这些参数输出到日志中，方便确认系统是按照期望的参数启动的；&lt;/li>
&lt;li>网络通信部分：发送请求前、收到请求结果均应打印 Info 级别的日志。根据我的研发经验，如果你的程序调用了第三方组件，在排障时，需要提供给第三方组件的研发/运维足够的上下文，帮助复现问题，才会得到他们及时有效的支持，所以这里建议在请求第三方接口时，至少要记录请求包、返回包、URL 等信息。注意，如果请求包和返回包很大，需谨慎打印；&lt;/li>
&lt;li>在分支语句处打印日志：在分支语句处打印日志，可以判断出代码走了哪个分支，有助于判断请求的下一跳，继而继续排查问题；&lt;/li>
&lt;li>写操作必须打印日志：写操作最可能会引起比较严重的业务故障，写操作打印日志，可以在出问题时找到关键信息；&lt;/li>
&lt;li>非预期执行时打印日志：如果程序走到了跟我们预期不一样的分支，需要打印日志。例如：正常情况下，服务的某个状态应该是 Running 的，但真实的状态是 Pending 的，这种异常的状态，很可能会带来问题，后期可能需要定位排障，这时候可以打印相关日志；&lt;/li>
&lt;li>后台定期执行的任务：如定期更新缓存的任务，可以记录任务开始时间，任务结束时间，更新了多少条缓存配置等等，这样可以掌握定期执行的任务的状态；&lt;/li>
&lt;li>业务流程关键节点：我们经常会面对流程比较复杂的业务流程，在整个流程的关键节点上，可以记录下日志，例如，当进行物品交换时，可以将要交换的物品打印出来；&lt;/li>
&lt;li>数据状态变化时：服务端程序的最核心的逻辑就是维护数据状态的变化，因此，在状态有变化的时候，可以记录下日志，例如，订单从创建状态变为已支付状态时，可以记录日志；&lt;/li>
&lt;li>在错误产生的最原始位置打印日志：对于嵌套的 Error，可在 Error 产生的最初位置打印 Error 日志，上层如果不需要添加必要的信息，可以直接返回下层的 Error。我给你举个例子：&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">package&lt;/span> &lt;span class="nx">main&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;flag&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;fmt&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;github.com/golang/glog&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">flag&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Parse&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">defer&lt;/span> &lt;span class="nx">glog&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Flush&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nf">loadConfig&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">glog&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">loadConfig&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="kt">error&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nf">decodeConfig&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="c1">// 直接返回
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">decodeConfig&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="kt">error&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nf">readConfig&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Errorf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;could not decode configuration data for user %s: %v&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;colin&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// 添加必要的信息，用户名称
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kc">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">readConfig&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="kt">error&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">glog&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Errorf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;read: end of input.&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Errorf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;read: end of input&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>通过在最初产生错误的位置打印日志，我们可以很方便地追踪到日志的根源，进而在上层追加一些必要的信息。这可以让我们了解到该错误产生的影响，有助于排障。另外，直接返回下层日志，还可以减少重复的日志打印。&lt;/p>
&lt;p>当代码调用第三方包的函数，且第三方包函数出错时，会打印错误信息。比如：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">os&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Chdir&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;/root&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">log&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Errorf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;change dir failed: %v&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="不建议打印时机">
&lt;a href="#%e4%b8%8d%e5%bb%ba%e8%ae%ae%e6%89%93%e5%8d%b0%e6%97%b6%e6%9c%ba">#&lt;/a>
不建议打印时机
&lt;/h3>&lt;p>当然，在记录日志时，也有有一些地方是不需要记录日志的，这些地方建议如下：&lt;/p>
&lt;ul>
&lt;li>在循环中打印日志要慎重：如果循环次数过多，会导致打印大量的日志，严重拖累代码的性能，建议的办法是在循环中记录要点，在循环外面总结打印出来；&lt;/li>
&lt;li>QPS 特别高的接口谨慎打印日志：对于 QPS 特别高的接口，要谨慎选择是否打印日志或者少打印日志，否则可能会影响接口的性能和 CPU 的负载。&lt;/li>
&lt;/ul>
&lt;h2 id="日志级别设置规范">
&lt;a href="#%e6%97%a5%e5%bf%97%e7%ba%a7%e5%88%ab%e8%ae%be%e7%bd%ae%e8%a7%84%e8%8c%83">#&lt;/a>
日志级别设置规范
&lt;/h2>&lt;ul>
&lt;li>项目刚刚上线可将日志级别设置为 Debug 级别：
&lt;ul>
&lt;li>&lt;a class="link" href="http://github.com/superproj/onex/pkg/log" target="_blank" rel="noopener"
>github.com/superproj/onex/pkg/logopen in new window&lt;/a> 设置 level 为 debug；&lt;/li>
&lt;li>&lt;a class="link" href="http://k8s.io/klog/v2" target="_blank" rel="noopener"
>k8s.io/klog/v2open in new window&lt;/a> 设置 -v 为 4。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>如果项目经过一段时间的运行，达到一种很稳定的状态，为了不影响性能，需要设置日志级别为 Info：
&lt;ul>
&lt;li>&lt;a class="link" href="http://github.com/superproj/onex/pkg/log" target="_blank" rel="noopener"
>github.com/superproj/onex/pkg/logopen in new window&lt;/a> 设置 level 为 info；&lt;/li>
&lt;li>&lt;a class="link" href="http://k8s.io/klog/v2" target="_blank" rel="noopener"
>k8s.io/klog/v2open in new window&lt;/a> 设置 -v 为 2。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>测试/开发环境可以设置日志级别为 Debug 级别：
&lt;ul>
&lt;li>&lt;a class="link" href="http://github.com/superproj/onex/pkg/log" target="_blank" rel="noopener"
>github.com/superproj/onex/pkg/logopen in new window&lt;/a> 设置 level 为 debug；&lt;/li>
&lt;li>&lt;a class="link" href="http://k8s.io/klog/v2" target="_blank" rel="noopener"
>k8s.io/klog/v2open in new window&lt;/a> 设置 -v 为 4。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="日志格式设置规范">
&lt;a href="#%e6%97%a5%e5%bf%97%e6%a0%bc%e5%bc%8f%e8%ae%be%e7%bd%ae%e8%a7%84%e8%8c%83">#&lt;/a>
日志格式设置规范
&lt;/h2>&lt;ul>
&lt;li>线上日志为了便于日志采集工具采集，需要设置为 JSON 格式；&lt;/li>
&lt;li>开发、测试环境的日志，可以根据需要设置为TEXT 或 JSON 格式。&lt;/li>
&lt;/ul>
&lt;h2 id="日志打印检查">
&lt;a href="#%e6%97%a5%e5%bf%97%e6%89%93%e5%8d%b0%e6%a3%80%e6%9f%a5">#&lt;/a>
日志打印检查
&lt;/h2>&lt;p>Kubernetes 提供了 &lt;a class="link" href="https://github.com/kubernetes-sigs/logtools/tree/main/logcheck" target="_blank" rel="noopener"
>logcheckopen in new window&lt;/a> 工具，来检查 Kubernetes 中的日志记录是否符合规范。你也可以安装，并检查，命令如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="line">&lt;span class="cl">$ go install sigs.k8s.io/logtools/logcheck@latest
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ logcheck -check-contextual ${ONEX_ROOT}/...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ logcheck -check-structured ${ONEX_ROOT}/...
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>${ONEX_ROOT}为根目录，你可以根据需要修改检查目录。&lt;/p>
&lt;blockquote>
&lt;p>提示：logcheck工具建议可以了解下，真正的项目开发中，并不实用，尤其不适合集成在 CI 流程中，作为项目发布的强制规范检查。因为很多代码确实难以，也不需要完全遵循logcheck工具制定的规范。&lt;/p>
&lt;/blockquote>
&lt;h2 id="其他日志规范参考">
&lt;a href="#%e5%85%b6%e4%bb%96%e6%97%a5%e5%bf%97%e8%a7%84%e8%8c%83%e5%8f%82%e8%80%83">#&lt;/a>
其他日志规范参考
&lt;/h2>&lt;ul>
&lt;li>Kubernetes 日志记录规范：&lt;a class="link" href="https://github.com/kubernetes/community/blob/master/contributors/devel/sig-instrumentation/logging.md#what-method-to-use" target="_blank" rel="noopener"
>Loggingopen in new window&lt;/a>；&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/kubernetes/community/blob/master/contributors/devel/sig-instrumentation/migration-to-structured-logging.md" target="_blank" rel="noopener"
>Structured and Contextual Logging migration instructions&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>探秘 分布式一致性（共识）算法 ：Raft</title><link>https://xiuwei.github.io/p/exploring-distributed-consistency-algorithm-raft/</link><pubDate>Mon, 25 Mar 2024 21:00:00 +0000</pubDate><guid>https://xiuwei.github.io/p/exploring-distributed-consistency-algorithm-raft/</guid><description>&lt;img src="https://xiuwei.github.io/p/exploring-distributed-consistency-algorithm-raft/cover.jpg" alt="Featured image of post 探秘 分布式一致性（共识）算法 ：Raft" />&lt;h2 id="前言">
&lt;a href="#%e5%89%8d%e8%a8%80">#&lt;/a>
前言
&lt;/h2>&lt;p>Raft 算法是 Multi-Paxos 算法的一种，是一种强一致性算法。核心就是通过日志复制的方式达到整个集群的副本一致。&lt;/p>
&lt;p>Raft 算法的三个核心概念就是 Leader 的选举、日志复制、节点变更。本文也将从这三个方面进行探讨。之后再聊聊 Raft 算法的几个应用场景。&lt;/p>
&lt;h2 id="原理">
&lt;a href="#%e5%8e%9f%e7%90%86">#&lt;/a>
原理
&lt;/h2>&lt;p>下面，我们就看看 Raft 算法的一些细节和流程。&lt;/p>
&lt;h3 id="leader-选举">
&lt;a href="#leader-%e9%80%89%e4%b8%be">#&lt;/a>
Leader 选举
&lt;/h3>&lt;p>Raft 算法中实现一致性的方法很简单：一切听领导的。分布式的环境下节点众多，达成一致最简单粗暴的方法不就是听一个节点的么。&lt;/p>
&lt;h4 id="角色变换">
&lt;a href="#%e8%a7%92%e8%89%b2%e5%8f%98%e6%8d%a2">#&lt;/a>
角色变换
&lt;/h4>&lt;p>Raft 算法中的每个节点都在三种角色之间变换着（一个时间点中一个节点只有一种角色）：Leader（领导者）、Candidate（候选者）、Follower（追随者）。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>领导者&lt;/strong>，整个集群的核心，其他的节点都追随这个领导者来复制日志内容。领导者主要负责客户端的写请求的处理、发送心跳（告诉其他节点我还活着，没有异常，请不要随便发起选举）、整理日志。&lt;/li>
&lt;li>&lt;strong>候选者&lt;/strong>，当领导者节点出现异常（比如长时间没有收到领导者的心跳消息），这时候集群中的其他节点就会把自己的节点角色转为候选者，然后拉选票。最终根据选票数量决定是否成为领导者。&lt;/li>
&lt;li>&lt;strong>追随者&lt;/strong>，领导者的小迷弟，永远追随着领导者（也有可能变成候选者或者领导者），主要负责从领导者那里复制日志。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://xiuwei.github.io/p/exploring-distributed-consistency-algorithm-raft/image.png"
width="900"
height="310"
srcset="https://xiuwei.github.io/p/exploring-distributed-consistency-algorithm-raft/image_hu2d375501564175190ec33b8bcacaa6c7_19912_480x0_resize_box_3.png 480w, https://xiuwei.github.io/p/exploring-distributed-consistency-algorithm-raft/image_hu2d375501564175190ec33b8bcacaa6c7_19912_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="角色示意图"
class="gallery-image"
data-flex-grow="290"
data-flex-basis="696px"
>&lt;/p>
&lt;p>在了解选举过程之前，先介绍几个概念：任期编号、随机超时时间&lt;/p>
&lt;h4 id="任期编号">
&lt;a href="#%e4%bb%bb%e6%9c%9f%e7%bc%96%e5%8f%b7">#&lt;/a>
任期编号
&lt;/h4>&lt;p>所谓的任期编号就是一个数字而已，每个领导者在任期期间都有一个编号，所有的追随者都以这个编号为准。这个任期在整个选举的过程中起到了至关重要的作用：&lt;/p>
&lt;ul>
&lt;li>当某个节点长时间没收到领导者的消息，会把自己的任期+1，并且变成候选者&lt;/li>
&lt;li>如果某个节点发现自己的任期编号比其他节点的小，那么会将自己的任期编号提高到编号大的那个值&lt;/li>
&lt;li>如果某个节点发现自己的任期编号比其他节点的大，会丢弃这条消息&lt;/li>
&lt;/ul>
&lt;h4 id="随机超时时间">
&lt;a href="#%e9%9a%8f%e6%9c%ba%e8%b6%85%e6%97%b6%e6%97%b6%e9%97%b4">#&lt;/a>
随机超时时间
&lt;/h4>&lt;p>追随者有个特点：当长时间收不到领导者的消息就变成候选者然后去拉选票。那么这个长时间指的是多长时间？Raft 算法里的这个长时间是随机的一个时间，每个节点都不同且随机。&lt;/p>
&lt;p>为什么超时时间是随机的呢？如果每个节点超时时间相同，那么有可能同时发起选票，那就有可能选不出最终的领导者，导致算法无法进行。&lt;/p>
&lt;h4 id="选举过程">
&lt;a href="#%e9%80%89%e4%b8%be%e8%bf%87%e7%a8%8b">#&lt;/a>
选举过程
&lt;/h4>&lt;p>现在描述下 Raft 算法里的选举过程，假设集群里有三个节点：A、B、C&lt;/p>
&lt;ul>
&lt;li>首先，起始状态下，集群中所有的节点都是追随者，但是 A 节点的超时时间（与领导者断联系的时间）短，所以A节点先别人一步，把自己变成候选者&lt;/li>
&lt;li>A 成为候选者后，把任期编号+1，然后投自己一票。接着再发消息给B、C 用来拉选票&lt;/li>
&lt;li>B、C 收到来自 A 的拉选票的消息后，检查下自己在 A 的任期编号下是否投票过、检查下这个任期编号是否合适，如果都满足条件，就把票投给- A，然后把自己的任期编号更新为 A 发过来的任期编号。&lt;/li>
&lt;li>当 A 收到来自节点其他大多数节点的选票后，A 就会成为领导者。处理客户端的写请求、发心跳消息给追随者（防止追随者选举成为领导者）&lt;/li>
&lt;/ul>
&lt;p>选举的过程有几点注意：&lt;/p>
&lt;ul>
&lt;li>一个任期内，除非这个领导者自己出现网络延迟等异常，否则会一直领导下去&lt;/li>
&lt;li>如果追随者收到多个节点的拉选票的消息，采取先到先得的方式&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>除了以上的精简过程描述，raft 社区还提供了完整共识过程的可视化展示，这里可以通过&lt;a class="link" href="http://thesecretlivesofdata.com/raft/" target="_blank" rel="noopener"
>原理动画&lt;/a>展示选举过程。 &lt;a class="link" href="http://thesecretlivesofdata.com/raft/" target="_blank" rel="noopener"
>http://thesecretlivesofdata.com/raft/&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;h3 id="日志复制">
&lt;a href="#%e6%97%a5%e5%bf%97%e5%a4%8d%e5%88%b6">#&lt;/a>
日志复制
&lt;/h3>&lt;p>Raft 算法选举出领导者之后就能对外提供服务了。领导者接受客户端的写请求，然后记录日志、把日志更新给其他节点，最终整个集群达成一致。&lt;/p>
&lt;p>这里的日志跟 MySQL 底层的那些个实现事物的各种 log 在原理和作用上是类似的。Raft 的日志是由日志项组成，每个日志项包含了一些指令信息、任期编号、索引值等内容。领导者的日志项式最全的（当然啦，因为所有人都听领导者的嘛）且索引值是按照一定的顺序排起来的，这样方便让其他节点查漏补缺。&lt;/p>
&lt;h4 id="日志复制过程">
&lt;a href="#%e6%97%a5%e5%bf%97%e5%a4%8d%e5%88%b6%e8%bf%87%e7%a8%8b">#&lt;/a>
日志复制过程
&lt;/h4>&lt;p>那来自客户端的写请求是怎么个处理流程呢？大体如下：&lt;/p>
&lt;ul>
&lt;li>第一步，领导者先处理写请求，创建新的日志项，写到领导者的本地日志中&lt;/li>
&lt;li>第二步，领导者发送这条日志项给其他节点&lt;/li>
&lt;li>第三步，当领导者收到大多数节点的回复（比如，其他节点说我已经收到新的日志项了），领导者将自己的状态机（可以理解为最终达成一致的那个状态数据库）更新一下，更新成把新的日志项加入后的最新状态。&lt;/li>
&lt;li>第四步，领导者返还给客户端：你的写请求已经成功被我方执行，请放心。&lt;/li>
&lt;li>第五步，领导者发在后续的心跳中告诉其他节点：你们可以更新自己的状态机为我现在的状态机的状态了。&lt;/li>
&lt;/ul>
&lt;p>非常类似两阶段提交方式的分布式事务……只不过做了点优化&lt;/p>
&lt;h4 id="一致性的保障">
&lt;a href="#%e4%b8%80%e8%87%b4%e6%80%a7%e7%9a%84%e4%bf%9d%e9%9a%9c">#&lt;/a>
一致性的保障
&lt;/h4>&lt;p>上面的流程是正常的情况，如果发生非正常的情况，Raft 怎么保证其一致性？其实也挺简单粗暴：强制让追随者的日志项都与领导者一致，并且领导者的日志项永远不会被覆盖或者删除。具体怎么强制让追随者与领导者一致的呢？也很简单：发消息。&lt;/p>
&lt;ul>
&lt;li>领导者有了最新的日志项，不是要发消息给追随者吗？这条消息里包含了领导者的前一条日志项的一些信息。&lt;/li>
&lt;li>追随者收到消息后，检查下这条消息中的前一条日志项的信息是否与自己最新的日志项一致，如果一致，就追加这条最新的日志项到末尾。如果发现不一致，发送失败的消息给领导者。&lt;/li>
&lt;li>领导者收到来自追随者失败的消息后，将前一条日志项打包成消息，这条消息包含了前前条日志项的信息。&lt;/li>
&lt;li>追随者再次检查消息，跟第二步的检查机制一样，循环往复，直到找到与领导者相同的那条日志项为止。&lt;/li>
&lt;/ul>
&lt;p>总结下就是：领导者不停的通过消息与追随者确认两者之间最后一次一致的日志项在哪里，找到这条相同的日志项后，追随者直接强制把与领导者不同的日志项覆盖成领导者的日志项。当然，如果追随者落后的较多，这么一步步的往回走是很低效的，这种情况下领导者可以阶段性发送 snapshots，一次性把落后的节点的日志迅速的追回到某个 snapshots。&lt;/p>
&lt;h3 id="节点变更">
&lt;a href="#%e8%8a%82%e7%82%b9%e5%8f%98%e6%9b%b4">#&lt;/a>
节点变更
&lt;/h3>&lt;p>这里我们继续探讨 Raft 算法中如何保持节点变更后领导者的一致性。领导者网络异常等可以从其他追随者重新选举来保持集群稳定。那如果集群中加入一个或者多个节点后，是否会导致集群不一致呢？如果操作不当，是会的。&lt;/p>
&lt;p>想象这种情况，A、B、C三个节点，A 是领导者，B、C 是追随者，但是 C 是日志项的异常节点。如果这时候突然加了两台机器：D、E，好巧不巧的是 C、D、E 成为了一个新的小集群，然后 C 成为了领导，那就麻烦了。&lt;/p>
&lt;p>如何解决上述的麻烦？也很简单粗暴：加机器的时候一台一台的加就行了。同样的，如果缩减机器也是一台一台的减少。&lt;/p>
&lt;h2 id="关于-raft-的思考">
&lt;a href="#%e5%85%b3%e4%ba%8e-raft-%e7%9a%84%e6%80%9d%e8%80%83">#&lt;/a>
关于 Raft 的思考
&lt;/h2>&lt;p>任何算法、技术都在解决问题的同时带来了其他的问题。Raft 也一样，这里笔者总结下其弊端。&lt;/p>
&lt;ul>
&lt;li>Raft 算法依赖于一个领导者（Leader）节点来协调集群中的其他节点。这意味着领导者节点可能会成为一个性能瓶颈，特别是在处理大量读写请求的情况下。为了解决这个问题，可以采用一些优化策略，如领导者复制和负载均衡。&lt;/li>
&lt;li>Raft 算法依赖于集群中大多数节点的响应来达成一致。当集群规模增加时，需要更多的节点来达成一致，这可能导致更高的通信成本和更长的延迟。因此，Raft 算法在大规模分布式系统中的扩展性可能受到限制。&lt;/li>
&lt;li>在某些情况下，Raft 算法可能需要几个网络往返才能达到一致性。这会导致一定程度的一致性延迟。对于对实时性要求较高的应用，这种延迟可能会成为一个问题。&lt;/li>
&lt;/ul>
&lt;h2 id="参考文献">
&lt;a href="#%e5%8f%82%e8%80%83%e6%96%87%e7%8c%ae">#&lt;/a>
参考文献
&lt;/h2>&lt;p>&lt;a class="link" href="https://raft.github.io/raft.pdf" target="_blank" rel="noopener"
>In Search of an Understandable Consensus Algorithm&lt;/a>
&lt;a class="link" href="https://www.scylladb.com/glossary/raft-consensus-algorithm/" target="_blank" rel="noopener"
>Raft Consensus Algorithm Definition&lt;/a>&lt;/p></description></item><item><title>IntelliJ IDEA Ultimate 2024 激活（适用全家桶）</title><link>https://xiuwei.github.io/p/jetbrains-ide-activated/</link><pubDate>Fri, 22 Mar 2024 21:00:00 +0000</pubDate><guid>https://xiuwei.github.io/p/jetbrains-ide-activated/</guid><description>&lt;img src="https://xiuwei.github.io/p/jetbrains-ide-activated/cover.png" alt="Featured image of post IntelliJ IDEA Ultimate 2024 激活（适用全家桶）" />&lt;h2 id="0-前言">
&lt;a href="#0-%e5%89%8d%e8%a8%80">#&lt;/a>
0. 前言
&lt;/h2>&lt;p>JetBrains 的产品提供了强大的功能、良好的用户体验、强大的社区支持、跨平台支持以及灵活的许可模式，能够满足开发者在软件开发过程中的各种需求，受到广大开发者的欢迎。&lt;/p>
&lt;p>同时，JetBrains 的产品力尽管非常出色但因为价格昂贵，很多个人开发者都负担不起。如果您又想使用 IntelliJ IDEA Ultimate Edition（专业版），可以参考下面这种方式进行免费激活。&lt;/p>
&lt;blockquote>
&lt;p>注意：本文提供方法来自网络，仅供测试使用，请勿用于商业用途，如果喜欢JetBrains的产品，请支持正版！&lt;/p>
&lt;/blockquote>
&lt;h2 id="1-下载安装">
&lt;a href="#1-%e4%b8%8b%e8%bd%bd%e5%ae%89%e8%a3%85">#&lt;/a>
1. 下载安装
&lt;/h2>&lt;p>访问 &lt;a class="link" href="https://www.jetbrains.com/zh-cn/idea/download" target="_blank" rel="noopener"
>JetBrains IDEA 下载页面&lt;/a> 下载合适的版本并完成安装。&lt;/p>
&lt;p>安装完成后，请运行一次软件，进入到 &lt;em>激活/试用&lt;/em> 界面后即可关闭软件。&lt;/p>
&lt;h2 id="2-激活">
&lt;a href="#2-%e6%bf%80%e6%b4%bb">#&lt;/a>
2. 激活
&lt;/h2>&lt;p>激活工具&lt;code>ja-netfilter&lt;/code>最初是zhile大神开发并发布于网络，后续并由热心大佬加工加工，打包成半自动化的激活工具&lt;code>ja-netfilter-all&lt;/code>发布，很大程度上降低了使用门槛。&lt;/p>
&lt;blockquote>
&lt;p>注意：下面的下载链接如已失效，请访问 &lt;a class="link" href="https://jetbra.in/s" target="_blank" rel="noopener"
>https://jetbra.in/s&lt;/a> 页面扫描并获取最新的地址&lt;/p>
&lt;/blockquote>
&lt;h3 id="21-下载并安装激活包">
&lt;a href="#21-%e4%b8%8b%e8%bd%bd%e5%b9%b6%e5%ae%89%e8%a3%85%e6%bf%80%e6%b4%bb%e5%8c%85">#&lt;/a>
2.1 下载并安装“激活包”
&lt;/h3>&lt;p>首先，&lt;a class="link" href="https://cloudflare-ipfs.com/ipfs/bafybeiawsvnhqx5o2aqa37pvq7brlk7vqj2cpty3b5xac655bxbpqbpkq4/files/jetbra-ded4f9dc4fcb60294b21669dafa90330f2713ce4.zip" target="_blank" rel="noopener"
>下载激活包&lt;/a>，下载后解压到自己预期的目录下（避免误删，此激活包在激活后仍然有用处），内容如下：&lt;/p>
&lt;p>&lt;img src="https://xiuwei.github.io/p/jetbrains-ide-activated/images/index/1718698642185.png"
width="2698"
height="842"
srcset="https://xiuwei.github.io/p/jetbrains-ide-activated/images/index/1718698642185_hu06d6dda3368ef58b190bc7976e75111a_163627_480x0_resize_box_3.png 480w, https://xiuwei.github.io/p/jetbrains-ide-activated/images/index/1718698642185_hu06d6dda3368ef58b190bc7976e75111a_163627_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="320"
data-flex-basis="769px"
>&lt;/p>
&lt;p>&lt;img src="https://xiuwei.github.io/p/jetbrains-ide-activated/image.png"
width="1838"
height="862"
srcset="https://xiuwei.github.io/p/jetbrains-ide-activated/image_hu88b5f89d86124daf54b28e2b0371d8fd_245780_480x0_resize_box_3.png 480w, https://xiuwei.github.io/p/jetbrains-ide-activated/image_hu88b5f89d86124daf54b28e2b0371d8fd_245780_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="213"
data-flex-basis="511px"
>&lt;/p>
&lt;p>然后进入scripts目录，目录里面是安装脚本&lt;/p>
&lt;p>&lt;img src="https://xiuwei.github.io/p/jetbrains-ide-activated/image-1.png"
width="1840"
height="872"
srcset="https://xiuwei.github.io/p/jetbrains-ide-activated/image-1_hue2220a8c1cf69bf2e040b7055f60c486_223293_480x0_resize_box_3.png 480w, https://xiuwei.github.io/p/jetbrains-ide-activated/image-1_hue2220a8c1cf69bf2e040b7055f60c486_223293_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="211"
data-flex-basis="506px"
>&lt;/p>
&lt;ul>
&lt;li>install.sh 用于Linux或者MacOS系统激活IntelliJ IDEA&lt;/li>
&lt;li>install-all-users.vbs 用于Windows系统针对所有windows用户激活IntelliJ IDEA&lt;/li>
&lt;li>install-current-user.vbs 用于Windows系统针对当前windows系统用户激活IntelliJ IDEA&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>un开头的文件分别对应上面的卸载脚本。&lt;/p>
&lt;/blockquote>
&lt;p>根据自己的操作系统情况，选择对应的脚本执行即可完成激活包的安装。&lt;/p>
&lt;h3 id="22-获取并使用激活码">
&lt;a href="#22-%e8%8e%b7%e5%8f%96%e5%b9%b6%e4%bd%bf%e7%94%a8%e6%bf%80%e6%b4%bb%e7%a0%81">#&lt;/a>
2.2 获取并使用激活码
&lt;/h3>&lt;p>首先，&lt;a class="link" href="https://cloudflare-ipfs.com/ipfs/bafybeiawsvnhqx5o2aqa37pvq7brlk7vqj2cpty3b5xac655bxbpqbpkq4/" target="_blank" rel="noopener"
>访问激活码发布站点&lt;/a>，选择对应的产品并点击复制激活码到剪切板。&lt;/p>
&lt;p>&lt;img src="https://xiuwei.github.io/p/jetbrains-ide-activated/image-2.png"
width="2712"
height="1294"
srcset="https://xiuwei.github.io/p/jetbrains-ide-activated/image-2_hu0a38edbc385769552ac847204ee44cd8_225929_480x0_resize_box_3.png 480w, https://xiuwei.github.io/p/jetbrains-ide-activated/image-2_hu0a38edbc385769552ac847204ee44cd8_225929_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="209"
data-flex-basis="502px"
>&lt;/p>
&lt;p>然后，打开IntelliJ IDEA，点击 &amp;ldquo;Configure&amp;rdquo; -&amp;gt; &amp;ldquo;Manage License&amp;rdquo;。&lt;/p>
&lt;p>选择 &amp;ldquo;Activation Code&amp;rdquo; 并粘贴刚刚复制的激活码。&lt;/p>
&lt;p>&lt;img src="https://xiuwei.github.io/p/jetbrains-ide-activated/image-3.png"
width="1610"
height="1080"
srcset="https://xiuwei.github.io/p/jetbrains-ide-activated/image-3_hud280eb3b999b09772ba4a9cb9d3bf4af_354908_480x0_resize_box_3.png 480w, https://xiuwei.github.io/p/jetbrains-ide-activated/image-3_hud280eb3b999b09772ba4a9cb9d3bf4af_354908_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="149"
data-flex-basis="357px"
>&lt;/p>
&lt;p>点击左下角的的“Activate”按钮即可激活，激活信息如下：&lt;/p>
&lt;p>&lt;img src="https://xiuwei.github.io/p/jetbrains-ide-activated/image-4.png"
width="1664"
height="1324"
srcset="https://xiuwei.github.io/p/jetbrains-ide-activated/image-4_hu4f5030148a9b1185c884857e1e455f93_291056_480x0_resize_box_3.png 480w, https://xiuwei.github.io/p/jetbrains-ide-activated/image-4_hu4f5030148a9b1185c884857e1e455f93_291056_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="125"
data-flex-basis="301px"
>&lt;/p>
&lt;p>到此，激活就已经完成了。&lt;/p></description></item><item><title>探秘 Gossip 协议：从节点交流到信息扩散</title><link>https://xiuwei.github.io/p/exploring-the-gossip-protocol/</link><pubDate>Fri, 15 Mar 2024 21:00:00 +0000</pubDate><guid>https://xiuwei.github.io/p/exploring-the-gossip-protocol/</guid><description>&lt;img src="https://xiuwei.github.io/p/exploring-the-gossip-protocol/cover.jpg" alt="Featured image of post 探秘 Gossip 协议：从节点交流到信息扩散" />&lt;h2 id="引言">
&lt;a href="#%e5%bc%95%e8%a8%80">#&lt;/a>
引言
&lt;/h2>&lt;p>在分布式系统中，节点之间的信息传播是至关重要的。Gossip 协议作为一种简单而有效的分布式信息传播协议，被广泛应用于各种分布式系统中。本文将带领读者从零开始，通过具体的场景和例子，深入探讨 Gossip 协议的工作原理和应用场景。&lt;/p>
&lt;h3 id="基本概念">
&lt;a href="#%e5%9f%ba%e6%9c%ac%e6%a6%82%e5%bf%b5">#&lt;/a>
基本概念
&lt;/h3>&lt;p>Gossip，单词本身就是流言、八卦的意思。正如名字一样，Gossip 协议也被称为“流言协议”。它是一种分布式算法，用于在节点之间传递信息。在 Gossip 协议中，每个节点都可以将信息广播给它所知道的其他节点，这些节点又将该信息广播给它们所知道的其他节点，以此类推，直到整个网络都知道了这个信息。这种广播方式可以保证整个网络中的所有节点都能够及时地了解到最新的信息，并确保整个网络的一致性。&lt;/p>
&lt;h3 id="背景与意义">
&lt;a href="#%e8%83%8c%e6%99%af%e4%b8%8e%e6%84%8f%e4%b9%89">#&lt;/a>
背景与意义
&lt;/h3>&lt;p>关于这个协议的详细论文可查看参考文献一。Gossip 协议通常用于分布式系统中，例如 P2P 网络、分布式数据库、分布式文件系统等。在比特币网络中，也使用了 Gossip 协议来广播新的交易和块。Cassandra 使用的数据复制协议也是 Gossip 算法。还有 Akka、Redis Cluster 都有用到。&lt;/p>
&lt;p>这个算法的最终目的还是一个：达到集群中所有节点的数据一致。只不过这是最终一致性。&lt;/p>
&lt;h2 id="gossip-协议的基本原理">
&lt;a href="#gossip-%e5%8d%8f%e8%ae%ae%e7%9a%84%e5%9f%ba%e6%9c%ac%e5%8e%9f%e7%90%86">#&lt;/a>
Gossip 协议的基本原理
&lt;/h2>&lt;p>这个协议看似简单，实则很复杂。一个一传十、十传百的工作方式真正在分布式的环境下应用起来不是那么容易的。下面我们探讨下其实现细节。&lt;/p>
&lt;p>理解这个协议可以从三个维度：通信方式、协调机制、传播过程。&lt;/p>
&lt;h3 id="通信方式">
&lt;a href="#%e9%80%9a%e4%bf%a1%e6%96%b9%e5%bc%8f">#&lt;/a>
通信方式
&lt;/h3>&lt;p>这里所谓的通信方式就是集群中的节点如何建立通信。协议里支持三种：pull、push、push-pull。&lt;/p>
&lt;h4 id="push-模式">
&lt;a href="#push-%e6%a8%a1%e5%bc%8f">#&lt;/a>
push 模式
&lt;/h4>&lt;p>节点 A 将数据 (key,value,version) 及对应的版本号推送给 B 节点，B 节点更新A中比自己新的数据&lt;/p>
&lt;p>&lt;img src="https://xiuwei.github.io/p/exploring-the-gossip-protocol/image-1.png"
width="762"
height="150"
srcset="https://xiuwei.github.io/p/exploring-the-gossip-protocol/image-1_hu80bdea9f2e17428598a82c2794d3271a_80914_480x0_resize_box_3.png 480w, https://xiuwei.github.io/p/exploring-the-gossip-protocol/image-1_hu80bdea9f2e17428598a82c2794d3271a_80914_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="508"
data-flex-basis="1219px"
>&lt;/p>
&lt;p>在推模式中，当一个节点（源节点）需要传播信息时，它会在每个 Gossip 周期（把两个节点数据同步一次定义算作是一个周期）主动将自己的本地数据发送给随机选择的目标节点。目标节点收到信息后，将根据接收到的数据更新自己的本地数据存储。&lt;/p>
&lt;p>推模式的优势在于，信息能够迅速传播到其他节点。但是，它也可能导致节点之间的通信开销较大，因为每个节点在每个周期内都会主动发送信息，即使目标节点可能已经拥有了这些信息。&lt;/p>
&lt;h4 id="pull-模式">
&lt;a href="#pull-%e6%a8%a1%e5%bc%8f">#&lt;/a>
pull 模式
&lt;/h4>&lt;p>节点 A 仅将数据 key, version 推送给 B ，注意没有value哦， A 推送给 B 时，B 将本地比 A 新的数据（Key, value, version）推送给 A，A 更新本地，这一步相当于A在主动拉取 B 的值。&lt;/p>
&lt;p>&lt;img src="https://xiuwei.github.io/p/exploring-the-gossip-protocol/image-2.png"
width="1121"
height="364"
srcset="https://xiuwei.github.io/p/exploring-the-gossip-protocol/image-2_hu5b5e2d1aa69610bbea27985c83334705_157433_480x0_resize_box_3.png 480w, https://xiuwei.github.io/p/exploring-the-gossip-protocol/image-2_hu5b5e2d1aa69610bbea27985c83334705_157433_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="alt text"
class="gallery-image"
data-flex-grow="307"
data-flex-basis="739px"
>&lt;/p>
&lt;p>在拉模式中，节点不会主动发送信息。相反，它们会在每个 Gossip 周期主动向随机选择的目标节点请求数据。目标节点收到请求后，将自己的本地数据发送给请求节点。请求节点收到数据后，将根据接收到的数据更新自己的本地数据存储。&lt;/p>
&lt;p>拉模式的优势在于，通信开销相对较小，因为节点只在需要时才会请求数据。然而，拉模式可能导致信息传播速度较慢，尤其是在节点数量较多的情况下。&lt;/p>
&lt;h4 id="push-pull-模式">
&lt;a href="#push-pull-%e6%a8%a1%e5%bc%8f">#&lt;/a>
push-pull 模式
&lt;/h4>&lt;p>与 Pull 类似，只是多了一步，A 再将本地比B新的数据推送给 B，B 再更新本地。&lt;/p>
&lt;p>&lt;img src="https://xiuwei.github.io/p/exploring-the-gossip-protocol/image-3.png"
width="727"
height="240"
srcset="https://xiuwei.github.io/p/exploring-the-gossip-protocol/image-3_hubef17dfc6ca53ea1343e17d70fc95962_102397_480x0_resize_box_3.png 480w, https://xiuwei.github.io/p/exploring-the-gossip-protocol/image-3_hubef17dfc6ca53ea1343e17d70fc95962_102397_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="alt text"
class="gallery-image"
data-flex-grow="302"
data-flex-basis="727px"
>&lt;/p>
&lt;p>推拉模式结合了推模式和拉模式的优势，既能保证信息的快速传播，又能减小通信开销。在推拉模式中，当一个节点（源节点）需要传播信息时，它会在每个Gossip周期主动将自己的本地数据发送给随机选择的目标节点（推），同时也向目标节点请求数据（拉）。目标节点收到信息后，将根据接收到的数据更新自己的本地数据存储，并将自己的数据发送回源节点。&lt;/p>
&lt;p>推拉模式的优势在于，它可以在保证信息传播速度的同时，降低通信开销。这种模式在大规模分布式系统中尤为突出。&lt;/p>
&lt;h3 id="传播策略">
&lt;a href="#%e4%bc%a0%e6%92%ad%e7%ad%96%e7%95%a5">#&lt;/a>
传播策略
&lt;/h3>&lt;p>了解完通信方式，再来聊聊传播策略，也就是所谓的如何实现最终的一致性。主要有两种：Anti-Entropy(反熵传播)和Rumor-Mongering(谣言传播)。&lt;/p>
&lt;h4 id="anti-entropy反熵传播">
&lt;a href="#anti-entropy%e5%8f%8d%e7%86%b5%e4%bc%a0%e6%92%ad">#&lt;/a>
Anti-Entropy(反熵传播)
&lt;/h4>&lt;p>Anti-Entropy 策略通过在节点之间交换数据的摘要来实现信息传播。在每个Gossip 周期内，节点会向随机选择的目标节点发送其本地数据的摘要。目标节点收到摘要后，会比较自己的本地数据和收到的摘要，找出不一致之处。然后，目标节点会向源节点请求缺失或过时的数据。通过这种方式，节点之间的数据最终将达到一致。Anti-Entropy 策略在通信开销和传播速度之间实现了一种平衡，适用于大规模分布式系统。&lt;/p>
&lt;p>这种方式工作量大，一般用于新节点加入时同步更新数据的时候用得到。&lt;/p>
&lt;ul>
&lt;li>适用场景：执行反熵时，相关的节点都是已知的，而且节点数量不能太多，如果是一个动态变化或节点数比较多的分布式环境（比如在 DevOps 环境中检测节点故障，并动态维护集群节点状态），这时反熵就不适用了。&lt;/li>
&lt;li>缺点：消息数量非常庞大，且无限制；通常只用于新加入节点的数据初始化。可以通过引入校验和（Checksum）等机制，降低需要对比的数据量和通讯消息等。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://xiuwei.github.io/p/exploring-the-gossip-protocol/image-4.png"
width="1098"
height="382"
srcset="https://xiuwei.github.io/p/exploring-the-gossip-protocol/image-4_hu7d2b9098776a99c46c1d076f40d1026c_197930_480x0_resize_box_3.png 480w, https://xiuwei.github.io/p/exploring-the-gossip-protocol/image-4_hu7d2b9098776a99c46c1d076f40d1026c_197930_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Anti-Entropy(反熵传播)"
class="gallery-image"
data-flex-grow="287"
data-flex-basis="689px"
>&lt;/p>
&lt;h4 id="rumor-mongering谣言传播">
&lt;a href="#rumor-mongering%e8%b0%a3%e8%a8%80%e4%bc%a0%e6%92%ad">#&lt;/a>
Rumor-Mongering(谣言传播)
&lt;/h4>&lt;p>Rumor Mongering策略又称为传闻传播策略，它是一种概率论驱动的信息传播方法。在这种策略中，每个节点会在每个Gossip周期内随机选择一个或多个目标节点，并将信息发送给这些目标节点。当目标节点收到信息后，它们也会继续随机选择其他节点并将信息传播出去。这个过程会持续进行，直到信息在整个系统中被广泛传播。Rumor Mongering策略的优点是具有较低的通信开销和较高的可扩展性，但传播速度可能较慢。&lt;/p>
&lt;p>这种方式工作量小，一般用于节点间数据增量的同步。&lt;/p>
&lt;ul>
&lt;li>适用场景：适合动态变化的分布式系统。&lt;/li>
&lt;li>缺点：系统有一定的概率会不一致，通常用于节点间数据增量同步。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://xiuwei.github.io/p/exploring-the-gossip-protocol/image-5.png"
width="1098"
height="703"
srcset="https://xiuwei.github.io/p/exploring-the-gossip-protocol/image-5_hu31ff4c4a99d3e5ad093a6f2ec21f663c_136383_480x0_resize_box_3.png 480w, https://xiuwei.github.io/p/exploring-the-gossip-protocol/image-5_hu31ff4c4a99d3e5ad093a6f2ec21f663c_136383_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Rumor-Mongering(谣言传播)"
class="gallery-image"
data-flex-grow="156"
data-flex-basis="374px"
>&lt;/p>
&lt;h3 id="工作过程">
&lt;a href="#%e5%b7%a5%e4%bd%9c%e8%bf%87%e7%a8%8b">#&lt;/a>
工作过程
&lt;/h3>&lt;p>Gossip 协议的工作流程可以简化描述为几个过程：&lt;/p>
&lt;ul>
&lt;li>种子节点在 Gossip 周期内散播消息&lt;/li>
&lt;li>被感染节点随机选择N个邻接节点散播消息&lt;/li>
&lt;li>每次散播消息都选择尚未发送过的节点进行散播&lt;/li>
&lt;/ul>
&lt;p>这个协议是建立在一定概率的情况下进行的，因为并不是所有节点都时时的能拿到数据，所以这个协议是一种最终一致性算法。&lt;/p>
&lt;p>&lt;img src="https://xiuwei.github.io/p/exploring-the-gossip-protocol/image.png"
width="640"
height="413"
srcset="https://xiuwei.github.io/p/exploring-the-gossip-protocol/image_hu5615acc8d4e95475c63c0632749b833a_190720_480x0_resize_box_3.png 480w, https://xiuwei.github.io/p/exploring-the-gossip-protocol/image_hu5615acc8d4e95475c63c0632749b833a_190720_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="协议简易动画，来源于网络（详见参考文献二）"
class="gallery-image"
data-flex-grow="154"
data-flex-basis="371px"
>&lt;/p>
&lt;h2 id="协议的应用于实践">
&lt;a href="#%e5%8d%8f%e8%ae%ae%e7%9a%84%e5%ba%94%e7%94%a8%e4%ba%8e%e5%ae%9e%e8%b7%b5">#&lt;/a>
协议的应用于实践
&lt;/h2>&lt;h3 id="apache-cassandra">
&lt;a href="#apache-cassandra">#&lt;/a>
Apache Cassandra
&lt;/h3>&lt;p>Apache Cassandra是一种高度可扩展的、分布式的NoSQL数据库，它在很大程度上受到了Amazon Dynamo的启发。Cassandra中使用Gossip协议来实现节点间的成员关系管理、故障检测、元数据信息传播以及负载均衡。&lt;/p>
&lt;h4 id="成员关系管理和故障检测">
&lt;a href="#%e6%88%90%e5%91%98%e5%85%b3%e7%b3%bb%e7%ae%a1%e7%90%86%e5%92%8c%e6%95%85%e9%9a%9c%e6%a3%80%e6%b5%8b">#&lt;/a>
成员关系管理和故障检测
&lt;/h4>&lt;p>在Cassandra中，节点通过Gossip协议来维护成员关系信息。在每个Gossip周期，节点会与随机选择的其他节点交换成员关系信息。这样，节点可以了解其他节点的在线状态和故障情况。此外，Cassandra使用了一种名为Phi Accrual Failure Detector的故障检测机制，它依赖于Gossip协议收集的节点信息来检测节点的可用性。&lt;/p>
&lt;h4 id="元数据信息传播">
&lt;a href="#%e5%85%83%e6%95%b0%e6%8d%ae%e4%bf%a1%e6%81%af%e4%bc%a0%e6%92%ad">#&lt;/a>
元数据信息传播
&lt;/h4>&lt;p>Cassandra中的节点需要维护一定量的元数据，例如分区信息、副本信息和令牌（Token）分配。Gossip协议被用于在节点之间传播这些元数据。在每个Gossip周期内，节点会将自己的元数据发送给随机选择的其他节点。这些节点在收到元数据后，会更新自己的本地数据存储，并将更新后的元数据传播给其他节点。这个过程会持续进行，直到元数据在整个系统中被广泛传播。&lt;/p>
&lt;h3 id="redis-cluster">
&lt;a href="#redis-cluster">#&lt;/a>
Redis Cluster
&lt;/h3>&lt;p>Gossip 协议被广泛应用于各种分布式系统中，下面我们将介绍在Redis Cluster的应用场景，并将 Gossip 协议与真实场景结合起来。&lt;/p>
&lt;p>Redis Cluster 是一个分布式的 Redis 解决方案，它允许将数据分布在多个节点上以提高性能和可用性。Gossip 协议用于节点之间的发现和状态同步，每个节点都了解整个集群的拓扑结构以及其他节点的状态信息，以便正确地路由请求和保证数据的一致性。&lt;/p>
&lt;p>想象一下一个大型的工厂，里面有各种各样的生产线。每条生产线都有一个负责人，他们会定期与周围的生产线负责人交流，分享自己所在生产线的状态和工作情况。这样，即使有一部分生产线出现了问题，其他生产线也能够通过周围生产线的信息了解到整个工厂的状态。&lt;/p>
&lt;p>Gossip 协议在 Redis Cluster 中的应用主要分为两个方面：&lt;/p>
&lt;h4 id="节点发现">
&lt;a href="#%e8%8a%82%e7%82%b9%e5%8f%91%e7%8e%b0">#&lt;/a>
节点发现
&lt;/h4>&lt;p>当一个新的节点加入到 Redis Cluster 中时，它需要能够自动地发现其他节点，并加入到集群中。这就需要一种机制来实现节点之间的自动发现，而 Gossip 协议恰好提供了这样的功能。每个节点会周期性地与其他节点交换信息，包括自己的地址和状态，从而使新加入的节点能够了解到整个集群的拓扑结构，并与其他节点建立连接。&lt;/p>
&lt;h4 id="状态同步">
&lt;a href="#%e7%8a%b6%e6%80%81%e5%90%8c%e6%ad%a5">#&lt;/a>
状态同步
&lt;/h4>&lt;p>在 Redis Cluster 中，节点之间需要保持数据的一致性，即使某个节点发生了故障或者新的节点加入。为了实现这一点，每个节点都需要了解其他节点的状态信息，如节点的存活状态、负载情况等。通过 Gossip 协议，每个节点可以定期地交换状态信息，从而保持集群中所有节点的状态同步，并及时地做出相应的调整和处理。&lt;/p>
&lt;p>总的来说，Redis Cluster 中的 Gossip 协议通过节点之间的周期性交流信息，实现了节点的发现和状态同步，从而保证了集群的高可用性和一致性。&lt;/p>
&lt;h2 id="总结">
&lt;a href="#%e6%80%bb%e7%bb%93">#&lt;/a>
总结
&lt;/h2>&lt;p>文中介绍了 Gossip 协议的一些情况。这里简单总结下其优缺点：&lt;/p>
&lt;h3 id="优势">
&lt;a href="#%e4%bc%98%e5%8a%bf">#&lt;/a>
优势
&lt;/h3>&lt;ul>
&lt;li>快速传播：由于Gossip协议基于随机节点选择进行信息交换，信息可以在很短的时间内传播到大部分节点，实现快速信息传播。&lt;/li>
&lt;li>容错性：Gossip协议具有较高的容错性，即使某个节点发生故障或者无法与其他节点通信，信息仍然可以通过其他路径传播。&lt;/li>
&lt;li>抗拥塞：随机选择目标节点有助于避免在特定节点上产生通信瓶颈。这使得Gossip协议可以在大规模分布式系统中高效运行。&lt;/li>
&lt;li>可扩展性：Gossip协议的设计使得它可以很容易地适应大规模分布式系统，具有较好的可扩展性。&lt;/li>
&lt;li>简单易实现：Gossip协议的设计和实现相对简单，易于在各种分布式系统中进行部署。&lt;/li>
&lt;/ul>
&lt;h3 id="劣势">
&lt;a href="#%e5%8a%a3%e5%8a%bf">#&lt;/a>
劣势
&lt;/h3>&lt;ul>
&lt;li>最终一致性：Gossip协议通常实现的是最终一致性，而不是强一致性。在某些应用场景中，这可能导致数据在短时间内不一致。&lt;/li>
&lt;li>带宽消耗：由于Gossip协议的信息交换是基于概率的，可能会导致部分信息多次在节点之间传播，增加了网络带宽消耗。&lt;/li>
&lt;li>信息冗余：Gossip协议可能会导致信息冗余，因为每个节点都需要存储关于其他节点的部分信息。&lt;/li>
&lt;li>难以保证完全一致性：在某些情况下，由于网络延迟、故障等因素，Gossip协议可能难以保证系统中所有节点的完全一致性。&lt;/li>
&lt;li>参数调优：Gossip协议的性能在很大程度上取决于参数设置，例如Gossip周期、目标节点数量等。在实际应用中，需要根据系统的特点和需求进行参数调优，以获得最佳性能。&lt;/li>
&lt;/ul>
&lt;h2 id="参考文献">
&lt;a href="#%e5%8f%82%e8%80%83%e6%96%87%e7%8c%ae">#&lt;/a>
参考文献
&lt;/h2>&lt;p>&lt;a class="link" href="https://www.cs.cornell.edu/home/rvr/papers/flowgossip.pdf" target="_blank" rel="noopener"
>Efficient Reconciliation and Flow Control for Anti-Entropy Protocols&lt;/a>
&lt;a class="link" href="https://pstree.cc/wtf-is-gossip/" target="_blank" rel="noopener"
>Wtf is Gossip Protocols?&lt;/a>
&lt;a class="link" href="https://zhuanlan.zhihu.com/p/41228196" target="_blank" rel="noopener"
>P2P 网络核心技术：Gossip 协议&lt;/a>&lt;/p></description></item><item><title>归档</title><link>https://xiuwei.github.io/archives/</link><pubDate>Mon, 04 Dec 2023 00:00:00 +0000</pubDate><guid>https://xiuwei.github.io/archives/</guid><description/></item><item><title>Spring Cloud应用如何平滑迁移至IPv6?</title><link>https://xiuwei.github.io/p/ip-protocal-migration/</link><pubDate>Tue, 03 Jan 2023 12:00:00 +0000</pubDate><guid>https://xiuwei.github.io/p/ip-protocal-migration/</guid><description>&lt;img src="https://xiuwei.github.io/p/ip-protocal-migration/cover.jpg" alt="Featured image of post Spring Cloud应用如何平滑迁移至IPv6?" />&lt;h2 id="背景">
&lt;a href="#%e8%83%8c%e6%99%af">#&lt;/a>
背景
&lt;/h2>&lt;p>IPv4 协议（后文简称 IPv4）为互联网的发展与普及做出了重要贡献，但近年来，随着应用程序、数据和 IT 服务的爆炸式增长。当初协议设计过程中用来描述 IP 地址所采用的 32 位二进制数格式的 IPv4 地址已经于 2011 年&lt;a class="link" href="https://www.infoq.cn/article/vpdcmupcw3mev3l2kx41" target="_blank" rel="noopener"
>[1]&lt;/a>被申请耗尽，从那时起，全世界都已经处于无新地址可用的局面。&lt;/p>
&lt;p>IPv6 协议（后文简称 IPv6）作为 IPv4 之后被采用的下一代互联网协议，相比 IPv4 协议中采用 32 位来表示 IP 地址，其地址表示位数扩充到了 128 位，地址数量是 IPv4 所能提供的 2 的 96 次方倍。简单看数字可能显得不太直观，换成一句描述 IPv6 地址之多更直观和经典的话：“采用 128 位表示地址的 IPv6 可以为地球上的每一粒沙子都分配一个 IP 地址”！此外，IPv6 协议其不仅可以解决 IPv4 协议中的地址短缺问题，同时也能为互联网提供更高效、更安全的网络通信。IPv6 协议在网络通信中提供了许多新的功能和优势。例如，在数据传输和路由方面，其通过新的设计提高了效率和可靠性，减少了网络拥堵和数据包丢失的情况。此外，在安全领域，其内置对 IPSec 的支持，可以更好地保护网络中的数据传输安全，防止黑客攻击和窃取数据。
作为下一代互联网协议，向 IPv6 迁移是未来的大势所趋。在我国，从 2014 年开始相关机构已经逐步停止向新用户和应用分配 IPv4 地址，开始全面商用 IPv6 协议(计算机网络（第七版）谢希仁)。在政府引导测，近年来，陆续也出台了一系列相关指导文件例如：2017 年国务院发布的《&lt;a class="link" href="http://www.gov.cn/zhengce/2017-11/26/content_5242389.htm" target="_blank" rel="noopener"
>推进互联网协议第六版（IPv6）规模部署行动计划&lt;/a>》、2021 年工业与信息化部发布的《&lt;a class="link" href="http://www.xinhuanet.com/info/2021-07/09/c_1310052164.htm" target="_blank" rel="noopener"
>IPv6 流量提升三年专项行动计划（2021-2023 年）&lt;/a>》、2021 年网信办发布的&lt;a class="link" href="http://www.gov.cn/zhengce/zhengceku/2021-07/23/content_5626963.htm" target="_blank" rel="noopener"
>《关于推动 IPv6 规模部署的指导意见》&lt;/a>等不断地在引导企业从 IPv4 协议向 IPv6 协议迁移。
但由于当前互联网中 IPv4 协议的应用规模非常大，对于用户来说，没办法通过规定一个时间日期，从那一刻开始，所有互联网上的设备全部使用 IPv6，这是不现实的。一次性迁移不仅在基础设施层面不可行，对企业用户来说，就算基础设施都能准备完毕，让其将少则上百，多则成千上万的应用实例在一段时间内一次性停机进行协议栈迁移，无论是在风险上，还是成本上，对企业用户来说都是难以接受的！既然无法一步到位，渐进式的 IP 地址迁移成为当前的主流选择。接下来本文将介绍一些主流渐进式的 IP 地址迁移方法。&lt;/p>
&lt;h2 id="迁移方案">
&lt;a href="#%e8%bf%81%e7%a7%bb%e6%96%b9%e6%a1%88">#&lt;/a>
迁移方案
&lt;/h2>&lt;p>虽然 IPv6 协议具有许多优势，但是其推广和应用仍然面临许多挑战。IPv6 的普及需要全球范围内的配套基础措施和支持，包括网络设备的更新、人员培训和政策法规的推进等等。同时，IPv6 与 IPv4 之间的兼容性也是一个重要的问题，需要通过技术手段和过渡机制来解决。
常见的 IP 协议渐进式迁移共存方案，主要有双栈（Dual Stack）、隧道（Tunneling）等技术。其中，双栈技术是目前业界应用较为广泛的一种 IPv4/IPv6 共存的一种技术，其目的是在互联网完全过度到 IPv6 之前，通过为设备安装 IPv4 和 IPv6 双协议栈。具有双栈的设备可以实现与单 IPv4、单 IPv6 或者双栈的设备进行通信。通过让各种协议栈能共存，渐进式地进行 IP 协议栈的迁移。像 Kubernetes 很早也已经对&lt;a class="link" href="https://kubernetes.io/zh-cn/docs/concepts/services-networking/dual-stack/" target="_blank" rel="noopener"
>双栈功能&lt;/a>进行了支持。
隧道技术是一种把 IPv6 地址封装到 IPv4 数据报中的方法，当数据从 IPv6 单协议栈发出后，在经过 IPv4 单栈网络环境的过程中，将 IPv6 地址封装到 IPv4 数据报作为 IPv4 数据报内容后，通过 IPv4 协议栈进行传输。在经过 IPv4 单栈环境后，来到 IPv6 单栈环境时，再将数据报中的 IPv6 数据段内容解析出来，构造新的 IPv6 数据报在 IPv6 协议栈环境中进行传输。&lt;/p>
&lt;h3 id="微服务双栈迁移方案">
&lt;a href="#%e5%be%ae%e6%9c%8d%e5%8a%a1%e5%8f%8c%e6%a0%88%e8%bf%81%e7%a7%bb%e6%96%b9%e6%a1%88">#&lt;/a>
微服务双栈迁移方案
&lt;/h3>&lt;p>上文介绍的方案更多的是一般化的方法论。但具体到微服务系统中，远程调用过程如何实现多协议栈共存以便帮助企业用户平滑进行协议栈的迁移呢？
&lt;img src="https://intranetproxy.alipay.com/skylark/lark/0/2023/png/21257183/1679207793618-9c431106-93a2-452f-be71-32185f826569.png#clientId=u0b49bd32-d731-4&amp;amp;from=paste&amp;amp;height=386&amp;amp;id=F7Hec&amp;amp;name=image.png&amp;amp;originHeight=772&amp;amp;originWidth=1464&amp;amp;originalType=binary&amp;amp;ratio=2&amp;amp;rotation=0&amp;amp;showTitle=false&amp;amp;size=71775&amp;amp;status=done&amp;amp;style=none&amp;amp;taskId=u05d69bc5-9d7e-4646-987b-e869da537ba&amp;amp;title=&amp;amp;width=732"
loading="lazy"
alt="image.png"
>
上图是当前业界微服务系统中服务之间普遍采用的远程调用过程架构图，本文接下来介绍如何基于双栈技术实现微服务应用的协议栈平滑迁移的常用方式。&lt;/p>
&lt;h3 id="双注册双订阅实现协议栈平滑迁移">
&lt;a href="#%e5%8f%8c%e6%b3%a8%e5%86%8c%e5%8f%8c%e8%ae%a2%e9%98%85%e5%ae%9e%e7%8e%b0%e5%8d%8f%e8%ae%ae%e6%a0%88%e5%b9%b3%e6%bb%91%e8%bf%81%e7%a7%bb">#&lt;/a>
双注册双订阅实现协议栈平滑迁移
&lt;/h3>&lt;p>在微服务系统中，相比于单栈环境下，只有一个 IP 地址，微服务的注册与发现过程都基于该地址完成服务远程调用。在多协议栈共存的环境中，其本质就是要解决服务注册和发现过程怎么使用 IP 地址的问题。
梳理清楚了问题，就不难发现基于双注册双订阅的方法可以较好地解决微服务系统中多协议栈共存的问题，以便实现微服务系统协议栈的平滑迁移。该方案的服务注册和订阅过程可以被描述为下图所示：
&lt;img src="https://intranetproxy.alipay.com/skylark/lark/0/2023/png/21257183/1679216863247-e13d938b-a2a5-4965-b417-0d323d1c11fd.png#clientId=u21221381-1afe-4&amp;amp;from=paste&amp;amp;height=534&amp;amp;id=R9qXH&amp;amp;name=image.png&amp;amp;originHeight=1068&amp;amp;originWidth=1352&amp;amp;originalType=binary&amp;amp;ratio=2&amp;amp;rotation=0&amp;amp;showTitle=false&amp;amp;size=115412&amp;amp;status=done&amp;amp;style=none&amp;amp;taskId=u4adc2aaa-4fcc-4830-aca5-beccded9a22&amp;amp;title=&amp;amp;width=676"
loading="lazy"
alt="image.png"
>&lt;/p>
&lt;p>采用双注册双订阅实现微服务系统平滑进行 IP 协议栈迁移的过程可以被大致描述为以下步骤：&lt;/p>
&lt;ol>
&lt;li>在新的应用升级或者发版之前，对相关微服务应用所在宿主机进行 IP 地址协议栈升级改造，让其同时支持 IPv4 和 IPv6 双协议栈。&lt;/li>
&lt;li>经过步骤 1 改造的微服务应用，在微服务框架层面，通过一个双栈地址提取模块提取应用宿主机中有效的 IPv4 和 IPv6 地址，并通过服务注册模块，将双栈地址都注册到注册中心。&lt;/li>
&lt;li>消费者订阅注册中心中的某个服务的 IPv4 和 IPv6 双栈地址，通过应用服务框架层面的双栈地址解析模块，比对宿主机所支持的协议栈类型，如果宿主机仅支持 IPv4 协议，则使用提供者的 IPv4 地址发起服务调用；如果仅支持 IPv6 或同时支持双栈，则用提供者的 IPv6 地址发起服务调用；&lt;/li>
&lt;li>当系统中的所有微服务都完成支持 IPv6 协议栈的支持后，逐步对所有应用宿主机关闭 IPv4 协议栈，从而平滑完成大规模微服务系统从 IPv4 协议栈到 IPv6 协议栈的迁移。&lt;/li>
&lt;/ol>
&lt;h3 id="基于-dns-技术实现协议栈平滑迁移">
&lt;a href="#%e5%9f%ba%e4%ba%8e-dns-%e6%8a%80%e6%9c%af%e5%ae%9e%e7%8e%b0%e5%8d%8f%e8%ae%ae%e6%a0%88%e5%b9%b3%e6%bb%91%e8%bf%81%e7%a7%bb">#&lt;/a>
基于 DNS 技术实现协议栈平滑迁移
&lt;/h3>&lt;p>双注册双订阅的方法虽然很自然和清晰，但是其由于服务注册过程中针对双栈环境中的应用会多注册一条 IP 地址对应的记录，会降低注册中心的服务承载量。
因此，也可以基于 DNS 技术实现多协议栈共存，解决微服务系统协议栈迁移的方法。其本质是将原来的注册服务实例地址过程变成注册服务实例域名（这里域名更多是实例标识作用），可实现在注册中心所注册服务实例记录数量不变的情况下，通过额外的 DNS 域名系统存储服务域名所对应的双栈 IP 地址，从而实现多协议栈的共存。采用该方案的服务注册和订阅过程如下图所示：
&lt;img src="https://intranetproxy.alipay.com/skylark/lark/0/2023/png/21257183/1679217073664-4fc6c45d-b58c-4ae7-b446-ba0c3ff60400.png#clientId=u21221381-1afe-4&amp;amp;from=paste&amp;amp;height=462&amp;amp;id=u23c7c9fd&amp;amp;name=image.png&amp;amp;originHeight=924&amp;amp;originWidth=1600&amp;amp;originalType=binary&amp;amp;ratio=2&amp;amp;rotation=0&amp;amp;showTitle=false&amp;amp;size=141458&amp;amp;status=done&amp;amp;style=none&amp;amp;taskId=ud6e287ba-8c6f-404a-975b-53976811967&amp;amp;title=&amp;amp;width=800"
loading="lazy"
alt="image.png"
>
基于 DNS 技术实现微服务系统平滑进行 IP 地址迁移的过程可以被大致描述为以下步骤：&lt;/p>
&lt;ol>
&lt;li>在新的应用升级或者发版之前，对相关微服务应用进行 IP 地址协议栈改造，让其同时支持 IPv4 和 IPv6 双协议栈。改造后的应用需要将本机的双栈 IP 地址信息和本应用实例特点的域名注册到系统的 DNS 服务上。&lt;/li>
&lt;li>完成域名注册后，应用实例将本地域名注册到注册中心。&lt;/li>
&lt;li>消费者订阅注册中心中的某个服务所有实例的域名，通过应用框架层面的域名解析模块，向系统中的 DNS 服务发起基于域名解析请求，在通过 DNS 获取到示例域名对应的 IP 地址后，比对宿主机所支持的协议栈类型，如果宿主机仅支持 IPv4，则使用 IPv4 地址发起服务调用；如果仅支持 IPv6 或同时支持双栈，则优先使用 IPv6 地址发起服务调用；&lt;/li>
&lt;li>当系统中的所有微服务都完成支持 IPv6 协议栈的支持后，逐步对所有应用宿主机关闭 IPv4 协议栈，从而平滑完成大规模微服务系统从 IPv4 协议栈到 IPv6 协议栈的迁移。&lt;/li>
&lt;/ol>
&lt;p>相比于双注册双订阅方式，基于 DNS 的方法可以较好地解决双注册双订阅过程中带给注册中心的多余压力，但 DNS 的高可用也是企业用户需要特别注意的点。&lt;/p>
&lt;h2 id="实践">
&lt;a href="#%e5%ae%9e%e8%b7%b5">#&lt;/a>
实践
&lt;/h2>&lt;p>Spring Cloud Alibaba 作为应用广泛的微服务框架，目前在 2021.0.5.0 版本中已经提供了微服务场景下的不同协议栈应用互通共存方案，以便帮助企业用户实现大规模微服务系统的协议栈迁移能力。社区方案基于双注册双订阅实现，应用启动后会默认将微服务的 IPv4 地址和 IPv6 地址注册到注册中心中，其中 IPv4 地址会存放在 Nacos 服务列表中的 IP 字段下，IPv6 地址在 Nacos 的 metadata 字段中，其对应的 Key 为 IPv6（可以解决普通双注册双订阅过程中的同一个服务实例有两条记录，对注册中心造成压力的问题）。当服务消费者调用服务提供者时，会根据自身的 IP 协议栈支持情况，选择合适的 IP 地址类型发起服务调用。具体规则：&lt;/p>
&lt;ol>
&lt;li>服务消费者本身支持 IPv4 和 IPv6 双协议栈或仅支持 IPv6 协议栈的情况下，服务消费者会使用服务提供的 IPv6 地址发起服务调用；&lt;/li>
&lt;li>服务消费者本身仅支持 IPv4 单协议栈的情况下，服务消费者会使用服务提供的 IPv4 地址发起服务调用。&lt;/li>
&lt;/ol>
&lt;h3 id="应用配置">
&lt;a href="#%e5%ba%94%e7%94%a8%e9%85%8d%e7%bd%ae">#&lt;/a>
应用配置
&lt;/h3>&lt;p>相比于一般使用 Spring Cloud Alibaba 构建微服务，要使用协议栈共存迁移功能需要对应用增加如下配置：&lt;/p>
&lt;h4 id="服务注册">
&lt;a href="#%e6%9c%8d%e5%8a%a1%e6%b3%a8%e5%86%8c">#&lt;/a>
服务注册
&lt;/h4>&lt;p>目前，使用支持协议栈共存迁移功能的 Spring Cloud Alibaba 版本以后，服务提供者在进行服务注册过中，不需要做任何配置，会默认检查当前应用所支持的协议栈情况，如果默认是单 IPv6 或 IPv4 协议栈，则仅注册相应的地址。如果应用支持双栈，则会自动获取应用的 IPv6 地址，然后，将 IPv6 地址作为应用实例的服务示例元数据注册到注册中心上。&lt;/p>
&lt;h4 id="服务消费">
&lt;a href="#%e6%9c%8d%e5%8a%a1%e6%b6%88%e8%b4%b9">#&lt;/a>
服务消费
&lt;/h4>&lt;p>如果应用是采用 Spring Cloud Alibaba 2021.0.5.0 版本，默认使用 Spring Cloud LoadBalancer 负载均衡策略，需要在消费者应用 application.properties 配置文件中增加如下配置开启协议栈共存迁移功能：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-properties" data-lang="properties">&lt;span class="line">&lt;span class="cl">&lt;span class="na">spring.cloud.loadbalancer.ribbon.enabled&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">false&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">spring.cloud.loadbalancer.nacos.enabled&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">true&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="效果演示">
&lt;a href="#%e6%95%88%e6%9e%9c%e6%bc%94%e7%a4%ba">#&lt;/a>
效果演示
&lt;/h2>&lt;p>为了便于演示，本文直接基于&lt;a class="link" href="https://www.aliyun.com/product/kubernetes" target="_blank" rel="noopener"
>阿里云容器服务 ACK&lt;/a>构建了一个双栈环境，来进行双栈环境的服务注册与消费演示。&lt;/p>
&lt;h2 id="服务注册-1">
&lt;a href="#%e6%9c%8d%e5%8a%a1%e6%b3%a8%e5%86%8c-1">#&lt;/a>
服务注册
&lt;/h2>&lt;p>如下本文演示用的服务提供者实例 Pod 信息：
&lt;img src="https://intranetproxy.alipay.com/skylark/lark/0/2023/png/21257183/1679227819209-cb1b2ad6-4402-4075-aced-065f76160da4.png#clientId=uf73c13f1-991a-4&amp;amp;from=paste&amp;amp;height=156&amp;amp;id=u81a5cd10&amp;amp;name=image.png&amp;amp;originHeight=312&amp;amp;originWidth=2446&amp;amp;originalType=binary&amp;amp;ratio=2&amp;amp;rotation=0&amp;amp;showTitle=false&amp;amp;size=204807&amp;amp;status=done&amp;amp;style=none&amp;amp;taskId=uefd0add8-a6af-4436-807e-6606dc783fd&amp;amp;title=&amp;amp;width=1223"
loading="lazy"
alt="image.png"
>
基于 Spring Cloud Alibaba 协议栈共存迁移功能，其在注册中心上的服务实例列表信息：
&lt;img src="https://intranetproxy.alipay.com/skylark/lark/0/2023/png/21257183/1679227850292-4c9d3cae-9a3a-4464-b863-17d4390bbb17.png#clientId=uf73c13f1-991a-4&amp;amp;from=paste&amp;amp;height=126&amp;amp;id=u78988947&amp;amp;name=image.png&amp;amp;originHeight=252&amp;amp;originWidth=2554&amp;amp;originalType=binary&amp;amp;ratio=2&amp;amp;rotation=0&amp;amp;showTitle=false&amp;amp;size=143946&amp;amp;status=done&amp;amp;style=none&amp;amp;taskId=u05f1052d-335b-4533-a72e-66a703f4b3d&amp;amp;title=&amp;amp;width=1277"
loading="lazy"
alt="image.png"
>&lt;/p>
&lt;h2 id="服务消费-1">
&lt;a href="#%e6%9c%8d%e5%8a%a1%e6%b6%88%e8%b4%b9-1">#&lt;/a>
服务消费
&lt;/h2>&lt;p>单栈环境服务消费者：
&lt;img src="https://intranetproxy.alipay.com/skylark/lark/0/2023/png/21257183/1679280217276-9e3cd3dc-b181-49a9-b6cf-c156e6720112.png#clientId=uf73c13f1-991a-4&amp;amp;from=paste&amp;amp;height=154&amp;amp;id=u326c0cf1&amp;amp;name=image.png&amp;amp;originHeight=308&amp;amp;originWidth=2462&amp;amp;originalType=binary&amp;amp;ratio=2&amp;amp;rotation=0&amp;amp;showTitle=false&amp;amp;size=181070&amp;amp;status=done&amp;amp;style=none&amp;amp;taskId=uddf23c9b-d437-4022-8d3b-9b3edf72c14&amp;amp;title=&amp;amp;width=1231"
loading="lazy"
alt="image.png"
>
服务调用成功以后，服务提供者会打印调用消费者的调用 IP 地址：
&lt;img src="https://intranetproxy.alipay.com/skylark/lark/0/2023/png/21257183/1679280312813-4cb6d6e3-8a65-4be4-8660-b8af1cbecc23.png#clientId=uf73c13f1-991a-4&amp;amp;from=paste&amp;amp;height=181&amp;amp;id=u77731e53&amp;amp;name=image.png&amp;amp;originHeight=362&amp;amp;originWidth=2248&amp;amp;originalType=binary&amp;amp;ratio=2&amp;amp;rotation=0&amp;amp;showTitle=false&amp;amp;size=185950&amp;amp;status=done&amp;amp;style=none&amp;amp;taskId=u1b6c29bc-8997-4926-affd-f4a5f252ff3&amp;amp;title=&amp;amp;width=1124"
loading="lazy"
alt="image.png"
>
从上述返回结果来看，IPv4 单栈环境中的消费者由于仅支持单栈，所以一直通过 IPv4 协议栈向双栈服务提供者发起请求。
双栈环境服务消费者：
&lt;img src="https://intranetproxy.alipay.com/skylark/lark/0/2023/png/21257183/1679280399202-87209390-cddf-4f48-b53c-d035f67312c9.png#clientId=uf73c13f1-991a-4&amp;amp;from=paste&amp;amp;height=153&amp;amp;id=u7b1bfd9e&amp;amp;name=image.png&amp;amp;originHeight=306&amp;amp;originWidth=2436&amp;amp;originalType=binary&amp;amp;ratio=2&amp;amp;rotation=0&amp;amp;showTitle=false&amp;amp;size=192353&amp;amp;status=done&amp;amp;style=none&amp;amp;taskId=u4f98585e-d87d-466b-b7de-0c6d25df563&amp;amp;title=&amp;amp;width=1218"
loading="lazy"
alt="image.png"
>
服务调用成功以后，服务提供者会打印调用消费者的调用 IP 地址，可以看到打印的是消费者的 IPv6 地址：
&lt;img src="https://intranetproxy.alipay.com/skylark/lark/0/2023/png/21257183/1679280496522-771aa27f-3c61-4c27-b2ba-931bfa3702d0.png#clientId=uf73c13f1-991a-4&amp;amp;from=paste&amp;amp;height=155&amp;amp;id=u808935b7&amp;amp;name=image.png&amp;amp;originHeight=310&amp;amp;originWidth=2252&amp;amp;originalType=binary&amp;amp;ratio=2&amp;amp;rotation=0&amp;amp;showTitle=false&amp;amp;size=202478&amp;amp;status=done&amp;amp;style=none&amp;amp;taskId=u68cd3a36-1de8-4598-b73d-c027faf51f8&amp;amp;title=&amp;amp;width=1126"
loading="lazy"
alt="image.png"
>
从上述返回结果来看，IPv4/IPv6 双栈环境中的消费者由于支持 IPv6，为了实现协议栈向 IPv6 的迁移，所以默认一直通过 IPv6 协议栈向双栈服务提供者发起请求。&lt;/p></description></item><item><title>关于 aPaaS 的几点思考</title><link>https://xiuwei.github.io/p/several-thoughts-on-apaas/</link><pubDate>Thu, 15 Sep 2022 20:00:00 +0000</pubDate><guid>https://xiuwei.github.io/p/several-thoughts-on-apaas/</guid><description>&lt;img src="https://xiuwei.github.io/p/several-thoughts-on-apaas/cover.jpg" alt="Featured image of post 关于 aPaaS 的几点思考" />&lt;h2 id="1-前言">
&lt;a href="#1-%e5%89%8d%e8%a8%80">#&lt;/a>
1. 前言
&lt;/h2>&lt;p>在阅读之前，先统一概念称呼。对于平台，本文统一用aPaaS（应用平台即服务，application Platform as a Service）泛指包含零代码、低代码、iPaaS（集成平台即服务， integration Platform as a Service）等技术的PaaS开发平台/开发工具。而对于技术方向，还是区分为零代码、低代码。&lt;/p>
&lt;p>本文主要记录我对aPaaS相关内容的思考和观点总结，其主要根据我的项目经验和行业观察学习而来。这些思考主要为了回答以下问题，欢迎交流讨论：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>aPaaS目前发展遇到什么问题（困境）？能否解决？&lt;/p>
&lt;/li>
&lt;li>
&lt;p>在这些困境之下，aPaaS价值几何，是否值得继续投入？&lt;/p>
&lt;/li>
&lt;li>
&lt;p>为了最大化实现价值，aPaaS的发展趋势是什么？&lt;/p>
&lt;/li>
&lt;li>
&lt;p>在这种发展趋势下，aPaaS的重点模块可以如何做？&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="2-当前困境">
&lt;a href="#2-%e5%bd%93%e5%89%8d%e5%9b%b0%e5%a2%83">#&lt;/a>
2. 当前困境
&lt;/h2>&lt;h3 id="21-客户现状">
&lt;a href="#21-%e5%ae%a2%e6%88%b7%e7%8e%b0%e7%8a%b6">#&lt;/a>
2.1 客户现状
&lt;/h3>&lt;p>&lt;strong>1）大部分客户更想要解决方案，而非单纯的工具（不想用）&lt;/strong>&lt;/p>
&lt;p>客户首要关心我们是否帮助他们准确地发现问题、快速高效地解决问题。只要能解决问题，用Excel都可以。
所以，客户是否需要aPaaS，关键在于我们能否为其提供切实可行的数字化转型、升级的解决方案（要包含如何使用aPaaS深度参与）。&lt;/p>
&lt;p>也就是，aPaaS不一定适合所有行业的企业的生命周期各个阶段、业务生命周期各个阶段。但如果aPaaS要作为企业的方案候选项，就应该尽可能在不同阶段的痛点上有突出优势/定位，而不是一味地宣传降低代码量。例如对于中小企业的业务起步阶段，aPaaS可以帮助企业低成本地快速试错。&lt;/p>
&lt;p>解决思路：咨询服务+行业解决方案（基于aPaaS的行业全价值链的解决方案，可供单独环节使用）+行业级应用模板&lt;/p>
&lt;p>&lt;strong>2）客户对aPaaS不信任，担心受限受控（不敢用）&lt;/strong>&lt;/p>
&lt;p>&lt;strong>2.1）aPaaS强依赖供应商（锁平台）。&lt;/strong> 目前，aPaaS主要通过解析引擎解析用户的配置让应用跑起来。配置和解析引擎缺一不可，而不同厂家的配置方式不同、解析引擎不同，互不兼容。客户如果想更换产品服务，就要付出巨大成本。&lt;/p>
&lt;p>而且，同为绑定锁平台，与SaaS的开箱即用不同，aPaaS还需要额外付出配置成本，绑定影响更深。这些都让客户的研发受限于aPaaS能力，受控于供应商。&lt;/p>
&lt;p>&lt;strong>2.2）aPaaS的各种标准和规范尚未完善。&lt;/strong> 与成熟的软件开发模式不同，aPaaS的权责边界尚不清晰，且各种功能缺乏透明度，缺少监管。这让aPaaS存在商务纠纷风险。例如版权问题，客户使用aPaaS配置的应用，软著属于谁？&lt;/p>
&lt;p>解决思路：发展的问题在发展中解决。这需要aPaaS自身、业界共同发展才能解决。也侧面证明aPaaS业界还在激烈斗争期。&lt;/p>
&lt;p>&lt;strong>3）采购aPaaS的交易成本大（不会买）&lt;/strong>&lt;/p>
&lt;p>&lt;strong>3.1）难以选型。&lt;/strong> 目前，业界的aPaaS同质化严重，差异化不明显。各个aPaaS缺乏大量且长久的实践经验和数据，导致客户难以量化价值。而且市场也无相关选型报告。&lt;/p>
&lt;p>&lt;strong>3.2）决策压力大。&lt;/strong> 客户担心aPaaS是否又一个数据孤岛，能否兼容老旧系统、以及未来的新系统。如果“一购定终身”，那客户的决策压力非常大。&lt;/p>
&lt;p>解决思路：整体发展+突出卖点、案例报告+生态化&lt;/p>
&lt;p>&lt;strong>4）大部分客户还较难充分使用aPaaS（用不好）&lt;/strong>&lt;/p>
&lt;p>&lt;strong>4.1）业务人员能力差异大。&lt;/strong> 零代码aPaaS主要面向业务人员。现阶段，大部分业务人员连清楚表达需求都较难做到，要他们使用aPaaS准确抽象出业务场景和流程就更难了。而且，部分aPaaS的易用性不够，更提高了学习成本，加剧业务人员的工作负担。&lt;/p>
&lt;p>&lt;strong>4.2）缺少开发者。&lt;/strong> 低代码aPaaS主要面向开发人员（包含专业实施人员、初级程序员、高级程序员）。如果客户没有正式的IT团队或实施团队，他们很难使用低代码aPaaS产出期望结果。而且团队组建并非一朝一夕之功，让团队熟练使用低代码aPaaS也非易事。&lt;/p>
&lt;p>解决思路：整体发展，加强aPaaS的易用性和功能性，提高数字化建设ROI。&lt;/p>
&lt;h3 id="22-产品自身问题">
&lt;a href="#22-%e4%ba%a7%e5%93%81%e8%87%aa%e8%ba%ab%e9%97%ae%e9%a2%98">#&lt;/a>
2，2 产品自身问题
&lt;/h3>&lt;p>在业界内，aPaaS（特别是低代码aPaaS）被很多使用者和开发者称为“KPI项目”，是忽悠老板和投资人的毒瘤。&lt;/p>
&lt;p>我认为，aPaaS的问题主要是以下几点：&lt;/p>
&lt;p>&lt;strong>1）无法满足典型场景的复杂需求&lt;/strong>&lt;/p>
&lt;p>目前，零代码、低代码的底层是声明式编程的DSL（领域特定语言），因此它们继承了声明式编程、DSL的优点和缺点。（声明式编程：描述要做什么（what），至于如何做（how）交由引擎解析执行。&lt;/p>
&lt;p>例如SQL就是经典的声明式编程的DSL）。基于零代码/低代码的aPaaS目前只适合满足在特定领域里的需求，不适合所有场景，这是声明式编程、可视化DSL的天然缺陷。但客户的需求不会只局限于特定领域。&lt;/p>
&lt;p>现在的aPaaS无法满足有传统开发的典型场景需求，例如跨业务系统对接需求、复杂逻辑需求、行业特色需求等。为了项目交付，这种天然缺陷必然要有解决方案。&lt;/p>
&lt;p>&lt;strong>2）功能性（颗粒度）与易用性的矛盾（主要矛盾）&lt;/strong>&lt;/p>
&lt;p>根据软件工程理论，工程的本质复杂度无法避免，没有银弹。工程理论主要解决附属性工作产生的次要复杂度（人为引入复杂度，如编程）。当次要复杂性无限接近0，就是理想中效益最大化。&lt;/p>
&lt;p>降低次要复杂度的有效途径是封装复杂度。当封装的颗粒度越细时，越适合更多场景，越实用。而最细颗粒度的封装是各种专业编程语言、知名脚手架。&lt;/p>
&lt;p>易用性是面向广大普通用户而言的，而非专业程序员。颗粒度越细，普通用户使用门槛越高，丧失低代码的初心。&lt;/p>
&lt;p>&lt;strong>3）成本问题（次要矛盾）&lt;/strong>&lt;/p>
&lt;p>对于开发商，理想的aPaaS是颗粒度足够细，又足够易用，这需要巨大的研发成本才能找到符合产品定位的平衡。而对于客户，颗粒度足够细的高代码用不起，所以追求易用的aPaaS。&lt;/p>
&lt;p>&lt;strong>4）难以对抗熵增&lt;/strong>&lt;/p>
&lt;p>软件在整个生命周期中会不断熵增，表现为需求变更、功能变多、数据变多、性能变慢等。如果不人为干预进行降熵，软件就会逐渐腐烂（software rot），直至出现故障、无法使用等。而aPaaS的对抗熵增能力有待提高，具体表现为：&lt;/p>
&lt;p>&lt;strong>4.1）封装限制了潜力。&lt;/strong> 相比较通用编程语言，零代码、低代码为了降低复杂度，牺牲了拓展性和潜力，最大转化降本增效价值。这是天然缺陷。&lt;/p>
&lt;p>&lt;strong>4.2）功能缺失造成对抗困难。&lt;/strong> 次要复杂度不只包含开发编程，也包含测试、迭代、运维等全生命周期的人为工作。而目前大部分aPaaS的抽象封装重点是开发阶段，忽略其他阶段，没有考虑整体上降低复杂度。&lt;/p>
&lt;p>&lt;strong>4.3）客户无法独立对抗熵增。&lt;/strong> aPaaS运维分为两部分：aPaaS自身迭代运维、配置应用的迭代运维。对于客户，他们能利用aPaaS自身的运维工具对配置应用进行运维，但对aPaaS自身无能为力。如果aPaaS厂商缺乏及时快速的支持，那客户对抗熵增能力极差。&lt;/p>
&lt;p>&lt;strong>4.4）滥用定制化。&lt;/strong> 为了项目交付，部分产品会放弃抽象封装，不断增加定制化组件。这种组件作为独立小模块，很难融合到大一统体系，加剧了系统熵增。&lt;/p>
&lt;h2 id="3-定位和价值">
&lt;a href="#3-%e5%ae%9a%e4%bd%8d%e5%92%8c%e4%bb%b7%e5%80%bc">#&lt;/a>
3. 定位和价值
&lt;/h2>&lt;p>要最大化价值，就要找到PMF，找准定位。&lt;/p>
&lt;h3 id="31-定位">
&lt;a href="#31-%e5%ae%9a%e4%bd%8d">#&lt;/a>
3.1 定位
&lt;/h3>&lt;h4 id="311-目标行业">
&lt;a href="#311-%e7%9b%ae%e6%a0%87%e8%a1%8c%e4%b8%9a">#&lt;/a>
3.1.1 目标行业
&lt;/h4>&lt;p>&lt;strong>1）B端&lt;/strong>&lt;/p>
&lt;p>aPaaS可以面向B端全行业的所有企业。最简单的原因是，中国的程序员缺口非常大。&lt;/p>
&lt;p>同时，根据调查，目前aPaaS在以下行业的渗透率较高，可以针对性发展：通信、金融（银行、保险）、能源、医疗、房地产、制造、教育、零售等行业。这些行业的共性是：用户量大，个性化需求多。可以再细分成两种：&lt;/p>
&lt;p>a）具备一定垄断性质的行业。这些行业的业务流程明确、数据量大。而且，他们利润较好，付得起目前aPaaS的前期培养成本，又处于新时代升级阶段。例如通信、金融等。&lt;/p>
&lt;p>b）政策扶持或劳动密集型的行业。如制造业、教育业。&lt;/p>
&lt;p>另一个方向就是出海，国外的人力成本比国内高很多，aPaaS能更好地发挥价值。&lt;/p>
&lt;p>&lt;strong>2）高校&lt;/strong>&lt;/p>
&lt;p>面向高校可以重点发展产学研一体化。&lt;/p>
&lt;p>对于学校，因为低代码aPaaS本身就是抽象并可视化软件开发过程，所以有利于学生快速掌握开发思维和开发流程。同时也提供项目平台，方便学生从项目落地实践中学习编程。&lt;/p>
&lt;p>对于aPaaS供应商，既可以收集使用数据反哺迭代，也能丰富社区产出。&lt;/p>
&lt;p>对于企业客户，高校培养的零代码、低代码人才可以让企业更好地组建实施团队。&lt;/p>
&lt;p>&lt;strong>3）G端&lt;/strong>&lt;/p>
&lt;p>aPaaS可以面向政府里对服务效率、服务体验要求高的部门。&lt;/p>
&lt;p>这些部门一般业务流程明确、功能规范明确，非常适合使用aPaaS打造安全、高效、统一的服务体系。但政府端的产品由于服务各种终端的用户、与多部门协作、数据敏感等多种特性，更重视产品的多平台、兼容性、开放性、稳定性和安全性。这对aPaaS提出更高要求。&lt;/p>
&lt;h4 id="312-目标客户">
&lt;a href="#312-%e7%9b%ae%e6%a0%87%e5%ae%a2%e6%88%b7">#&lt;/a>
3.1.2 目标客户
&lt;/h4>&lt;p>aPaaS主要面向有数字化转型、升级需求的客户。根据客户的数字化程度，aPaaS有着不同的细分客户：&lt;/p>
&lt;p>1）无数字化经验的客户，一般是小微企业。主要需求是数字化转型，快速拓展市场。&lt;/p>
&lt;p>2）有一定数字化经验的客户，一般是中小企业。主要需求是数字化升级，寻找第二增长曲线，同时解决数字化死角。&lt;/p>
&lt;p>3）有丰富的数字化经验的客户，一般是中大型企业。主要需求是深化数字化改革，加强精细化运营、打破数据孤岛。以求帮助寻求业务迭代和创新机会，帮助进行战略布局。&lt;/p>
&lt;p>而具体到客户内部，零代码aPaaS主要面向业务人员，低代码aPaaS主要面向专业开发者（包含程序员、专门的实施人员）。&lt;/p>
&lt;h4 id="313-目标场景">
&lt;a href="#313-%e7%9b%ae%e6%a0%87%e5%9c%ba%e6%99%af">#&lt;/a>
3.1.3 目标场景
&lt;/h4>&lt;p>根据aPaaS的能力定位不同，目标场景主要有4种：&lt;/p>
&lt;p>1）面向通用型业务场景，普适发展型。面向行业属性较低的通用型场景，主要是企业OA管理。或者基本CRUD场景，主要是简单逻辑的业务。该场景一般是零代码aPaaS产品。例如简道云、明道云、airtable等产品。&lt;/p>
&lt;p>2）面向垂直型业务场景，领域服务型。针对专一领域，深度挖掘领域业务场景，提炼领域共性特征，提供领域专用的功能模块或专用解决方案。例如物联网领域的物模型、告警引擎等，以及常见的电商、CRM领域的有赞、销售易、纷享销客等。&lt;/p>
&lt;p>3）面向综合型业务场景，产品研发型。面向复杂业务场景，同时兼容通用场景。主要满足大型软件、或打造企业内外生态需求。例如mendix、outsystem、华为Astro、微搭、宜搭等产品。&lt;/p>
&lt;p>4）面向B端所有场景，创新先驱型。未来aPaaS的重点定位。可以面向通用、垂直、复杂等场景。因为全面、专业、智能、成熟的aPaaS能与专业研发体系无缝融合，真正做到让业务管业务，让技术管技术。&lt;/p>
&lt;h4 id="314-产品形态">
&lt;a href="#314-%e4%ba%a7%e5%93%81%e5%bd%a2%e6%80%81">#&lt;/a>
3.1.4 产品形态
&lt;/h4>&lt;p>&lt;strong>1）开发工具&lt;/strong>&lt;/p>
&lt;p>根据使用者不同，有两种应用方向。&lt;/p>
&lt;p>1.1）专业开发的辅助工具。低代码aPaaS作为专业开发工具，支持code-in &amp;amp; code-out，支持无缝与专业研发体系融合。开发团队在项目工程里使用aPaaS提高开发效率。也就是，低代码aPaaS只是开发阶段的拼装环节，最终还是输出源码进行部署。相当于把aPaaS作为代码生成器或者说中台。&lt;/p>
&lt;p>1.2）产品的高级能力。aPaaS作为一种能力附加在产品上。客户可以一定程度上调整产品的标准化功能，或者在平台上增加个性化功能。主要为了解决SaaS产品的标准化功能与客户个性化需求的冲突。例如纷享销客、销售易、有赞等厂商的产品。&lt;/p>
&lt;p>&lt;strong>2）开发平台（主流）&lt;/strong>&lt;/p>
&lt;p>aPaaS作为独立开发平台，支持客户在平台上实现应用全生命周期管理，包含设计、开发、测试、部署、迭代和运维等。&lt;/p>
&lt;h3 id="32-价值">
&lt;a href="#32-%e4%bb%b7%e5%80%bc">#&lt;/a>
3.2 价值
&lt;/h3>&lt;p>B端产品的价值体现，最关键的是降本、增效、创收这三方面。总结来说，目前aPaaS主要价值是帮助企业数字化初期快速探索和试错，以及数字化运营期间解决员工与业务、公司与客户的“最后一公里”问题。
而当aPaaS发展成熟后，能作为真正的创新先驱型产品时，aPaaS主要价值是深入并赋能企业全域全价值链的数字化，是企业研发的C位，而不仅局限于打辅助。具体的价值如下，这些价值足以值得继续投入发展：&lt;/p>
&lt;h4 id="321-降本">
&lt;a href="#321-%e9%99%8d%e6%9c%ac">#&lt;/a>
3.2.1 降本
&lt;/h4>&lt;p>降本要分析降的是什么本，只有弄清楚“是什么”，才能知道缺什么，下一步“如何做”。aPaaS的降本主要有几方面：&lt;/p>
&lt;p>&lt;strong>1）机会和试错成本&lt;/strong>&lt;/p>
&lt;p>企业在拓展市场、探索新业务时，需要不断选择机会、试错，直至发现正确道路。而aPaaS可以帮助企业最小化机会成本，降低试错成本。&lt;/p>
&lt;p>1.1）快速响应机会，快速试错，避免错失良机。由于aPaaS开发效率高，响应快、初期投入少（业务人员就可以配置），同样的资源可以响应更多机会、尝试更多次。&lt;/p>
&lt;p>1.2）量化验证、复盘分析。试错关键是量化验证、复盘、方向调整。即要知道是否错、错在哪、如何处理。aPaaS帮助企业自定义监测，量化业务效果。当发现效果不佳，复盘分析原因，然后调整执行方案、及时停止或选择其他机会。&lt;/p>
&lt;p>例如：企业通过aPaaS配置demo给客户验证，效果合适再重点投入。&lt;/p>
&lt;p>&lt;strong>2）时间成本&lt;/strong>&lt;/p>
&lt;p>aPaaS可以帮助企业降低项目实施的时间成本，包含从0到1，以及从1到优的迭代运维阶段的时间成本。&lt;/p>
&lt;p>&lt;strong>3）人力成本&lt;/strong>&lt;/p>
&lt;p>aPaaS可以帮助企业降低研发团队的人力成本。&lt;/p>
&lt;p>3.1）降低初期投入人力成本。数字化转型初期，企业可以使用业务人员或初级开发者探索和试错新机会。当新机会的商业模式跑通后，也明确知道想要什么时，企业可以再采用高代码重构平台。避免一开始就要维护高成本的专业IT团队。&lt;/p>
&lt;p>3.2）降低维持专业IT团队的人力成本。aPaaS可以帮助提高开发效率，且具备应用全生命周期管理。能在很长一段时间内，降低了全周期需要的专业程序员数量，也降低了程序员能力要求。&lt;/p>
&lt;p>SaaS也可以降低人力成本，区别在于aPaaS的个性化效率更高。（所以目前很多SaaS也增加aPaaS能力以弥补效率问题）&lt;/p>
&lt;p>&lt;strong>4）拓展成本&lt;/strong>&lt;/p>
&lt;p>aPaaS可以帮助企业降低软件的拓展成本。主要表现为：&lt;/p>
&lt;p>4.1）降低系统迭代成本。企业可以通过aPaaS对系统进行修改优化，减少定制外包的拓展成本。&lt;/p>
&lt;p>4.2）降低构建生态成本。企业如果存在老旧系统，在采购新系统时，就需要支付集成拓展成本，以便让新系统融合老旧系统。或者需要与其他企业的系统协作时，也需要支付集成拓展成本。而aPaaS可以帮助企业降低连接新老系统的集成拓展成本、企业内外生态的集成拓展成本。&lt;/p>
&lt;h4 id="322-增效">
&lt;a href="#322-%e5%a2%9e%e6%95%88">#&lt;/a>
3.2.2 增效
&lt;/h4>&lt;p>&lt;strong>1）研发效率&lt;/strong>&lt;/p>
&lt;p>1.1）提高全生命周期的研发效率。产品发展成熟后，aPaaS不仅仅提升开发效率，更可以提高企业的设计、测试、部署、迭代和运维阶段的工作效率。&lt;/p>
&lt;p>1.2）提高业务与开发的沟通效率。业务人员可以通过aPaaS可以深度参与应用搭建，这种圆桌式开发可以帮助团队保持共识。&lt;/p>
&lt;p>&lt;strong>2）业务工作效率&lt;/strong>&lt;/p>
&lt;p>除了数字化带来的工作效率提升，aPaaS主要提高了一线员工的业务工作效率。&lt;/p>
&lt;p>2.1）快速满足员工与业务“最后一公里”。一线员工在处理业务时会产生大量优化小需求。这些多变、简单、个性化、长尾需求可以说是员工与业务的“最后一公里”。一般情况下，企业自身的IT团队、SaaS供应商或外包无法快速响应。企业的实施团队或一线员工通过aPaaS搭建各种微应用快速满足需求。&lt;/p>
&lt;p>2.2）提高跨公司业务协同效率。aPaaS通过iPaaS能与其他企业建立生态关系，以便跨租户跨公司进行业务协同。&lt;/p>
&lt;p>&lt;strong>3）服务效率&lt;/strong>&lt;/p>
&lt;p>在服务客户过程中，客户也会产生大量优化需求，也就是员工与客户的“最后一公里”。这种需求也可以通过aPaaS快速解决，从而提高服务效率。&lt;/p>
&lt;p>&lt;strong>4）决策效率&lt;/strong>&lt;/p>
&lt;p>数字化与信息化的最大区别在于数字化可以闭环，从数据产生、数据流转到数据分析与决策，让数据真正活起来。aPaaS通过构建企业生态环境，采集并治理企业内外系统数据，满足企业个性化的BI需求，可以最大程度帮助企业提高决策效率。&lt;/p>
&lt;h4 id="323-创收">
&lt;a href="#323-%e5%88%9b%e6%94%b6">#&lt;/a>
3.2.3 创收
&lt;/h4>&lt;p>&lt;strong>1）直接收入&lt;/strong>&lt;/p>
&lt;p>企业利用aPaaS的产出得到的收入就是直接收入。例如，aPaaS供应商卖aPaaS给企业，企业再使用aPaaS开发应用，然后将应用卖给客户。
适用于外包、ISV，以及将软件作为增值服务的企业。例如，客户购买了设备，可以同时购买设备管理平台。&lt;/p>
&lt;p>&lt;strong>2）间接收入&lt;/strong>&lt;/p>
&lt;p>aPaaS不仅仅是一个工具平台，更是一套数字化变革方案。这种方案会让企业变革工作模式、管理模式、商业模式等。企业利用aPaaS完成数字化转型、升级，最终找到新的增长曲线。这种收入就是间接收入。&lt;/p>
&lt;h2 id="4-产品发展">
&lt;a href="#4-%e4%ba%a7%e5%93%81%e5%8f%91%e5%b1%95">#&lt;/a>
4. 产品发展
&lt;/h2>&lt;p>aPaaS发展主要有两个方向：易用性、功能性。也就是多快好省，提高软件全生命周期的ROI。这两个方向的发展具体表现以下几个方面：&lt;/p>
&lt;h3 id="41-apaas本质">
&lt;a href="#41-apaas%e6%9c%ac%e8%b4%a8">#&lt;/a>
4.1 aPaaS本质
&lt;/h3>&lt;p>新时代是数据时代，数据就是信息，而提取信息里的规律就能预测未来，把控个人和企业的未来发展。aPaaS的本质是方便普通人对数据的生命周期管控，包括数据产生、收集、管理、分析、流转。也就是aPaaS是普通人在数据时代的车票，避免被时代抛弃。&lt;/p>
&lt;h3 id="41-全域化">
&lt;a href="#41-%e5%85%a8%e5%9f%9f%e5%8c%96">#&lt;/a>
4.1 全域化
&lt;/h3>&lt;p>&lt;strong>1）概念&lt;/strong>&lt;/p>
&lt;p>全域化有两种方向：数据全价值链、软件全生命周期。数据全价值链是指aPaaS能帮助企业高效使用数据资产，包括数据产生、收集、管理和利用等环节。软件全生命周期是指从需求、设计、开发、测试、部署、迭代和运维的全流程都可以在aPaaS上完成。&lt;/p>
&lt;p>&lt;strong>2）趋势原因&lt;/strong>&lt;/p>
&lt;p>2.1）降低体系复杂度。整体降低软件次要复杂度，而非只降低单一环节，提高与纯代码研发的竞争力。&lt;/p>
&lt;p>2.2）高效全面协同。全面云上一体化，让业务、产品、设计、研发、测试和运维等团队能跨时间、跨空间高效协同。&lt;/p>
&lt;p>&lt;strong>3）方案想法&lt;/strong>&lt;/p>
&lt;p>详见5.2章节：应用全生命周期管理。&lt;/p>
&lt;h3 id="42-智能化">
&lt;a href="#42-%e6%99%ba%e8%83%bd%e5%8c%96">#&lt;/a>
4.2 智能化
&lt;/h3>&lt;p>&lt;strong>1）概念&lt;/strong>&lt;/p>
&lt;p>智能化就是aPaaS+AI，旨在用AI帮助用户快速上手，提高实施人员的配置效率，提高应用的使用效率，以及帮助企业优化业务。&lt;/p>
&lt;p>&lt;strong>2）趋势原因&lt;/strong>&lt;/p>
&lt;p>2.1）追求易用性是基本目标。从机器语言到汇编语言，从汇编语言到高级语言，人类从未停止对编程易用性的追求。而AI是否能降低编程门槛，正在积极探索中。但希望很大，正如AI绘画让更多没有绘画基础的用户能产出不错的画作。&lt;/p>
&lt;p>2.2）提高效率。智能化可以让用户更快地配置应用，而且能让人真正从标准、重复枯燥的工作中解放。&lt;/p>
&lt;p>2.3）赋能业务。AI可以帮助企业更全面、深入、持久地审视数据，发现优化点，真正赋能业务。&lt;/p>
&lt;p>&lt;strong>3）方案想法&lt;/strong>&lt;/p>
&lt;p>&lt;strong>3.0）本质思考&lt;/strong>&lt;/p>
&lt;p>利用AI拓展“适用场景的范围”，也就是：允许无规则输入，转化为有规则的输出&lt;/p>
&lt;p>&lt;strong>第一阶段：限制有规则的输入。&lt;/strong> 让用户先自己理解完，再输入。这一步如果无法实现，直接跳到第二步很难。&lt;/p>
&lt;p>例如：要销售手动填线索单、或者让采购手动填采购明细单。又例如：自动生成JS事件，用户用特定语句输入，系统后台自动转化为脚本。&lt;/p>
&lt;p>&lt;strong>第二阶段：利用AI的理解能力，扩展输入范围。&lt;/strong> 也就是把“让用户理解”的任务交给AI。&lt;/p>
&lt;p>例如：销售直接自然语言描述，AI理解后自动对应规则字段。或者采购给出原始的采购明细单，AI理解自动对应标准字段。又例如：用户用自然语言输入，系统就能生成相应脚本。&lt;/p>
&lt;p>&lt;strong>3.1）AI辅助配置&lt;/strong>&lt;/p>
&lt;p>AI自动生成模块、应用、BI图表还在探索阶段。以下是我的想法：&lt;/p>
&lt;p>a）在aPaaS自带的原型平台上画原型和流程图，然后AI直接根据原型生成数据模型、页面及其事件动、流程等内容。（如果是单纯的CRUD页面，不用AI也能生成了）&lt;/p>
&lt;p>b）约定好PRD格式规范和语句规范，AI根据PRD自动生成数据模型、页面及其事件动作、流程、API等内容。或者参考figma，设计专门的PRD功能，边写PRD边生成。&lt;/p>
&lt;p>c）终极目标是自然语言编程。AI根据业务人员的自然语言直接生成模块或BI图表。&lt;/p>
&lt;p>&lt;strong>3.2）AI辅助使用&lt;/strong>&lt;/p>
&lt;p>AI辅助用户使用配置平台或应用，使工作更有效率。&lt;/p>
&lt;p>例如，参考ChatGPT，通过对话可以生成相关代码。那AI的应用场景可能是：通过与AI对话，生成所需代码，直接粘贴到配置页面就可完成复杂功能配置。&lt;/p>
&lt;p>或者，AI根据客户需求智能推荐字段，避免业务人员一无所措。&lt;/p>
&lt;p>又例如，在移动端上，用户直接文字或语音询问系统某个功能，或者查询某条数据。或者通过问答对话形式生成临时BI图表。&lt;/p>
&lt;p>&lt;strong>3.3）AI辅助业务优化&lt;/strong>&lt;/p>
&lt;p>通过流程挖掘技术，AI可以帮助企业定位业务流转的“堵点”，以便企业针对性地优化调整业务方案（包含业务执行方案、aPaaS配置改动等）。&lt;/p>
&lt;h3 id="43-垂直化">
&lt;a href="#43-%e5%9e%82%e7%9b%b4%e5%8c%96">#&lt;/a>
4.3 垂直化
&lt;/h3>&lt;p>&lt;strong>1）概念&lt;/strong>&lt;/p>
&lt;p>垂直化是指aPaaS为细分行业客户提供特有功能模块或解决方案。但垂直化并不意味着停止发展通用化，为了更好的ROI和更大的市场，追求一种“协议”通用是很正常的，详见4.4章节的专业化。&lt;/p>
&lt;p>&lt;strong>2）趋势原因&lt;/strong>&lt;/p>
&lt;p>2.1）行业经验是B端产品的有效且牢固的产品壁垒，也是重要的差异化。&lt;/p>
&lt;p>2.2）针对垂直行业的抽象封装会更为准确，能满足客户的核心需求，而非停留在通用层次。&lt;/p>
&lt;p>2.3）功能性深入发展的具体表现。越垂直，越深入，这种时候，垂直化模块会成为一个“库”，不但aPaaS能用，专业研发体系也能用。&lt;/p>
&lt;p>&lt;strong>3）方案想法&lt;/strong>&lt;/p>
&lt;p>&lt;strong>3.1）官方或ISV提供垂直化模块和解决方案&lt;/strong>&lt;/p>
&lt;p>官方或ISV在aPaaS的生态市场上提供垂直化物料，包含组件、连接器等。以及提供垂直化解决方案，包含应用模板、工作流程、完整方案文档等。&lt;/p>
&lt;p>例如针对物联网领域，aPaaS可以提供iot物料（物模型、告警引擎、iot连接器等）、组态可视化、售后知识图谱等行业模块。&lt;/p>
&lt;h3 id="44-专业化">
&lt;a href="#44-%e4%b8%93%e4%b8%9a%e5%8c%96">#&lt;/a>
4.4 专业化
&lt;/h3>&lt;p>&lt;strong>1）概念&lt;/strong>&lt;/p>
&lt;p>专业化是指让零代码、低代码要更加专业，能真正降低复杂度，而不是玩具。要能与专业的编程语言相比较，真正具备新一代编程语言风范。而非简单的拖拉拽可视化编程，低代码并不low。例如要有自己的思想内核、有体系、有规范。&lt;/p>
&lt;p>&lt;strong>2）趋势原因&lt;/strong>&lt;/p>
&lt;p>2.1）专业化才能真正提高易用性，降低学习门槛。专业地抽象封装，才能有效降低复杂度。&lt;/p>
&lt;p>2.2）专业的语言才能研发出专业的软件，真正解决需求，而不是研发出一个玩具。&lt;/p>
&lt;p>&lt;strong>3）方案想法&lt;/strong>&lt;/p>
&lt;p>&lt;strong>3.1）零代码是业务语言编程的DSL&lt;/strong>
对于业务人员，如果要重新学习程序思维和程序知识，那零代码的使用难度还是太高。&lt;/p>
&lt;p>所以我的想法是，零代码应该是一种以业务思维为核心，以业务语言进行声明式编程的DSL。也就是从业务侧出发，将代码逻辑封装成具体的业务语言模块，再设计可视化交互。与中文编程易语言比较，零代码只能面向特定领域，灵活性更低但更易用。&lt;/p>
&lt;p>具体表现为通过可视化编排，告诉系统在某个业务的每一步工作内容，然后交由系统解析执行。&lt;/p>
&lt;p>未来，更进一步就是自然语言的AI编程了。&lt;/p>
&lt;p>例子：用户不用按代码那样写循环，只需要告诉系统要对哪些数据做什么内容。例如将某些数据里符合条件的数据的状态字段改为1，系统会自动解析执行循环。&lt;/p>
&lt;p>&lt;strong>3.2）低代码未来方向仍在探索中&lt;/strong>
低代码主要面向开发者（包含程序员、实施人员），仍然是程序思维。现阶段低代码是将代码语言可视化的DSL。可视化的实体能降低抽象思维能力，帮助用户更易理解、沟通和编排。同时，可视化一定程度上降低了门槛，让初级开发者能越级承担部分高级工作。&lt;/p>
&lt;p>可视化是现阶段低代码DSL的解决思路，但绝不是未来。因为从功能性出发，最有效的复用是引用库，库实际上就是一种低代码。而从易用性出发，就必须明白现在的代码有什么困难之处，才能将困难封装起来，形成一门新的dsl，甚至通用编程语言。这需要非常深入的研究，例如当初java的诞生就是因为c++不能跨平台。&lt;/p>
&lt;p>低代码的未来仍值得继续深入研究。&lt;/p>
&lt;h3 id="45-生态化">
&lt;a href="#45-%e7%94%9f%e6%80%81%e5%8c%96">#&lt;/a>
4.5 生态化
&lt;/h3>&lt;p>&lt;strong>1）概念&lt;/strong>&lt;/p>
&lt;p>生态化是指aPaaS覆盖或连接企业管理全域、业务全价值链，帮助企业构建内外统一的数字化生态。&lt;/p>
&lt;p>&lt;strong>2）趋势原因&lt;/strong>&lt;/p>
&lt;p>2.1）aPaaS需要内循环，才能有效赋能企业生态建设。&lt;/p>
&lt;p>2.2）互联互通是数字化基本要求。生态化可以帮助企业打破内外数据孤岛。&lt;/p>
&lt;p>2.3）当产业链上的企业们共同完成数字化转型升级，企业的效益才能最大化。&lt;/p>
&lt;p>&lt;strong>3）方案想法&lt;/strong>&lt;/p>
&lt;p>&lt;strong>3.1）aPaaS自身内循环生态&lt;/strong>&lt;/p>
&lt;p>构建应用模板生态、物料生态，尽可能覆盖更多场景，提高用户配置效率。&lt;/p>
&lt;p>&lt;strong>3.2）企业内外生态（产业链生态 / 价值链生态）&lt;/strong>&lt;/p>
&lt;p>通过跨平台（web、APP、小程序等）+iPaaS+跨租户业务协同等功能，打通企业内部各系统、企业外部各系统。同时，通过BI功能，帮助企业分析内外生态数据，辅助决策，形成闭环。&lt;/p>
&lt;h3 id="46-兼容化">
&lt;a href="#46-%e5%85%bc%e5%ae%b9%e5%8c%96">#&lt;/a>
4.6 兼容化
&lt;/h3>&lt;p>&lt;strong>1）概念&lt;/strong>&lt;/p>
&lt;p>兼容化是指零代码研发体系、低代码研发体系、高代码研发体系相互兼容，三者混合研发。&lt;/p>
&lt;p>&lt;strong>2）趋势原因&lt;/strong>&lt;/p>
&lt;p>2.1）三者互补，保障项目交付，保障应用生命周期正常。零代码、低代码作为DSL，必然存在不适用的领域。零代码、低代码、高代码三者互补，可以保证满足业务需求，保障项目的交付以及后续迭代运维。&lt;/p>
&lt;p>2.2）体系建设和拓展成本低。兼容化可以让aPaaS与当前专业研发体系无缝融合，无缝兼容旧物料，避免重复解决问题。&lt;/p>
&lt;p>2.3）资源价值最大化。让业务人员、初级开发者、高级开发者做符合能力的工作，共同为同一产品付出。&lt;/p>
&lt;p>2.4）保障生态统一。企业数字化要求互联互通，统一管理生态。三者兼容可以让企业内外的系统更易对接。&lt;/p>
&lt;p>&lt;strong>3）方案想法&lt;/strong>&lt;/p>
&lt;p>&lt;strong>3.1）零代码（no code）与低代码（low code）&lt;/strong>&lt;/p>
&lt;p>同一平台的零代码、低代码，底层可以都是模型驱动。这样保证底层逻辑相同，天然地支持互相调用。只是零代码与低代码的抽象角度不同，配置逻辑和交互有所不同。&lt;/p>
&lt;p>&lt;strong>3.2）低代码（low code）与高代码（pro code）&lt;/strong>&lt;/p>
&lt;p>低代码与高代码相互兼容有几种形式：&lt;/p>
&lt;p>a）物料+微服务&lt;/p>
&lt;p>在aPaaS上，高代码可以利用云IDE或本地IDE研发物料或者微服务，实现即插即用。&lt;/p>
&lt;p>配置的物料与高代码物料支持相互调用。最终共同发布到同一服务器。物料一般包含前端组件、区块、页面、后端插件等。&lt;/p>
&lt;p>b）在线代码拓展（内嵌）&lt;/p>
&lt;p>直接在aPaaS上编写代码，实现复杂功能。例如，页面配置时，没有合适的动作事件，就可以通过代码形式实现。或者配置API时，可以调用代码块节点实现复杂逻辑。&lt;/p>
&lt;p>c）code-in &amp;amp; code-out&lt;/p>
&lt;p>支持输入源码（主要是组件源码），然后在aPaaS上将源码可视化，允许用户拖拉拽配置。&lt;/p>
&lt;p>支持输出源码，有两种方向：开发环境输出代码，相当于代码生成器，缺点是二开后不可逆。&lt;/p>
&lt;p>另一种方向是在服务端实时生成源码，即不经过解析引擎解析，直接以源码运行。&lt;/p>
&lt;h2 id="5-部分模块简析">
&lt;a href="#5-%e9%83%a8%e5%88%86%e6%a8%a1%e5%9d%97%e7%ae%80%e6%9e%90">#&lt;/a>
5. 部分模块简析
&lt;/h2>&lt;h3 id="51-概述">
&lt;a href="#51-%e6%a6%82%e8%bf%b0">#&lt;/a>
5.1 概述
&lt;/h3>&lt;p>在aPaaS项目里，产品经理的主要职责是抽象业务场景和软件开发过程，并输出功能模块的业务逻辑和交互设计。产品经理可以不会代码编程，但要知道编程有什么输入输出。例如，告诉技术要开发哪些组件，每个组件的配置属性、交互怎么样。&lt;/p>
&lt;p>我的主要设计方法论是：IPO模型（输入-处理-输出）+数据流转路径。
数据只有流转起来，系统才是活的，输入输出要考虑上下游。同时，用拆分思维从上往下、或从下往上分析对象每层的IPO。&lt;/p>
&lt;p>1）输入。输入什么、输入从哪里来、什么时候输入、如何更容易更快更准确地输入等5w2h问题。一般来说，需要结合业务场景和软件技术，封装设计时才知道要对外提供哪些输入，可以隐藏哪些细节（隐藏细节不代表不做，而是做好不给改）。&lt;/p>
&lt;p>2）输出。输出什么、如何更快更准确地展示输出、输出到哪里、什么时候等5w2h问题。&lt;/p>
&lt;p>3）处理。即如何实现输入向输出转化。根据拆分层次，越靠近底层，代码思维会越多。拆到最底层时，就是研发封装处理逻辑的代码。&lt;/p>
&lt;p>而在业务项目里，产品经理主要是抽象业务场景，并输出设计。这种思维与零代码是一致的，产品经理输出的PRD，就像一份声明式编程，告诉程序员要做什么，然后程序员解析如何实现。&lt;/p>
&lt;h3 id="52-应用全生命周期管理">
&lt;a href="#52-%e5%ba%94%e7%94%a8%e5%85%a8%e7%94%9f%e5%91%bd%e5%91%a8%e6%9c%9f%e7%ae%a1%e7%90%86">#&lt;/a>
5.2 应用全生命周期管理
&lt;/h3>&lt;p>应用全生命周期管理是支持软件的设计、开发、测试、部署、迭代、运维的一体化服务管理能力。也是全栈化的核心模块。&lt;/p>
&lt;p>&lt;strong>1）设计&lt;/strong>&lt;/p>
&lt;p>1.1）战略设计-领域建模&lt;/p>
&lt;p>领域模型是表达业务实体及其逻辑的一种统一语言。领域建模就是构建业务领域，以及领域内的业务实体、业务行为、业务关系。是一种业务抽象的具象化表现。&lt;/p>
&lt;p>后续开发阶段，数据建模时就可以根据领域建模构建ER图，然后构建数据表。&lt;/p>
&lt;p>对于简单的系统，可以直接跳过战略设计。对于复杂系统，零代码、低代码都可以使用领域建模进行战略设计，然后再搭建应用。目前，领域建模还是文档资料，承担沟通、辅助理解等作用，尚未完全与其他阶段融合一体化。&lt;/p>
&lt;p>1.2）产品战术设计-思维导图、原型、流程图、UI图、PRD等
具体落地设计的文档主要支持本地上传和在线浏览。开始智能化后，在线画原型或在线PRD将会成为关键。&lt;/p>
&lt;p>&lt;strong>2）开发&lt;/strong>&lt;/p>
&lt;p>目前aPaaS配置的应用可以采用三层架构：表现层、业务逻辑层（BLL/service）、数据访问层（DAL/DAO），对应的主要模块是页面-API和流程-数据建模。而在对于表现层页面，前端可以采用MVC或MVVM架构。&lt;/p>
&lt;p>对于零代码的业务语言编程，实际上只有页面-工作流（API逻辑和流程逻辑混合）。&lt;/p>
&lt;p>未来可能会有更符合零代码、低代码的架构出现。例如DDD架构（领域驱动设计）就很有潜力。&lt;/p>
&lt;p>&lt;strong>3）测试&lt;/strong>&lt;/p>
&lt;p>3.1）沙箱环境&lt;/p>
&lt;p>提供沙箱环境给用户测试配置应用。用户配置应用后，直接点击“预览”即可进入沙箱环境调试应用。&lt;/p>
&lt;p>同时，支持将部分生产数据同步到沙盒环境，以便更好地测试。&lt;/p>
&lt;p>3.2）自动化测试&lt;/p>
&lt;p>UI自动化测试：利用RPA配置页面自动化测试用例。&lt;/p>
&lt;p>API自动化测试：与API模块结合，为每个API配置用例（输入、比较值），同时配置用例执行规则。&lt;/p>
&lt;p>测试日志：查看自动化测试用例执行结果。&lt;/p>
&lt;p>3.3）在线调试&lt;/p>
&lt;p>在线实时地输入模拟参数，系统输出模拟参数，观察出参是否期望结果。可以用于流程仿真、逻辑仿真、脚本调试、连接器调试等地方。这些场景本质上就是入参和出参。&lt;/p>
&lt;p>&lt;strong>4）部署&lt;/strong>&lt;/p>
&lt;p>部署主要分为初次部署和升级部署。应用初次发布/部署是相对简单的。而升级部署需要考虑变更内容对生产数据的影响。例如提供升级差异比较功能，展示所有影响条目。&lt;/p>
&lt;p>同时，应用还可以支持独立部署，即单独作为一个系统使用，而不依赖于应用平台入口。&lt;/p>
&lt;p>&lt;strong>5）迭代和运维&lt;/strong>&lt;/p>
&lt;p>5.1）版本管理。管理应用版本，支持版本对比。最好支持回滚，但由于涉及数据问题，没有很好的封装方案。除了应用版本，对于数据建模、页面、API、流程、连接器等功能模块都需要版本管理。&lt;/p>
&lt;p>5.2）引用关系。引用关系是在建模、页面、API、连接器等模块里，支持查看各元素的引用关系，包含引用了哪些数据表、API、节点参数等。例如当修改某个字段/API时，可以快速定位所有引用地点，确保功能修改完整。&lt;/p>
&lt;p>5.3）日志管理。管理前端组件、后端API、连接器、集成流等各种模块的运行日志。日志可以具体到各个节点的出入参，方便开发和运维定位问题点。&lt;/p>
&lt;p>5.4）源码。支持输出应用的源码，方便二开。但这种目前做不到可逆，即还无法做到从源码转换回aPaaS的配置。&lt;/p>
&lt;p>5.5）管理基础设施。管理数据库、各种服务器等底层基础设施。&lt;/p>
&lt;p>5.6）运维监控。可以通过埋点采集、BI和iPaaS等模块，进行自定义运维监控。&lt;/p>
&lt;h3 id="53-数据建模">
&lt;a href="#53-%e6%95%b0%e6%8d%ae%e5%bb%ba%e6%a8%a1">#&lt;/a>
5.3 数据建模
&lt;/h3>&lt;p>数据建模本质是抽象业务实体及其数据特征，构建数据表以及表之间的关系。可视化表现为ER建模或普通表格式建模。如果已经存在领域模型，也可以直接根据领域构建数据模型。&lt;/p>
&lt;p>模块设计：&lt;/p>
&lt;p>&lt;strong>1）输入&lt;/strong>&lt;/p>
&lt;p>输入什么：表关系、字段（普通字段、引用字段、外键字段、动态字段、系统内置字段）、索引等内容。细化一层，需要设计每种字段的输入（各种约束属性）、输出（数据表表头字段）&lt;/p>
&lt;p>输入方式：手动新建，或者批量导入。&lt;/p>
&lt;p>&lt;strong>2）输出&lt;/strong>&lt;/p>
&lt;p>输出什么：数据表&lt;/p>
&lt;p>输出怎样用：根据架构，需要定义DAO层服务以访问数据库。（通过配置定义DAO层服务，又是另一个输入输出了）&lt;/p>
&lt;p>输出用到哪里：通过引用关系功能，可以查看该字段被哪个页面、API等模块使用。&lt;/p>
&lt;p>&lt;strong>3）处理&lt;/strong>&lt;/p>
&lt;p>将字段表和DAO层配置转化为数据表以及封装的DAO层服务。&lt;/p>
&lt;p>对于零代码，业务人员不需要关心这种底层，只需要构建页面（表单页面建模或者多维表格建模）。保存页面后，页面的字段会自动转化为数据模型。&lt;/p>
&lt;p>如果低代码要调用零代码的数据模型，可以进一步管理DAO层服务。&lt;/p>
&lt;h3 id="53-页面设计">
&lt;a href="#53-%e9%a1%b5%e9%9d%a2%e8%ae%be%e8%ae%a1">#&lt;/a>
5.3 页面设计
&lt;/h3>&lt;p>B端产品的页面本质是根据场景，让用户高效输入数据，经过前后端处理后，将输出数据以合适的形式展示出来。&lt;/p>
&lt;p>页面设计是前端编排的重要模块。页面的主要设计架构是MVC或MVVM。与MVC的区别在于MVC是页面与前端模型单向绑定，而MVVM是双向绑定（页面与前端模型自动同步，可以更快地响应）。&lt;/p>
&lt;p>模块设计：&lt;/p>
&lt;p>&lt;strong>1）输入&lt;/strong>&lt;/p>
&lt;p>输入什么：将组件拼装。细化到组件层，根据业务场景和架构，可以抽象出多个组件及其属性，而组件属性主要有几种大类：前端模型（M）、展示样式和布局（V）、业务逻辑（VM，包含动作事件、自动填充等逻辑）。&lt;/p>
&lt;p>如何输入：手动拖拉拽前端模型的字段或空白组件字段，或者导入Excel自动生成&lt;/p>
&lt;p>&lt;strong>2）输出&lt;/strong>&lt;/p>
&lt;p>输出什么：应用页面。对于零代码，还会输出数据模型（属于间接输出，因为只是触发生成）&lt;/p>
&lt;p>输出如何展示：支持配置不同页面形态展示输出。例如表格、思维导图、甘特图、看板等形态。&lt;/p>
&lt;p>输出会用到哪里：页面可以与菜单绑定、被事件调用展示，或者通过分享功能对外公开等。&lt;/p>
&lt;p>&lt;strong>3）处理&lt;/strong>&lt;/p>
&lt;p>将解析代码封装成引擎，将用户的配置解析渲染为真正的应用页面。&lt;/p>
&lt;h3 id="55-流程编排bpm">
&lt;a href="#55-%e6%b5%81%e7%a8%8b%e7%bc%96%e6%8e%92bpm">#&lt;/a>
5.5 流程编排（BPM）
&lt;/h3>&lt;p>流程（BPM）的本质是：人为规定的有序工作路径，规定每一步由 “谁（who）” 在 “什么时候（when）” 、“什么场景（where）” 应该 “做什么事（what）”，“怎样做（how）”。&lt;/p>
&lt;p>对于低代码，流程编排是以只对业务流进行编排（一般称为审批流），不包含API。而对于零代码，流程编排实际上是工作流编排，融合了流程和API。&lt;/p>
&lt;p>对于流程，我采用从下往上的封装方法。从业务场景抽象出本质，分析流程细节，然后根据常用的业务场景和BPM规范封装一层，就可以得到具体的流程节点。流程细节如下：&lt;/p>
&lt;p>&lt;strong>1）有序工作路径&lt;/strong>&lt;/p>
&lt;p>路径有开始、有结束、有流转方向、也有分支。具体可封装成开始、结束、判断、分离/合并等路径控制节点。&lt;/p>
&lt;p>&lt;strong>2）谁&lt;/strong>&lt;/p>
&lt;p>当前步骤/节点的任务由谁去做。所以需要选择对象。对于低代码，一般对象范围是企业内外的用户（技术思维，流程与API是两个东西，不混在一起编排）。对于零代码，对象范围是用户或系统（业务思维，人做或系统做都是业务工作流的一部分）。&lt;/p>
&lt;p>选择用户对象的方法：从组织架构树选择企业内部或外部的具体用户、选择某个群体（角色、用户标签、部门等）、表达式计算（通过参数计算当前节点）、关系链（通过组织关系链找到具体用户，例如流程发起人的部门经理）。&lt;/p>
&lt;p>表达式和关系链实际上都是让系统自动计算出用户，免得用户手动选择执行人，使用体验更好。&lt;/p>
&lt;p>&lt;strong>3）什么时候&lt;/strong>&lt;/p>
&lt;p>当前步骤/节点的任务在什么时候要做。具体可表现为定时做（周期/非周期）、即时做&lt;/p>
&lt;p>&lt;strong>4）什么场景&lt;/strong>&lt;/p>
&lt;p>当前步骤/节点的任务环境是怎样的，包含在哪里做、场景限制。具体可表现为：流入/流出限制（符合条件的数据才能流入或流出）、页面环境（页面关联、字段权限。在哪个页面上操作控制能看到/操作页面的哪些字段）等。&lt;/p>
&lt;p>&lt;strong>5）做什么事&lt;/strong>&lt;/p>
&lt;p>当前步骤/节点的具体任务是什么，或者要执行什么行为。具体可表现为：填表、审批、调用子流程、调用API、发送消息、发送事件等行为。&lt;/p>
&lt;p>&lt;strong>6）怎样做&lt;/strong>&lt;/p>
&lt;p>当前步骤/节点的行为规则。具体可表现为会签规则、自动审批规则、催办规则等。&lt;/p>
&lt;p>封装例子：&lt;/p>
&lt;p>1）业务场景有审批，封装的审批节点就会限定部分元素，不给修改。例如限定分支路径只有通过/拒绝两条、限定审批规则（下拉选择，不能自定义）、限定必须做审批行为（要关联相应审批页面）&lt;/p>
&lt;h3 id="56-逻辑编排api工作流">
&lt;a href="#56-%e9%80%bb%e8%be%91%e7%bc%96%e6%8e%92api%e5%b7%a5%e4%bd%9c%e6%b5%81">#&lt;/a>
5.6 逻辑编排（API/工作流）
&lt;/h3>&lt;p>对使用者来说，API是封装好函数逻辑的黑匣子，输入入参，得到出参。在aPaaS配置层面，API的本质是一种封装好的满足特定需求的逻辑处理流模块。与流程类似，API也是一种人为规定的有序路径，也有各种要素。主要区别为API是对代码逻辑的可视化，而流程是对业务过程的可视化。&lt;/p>
&lt;p>模块设计：&lt;/p>
&lt;p>逻辑编排是以技术思维抽象程序语法，将其可视化为节点。然后，根据业务场景，抽象分析常用的代码情况，将其可视化为节点。节点包含节点样式（布局、样式）、节点属性配置（主要是节点出入参配置）。同时，为了兼容高代码，也支持代码模式开发。&lt;/p>
&lt;p>逻辑编排的可视化表现形式有多种，目前aPaaS主流可视化形式是类似流程的节点路径图（执行树）。而在传统开发里，时序图是API最常见的可视化建模形式。&lt;/p>
&lt;p>1）可视化代码的基本语法。例如判断、循环、变量定义、捕捉处理异常、请求函数等语法。&lt;/p>
&lt;p>2）可视化常见场景。例如调用DAO层服务、数据结构转换、协议转换、动态SQL、调用脚本等。&lt;/p>
&lt;p>3）连接iPaaS和物料中心。例如调用ipaaS封装的连接器，调用物料中心的插件等。&lt;/p>
&lt;p>4）调试和运维。手动调试、自动调试、引用关系、版本管理、运行日志等功能模块。&lt;/p>
&lt;p>限于篇幅，具体节点的IPO模型就不展开详聊。&lt;/p>
&lt;h3 id="57-组织架构">
&lt;a href="#57-%e7%bb%84%e7%bb%87%e6%9e%b6%e6%9e%84">#&lt;/a>
5.7 组织架构
&lt;/h3>&lt;p>平台的组织架构是体现企业的内部组织关系（公司部门等）、外部企业关系（产业链上下游）的数字孪生。&lt;/p>
&lt;p>因此，一个租户里，可以分为内部架构和外部架构。&lt;/p>
&lt;p>内部架构要支持多公司，例如大型集团有总部、子公司和分公司。且多公司之间支持业务协同。&lt;/p>
&lt;p>外部架构里，由于不同租户可能使用不同产品，所以除了要支持同产品的跨租户业务协同，还需要支持不同产品的跨租户协同（主要通过iPaaS）。&lt;/p>
&lt;p>同时，可以在平台的基础属性上，个性化组织架构的附属属性，更符合真实情况。例如，为部门设置专门的个性化属性（如一个部门有多种职责负责人）。&lt;/p>
&lt;h3 id="58-权限">
&lt;a href="#58-%e6%9d%83%e9%99%90">#&lt;/a>
5.8 权限
&lt;/h3>&lt;p>权限体系是企业精细化管理、数据安全的重要模块。B端产品里，权限与企业规定有关，往往与组织及其角色/身份绑定，也可以直接与用户绑定。&lt;/p>
&lt;p>权限主要有以下3种：&lt;/p>
&lt;p>1）功能权限（菜单权限、页面权限、按钮权限）&lt;/p>
&lt;p>功能权限是前端控制用户能看到哪个菜单、页面、按钮。&lt;/p>
&lt;p>2）数据权限（行权限、列权限、字段权限）&lt;/p>
&lt;p>数据权限是前端控制用户能看到哪些字段/字段数据。行权限和列权限主要针对列表页面，而字段权限主要针对表单页面。&lt;/p>
&lt;p>3）API权限&lt;/p>
&lt;p>API权限是后端控制用户能访问哪些API。这是数据权限的加强版，避免用户修改传参，强制调用API导致数据安全问题。&lt;/p>
&lt;h3 id="59-跨平台">
&lt;a href="#59-%e8%b7%a8%e5%b9%b3%e5%8f%b0">#&lt;/a>
5.9 跨平台
&lt;/h3>&lt;p>跨平台是指aPaaS能产出web、APP、小程序等终端的应用，且多端支持数据互通。&lt;/p>
&lt;p>主要有两种玩法：&lt;/p>
&lt;p>&lt;strong>1）一次配置，多端共用&lt;/strong>&lt;/p>
&lt;p>以web端配置为主，自动生成移动端的样式。而且需要兼容不同厂商的APP（IOS、Android、鸿蒙）、小程序（钉钉、飞书、企微）。&lt;/p>
&lt;p>移动端主要作为所有微应用和微BI的入口，进入应用内部后，各个模块的功能逻辑与web端一致。&lt;/p>
&lt;p>&lt;strong>2）多端各自配置&lt;/strong>&lt;/p>
&lt;p>web端、APP、小程序的页面和交互在各自的设计器里配置，但仍然共用后端逻辑。主要适用于移动端对交互要求较高的领域。&lt;/p>
&lt;h3 id="510-集成和开放ipaas">
&lt;a href="#510-%e9%9b%86%e6%88%90%e5%92%8c%e5%bc%80%e6%94%beipaas">#&lt;/a>
5.10 集成和开放（iPaaS）
&lt;/h3>&lt;p>iPaaS的本质是本系统主动或被动地与企业内外的其他系统相互进行数据交流。iPaaS是打通企业内外系统，连接企业全域全价值链场景、解决数据孤岛的重要利器。主要分为集成、开放两部分：&lt;/p>
&lt;p>&lt;strong>1）集成&lt;/strong>&lt;/p>
&lt;p>集成是本系统访问或操作其他系统的数据和功能。基本模块是连接器和集成流。连接器是一个封装了某个库/系统的功能的组件，使用者不需要关心如何对接系统，直接根据业务选择合适操作调用即可。而集成流是可视化的数据逻辑处理流，可以根据场景自动处理跨系统交流任务。&lt;/p>
&lt;p>&lt;strong>2）开放&lt;/strong>&lt;/p>
&lt;p>本系统的API开放给其他系统，允许其他系统访问和操作本系统的数据和功能。除了官方直接通过代码提供开放API（主要是一些系统内置功能，例如组织架构基础信息），也可以与逻辑编排融合，允许用户自定义开放API。相当于把本系统封装成一个连接器，开放给其他租户的同产品，或不同产品。&lt;/p>
&lt;p>&lt;strong>模块设计：&lt;/strong>&lt;/p>
&lt;p>1）连接器&lt;/p>
&lt;p>抽象系统对接的业务场景，可以将连接器拆分为6个模块：基本信息、授权配置、操作配置、调试、文档、运维管理。&lt;/p>
&lt;p>1.1）授权配置。配置授权方式、授权参数等内容。&lt;/p>
&lt;p>1.2）操作配置。管理封装对象所有支持的操作，每个操作都是一个逻辑处理流（可复用逻辑编排功能，也支持代码编程）。例如获取授权出参（如token）、增删改查对接系统的数据、订阅对方系统事件等。&lt;/p>
&lt;p>1.3）调试。测试连接器是否双方都畅通。&lt;/p>
&lt;p>1.4）文档。根据授权和操作模块自动输出对接文档。&lt;/p>
&lt;p>1.5）运维管理。连接器的版本管理、引用关系、日志管理等运维功能。&lt;/p>
&lt;p>同时，为了方便客户快速调用，官方一般需要提前对接好国内各大软件，通过生态市场提供给客户。例如钉钉、飞书、企微、用友、金蝶等软件。&lt;/p>
&lt;p>2）集成流&lt;/p>
&lt;p>集成流可以看做触发器+逻辑编排，区别在于集成流非常适合管理需要在后台长时间运行的任务，而API编排主要管理即时任务。例如从其他系统的数据库里同步数据到本平台就是长任务。&lt;/p>
&lt;h3 id="511-数据可视化bi">
&lt;a href="#511-%e6%95%b0%e6%8d%ae%e5%8f%af%e8%a7%86%e5%8c%96bi">#&lt;/a>
5.11 数据可视化（BI）
&lt;/h3>&lt;p>BI的本质是根据场景，将隐形的原始数据转化成显性的具有参考价值的信息，且以恰当方式展示出来，为不同用户提供数据依据和决策支持。
在aPaaS上的BI有个优势：aPaaS可以集成并统一管理企业全域全价值链的数据，并支持用户灵活自助地使用BI辅助决策。&lt;/p>
&lt;p>&lt;strong>模块设计：&lt;/strong>&lt;/p>
&lt;p>1）数据集成。“输入从哪里来”。通过iPaaS集成本平台、跨平台、跨公司的所有数据源，包含API、数据库（mysql、MongoDB）、静态数据等多种格式的数据源。&lt;/p>
&lt;p>2）数据清洗。“输入限制”，配置规则清洗“脏数据”，得到符合BI输入限制的数据。&lt;/p>
&lt;p>3）可视化配置。“BI处理”。对于整体BI配置，主要处理整个BI图表的输入问题。例如什么时候输入和如何输入，可以通过websocket通道实时输入、或者定时调用API。&lt;/p>
&lt;p>再拆一层，就是各个图元配置的IPO了。例如，输入内容是数据源（本平台模型数据、API、外部平台数据源）和图表要素配置（指标维度、数据权限、动作事件、样式等）。为了更快输入，可以提前为每个模型设计好指标模板，方便直接引用。&lt;/p>
&lt;p>4）使用BI。“输出什么、输出到哪里”。最终输出大屏、看板、组态或传统报表等展示给用户查看，可以独立页面展示或嵌入其他页面展示。&lt;/p>
&lt;h3 id="512-其他">
&lt;a href="#512-%e5%85%b6%e4%bb%96">#&lt;/a>
5.12 其他
&lt;/h3>&lt;p>aPaaS还有很多重要模块，例如物料中心（前后端组件、区块、用户自定义模板等）、RPA、事件、定时任务、打印模板等。但限于篇幅，暂且不表。&lt;/p>
&lt;h2 id="6-浅谈运营">
&lt;a href="#6-%e6%b5%85%e8%b0%88%e8%bf%90%e8%90%a5">#&lt;/a>
6. 浅谈运营
&lt;/h2>&lt;h3 id="61-运营方式">
&lt;a href="#61-%e8%bf%90%e8%90%a5%e6%96%b9%e5%bc%8f">#&lt;/a>
6.1 运营方式
&lt;/h3>&lt;p>目前aPaaS业界内主要有两种运营方式：&lt;/p>
&lt;p>&lt;strong>1）纯定制项目+实施团队&lt;/strong>&lt;/p>
&lt;p>公司组织实施团队，将aPaaS作为公司的开发工具，实施定制项目并交付给客户。这里的aPaaS可以是公司自研或采购的。&lt;/p>
&lt;p>还有一种情况也会采用该方式：公司自研的aPaaS还不足以作为产品推向市场，但为了更快得到落地经验，进而反哺迭代。这种玩法有时也派人到客户那里驻场，根据客户需求随时调整配置。同时，为了减少成本，实施团队会大量雇佣实习生。&lt;/p>
&lt;p>&lt;strong>2）订阅制+增值服务&lt;/strong>&lt;/p>
&lt;p>公司提供不同套餐版本以供客户订阅或私有化部署，然后提供插件市场、模板市场、专家顾问、定制等增值服务。整体玩法与SaaS相似。&lt;/p>
&lt;h3 id="62-浅谈增长">
&lt;a href="#62-%e6%b5%85%e8%b0%88%e5%a2%9e%e9%95%bf">#&lt;/a>
6.2 浅谈增长
&lt;/h3>&lt;p>运营的本质是降低交易成本，提高交易效率。现阶段，对于想单独推向市场的aPaaS，我认为比较适合采用AARRR模型进行用户增长分析。前提是保证产品与市场匹配，否则产品即使到达了客户也会被抛弃。&lt;/p>
&lt;p>&lt;strong>1）拉新（Acquisition）：小灯塔&lt;/strong>&lt;/p>
&lt;p>拉新主要解决拉谁，怎么拉的问题。&lt;/p>
&lt;p>正如上面所说，aPaaS主要面向有数字化转型、升级需求的客户。针对不同层次的用户需要用不同的解决方案和拉新渠道。&lt;/p>
&lt;p>目前拉新最重要的两种渠道是：企业通讯与办公工具（飞书/钉钉/企业微信）引流、客户相互推荐。除此之外招投标、地推、广告也是常见的方式。&lt;/p>
&lt;p>我认为，目前最好的广告是成为国家推荐的样本。国家背书让客户采购选型成本更低：工信部、财政部的“小灯塔”数字化转型样本项目。
两部门关于开展财政支持中小企业数字化转型试点工作的通知&lt;/p>
&lt;p>&lt;strong>2）激活（Activation）：免费基础版+专人引导+模板生态&lt;/strong>&lt;/p>
&lt;p>开箱即用、永久免费的基础版可降低客户的注册成本。&lt;/p>
&lt;p>注册后，为了降低客户初次使用的学习成本和迷茫感，需要帮助客户解决第一个问题，让其迅速体验到数字化的效果。公司可派专人服务引导新客户，
调研客户当前问题，帮助客户寻找和安装合适的应用模板或指导使用，让客户产生第一条数据，完成激活。&lt;/p>
&lt;p>&lt;strong>3）留存（Retention）：打铁还需自身硬&lt;/strong>&lt;/p>
&lt;p>留存关键是aPaaS能真正解决客户问题，有效地实现产品价值。&lt;/p>
&lt;p>&lt;strong>4）转化（Revenue）：基础版+按需付费+自主试用&lt;/strong>&lt;/p>
&lt;p>目前主流的订阅是区分不同套餐，每个套餐包含不同功能和不同基础设施。但我认为，在使用初期，客户不清楚每个功能的作用，也不知道自己未来是否会用到某个功能。如果强行推销高级版套餐，由于客户并不用到某个属性/节点，客户心理可能抵抗采购，也就提高了客户的交易成本。这种玩法非常容易变成价格战。&lt;/p>
&lt;p>我的想法是：类比以前IaaS将硬件基础设施拆分，以及现在serverless热潮，那aPaaS是否可以将功能模块拆分，允许客户按需采购呢？或者直接根据功能使用情况按需付费。例如，客户用不到API的复杂节点，那就不收费。很少使用时，按调用次数收费。如果要频繁使用，允许单独买断功能项。&lt;/p>
&lt;p>同时，我比较赞同简道云的试用玩法，由客户自己决定什么时候领取高级功能使用机会。而不是注册后直接开启高级试用，避免客户连基础版功能都尚未掌握，就被迫浪费高级试用机会。&lt;/p>
&lt;p>&lt;strong>5）传播（Referral）：生态化&lt;/strong>&lt;/p>
&lt;p>B端产品传播在于客户之间的相互推荐。例如某次政府组织的分享会、以及熟人推荐。除了产品自身口碑好，我认为还可以通过生态化让客户进一步主动传播。客户为了进一步提高效率，有概率把产品分享给产业链上下游，以实现跨租户协同处理业务。&lt;/p></description></item><item><title>探索分布式锁：实践记录与经验分享</title><link>https://xiuwei.github.io/p/exploring-distributed-locks/</link><pubDate>Thu, 04 Aug 2022 21:00:00 +0000</pubDate><guid>https://xiuwei.github.io/p/exploring-distributed-locks/</guid><description>&lt;img src="https://xiuwei.github.io/p/exploring-distributed-locks/cover.jpg" alt="Featured image of post 探索分布式锁：实践记录与经验分享" />&lt;h2 id="引言">
&lt;a href="#%e5%bc%95%e8%a8%80">#&lt;/a>
引言
&lt;/h2>&lt;p>在分布式系统中，多个节点同时访问共享资源可能导致数据一致性和并发控制的问题。分布式锁作为一种常见的解决方案，在这种情况下发挥着重要作用。&lt;/p>
&lt;p>分布式锁是一种用于协调分布式系统中多个节点对共享资源的访问的机制。在分布式系统中，我们通常会遇到多个节点同时访问共享资源的情况，而分布式锁可以确保在任何时刻只有一个节点能够获得对共享资源的访问权。&lt;/p>
&lt;p>&lt;img src="https://xiuwei.github.io/p/exploring-distributed-locks/image.png"
width="1200"
height="588"
srcset="https://xiuwei.github.io/p/exploring-distributed-locks/image_hu9a4e55343920d02dfe91cea8f3bceb08_93151_480x0_resize_box_3.png 480w, https://xiuwei.github.io/p/exploring-distributed-locks/image_hu9a4e55343920d02dfe91cea8f3bceb08_93151_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="分布式锁示意图"
class="gallery-image"
data-flex-grow="204"
data-flex-basis="489px"
>&lt;/p>
&lt;h2 id="实现方式">
&lt;a href="#%e5%ae%9e%e7%8e%b0%e6%96%b9%e5%bc%8f">#&lt;/a>
实现方式
&lt;/h2>&lt;p>分布式锁的实现可以基于不同的技术和存储介质，包括基于数据库的实现、基于缓存的实现、基于分布式协调服务（如ZooKeeper）的实现等。每种实现方式都有其特点和适用场景，需要根据具体的业务需求和系统架构选择合适的实现方式。&lt;/p>
&lt;p>设计分布式锁的时候，一般要遵循这几个要求：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>互斥&lt;/strong> ，有且只有一个进程能拿到锁且解锁的操作只能由加锁的进程执行（A拿到的锁不能让B释放）&lt;/li>
&lt;li>&lt;strong>超时机制&lt;/strong> ，拿到锁的进程必须在规定时间内解锁（不然其他进程会一直阻塞）&lt;/li>
&lt;li>&lt;strong>机会平等&lt;/strong> ，保持其他等待进程获取锁的机会是平等的（先到先得等思路）&lt;/li>
&lt;li>&lt;strong>可重入&lt;/strong> ，同一个进程加的锁可以再次获得或者释放对应的锁&lt;/li>
&lt;/ul>
&lt;p>总的来讲，这把锁一定是放在外部存储介质上，根据存储介质的不同，笔者根据自己的实践总结出以下几个方法实现方案：MySQL、Redis、强一致性算法。&lt;/p>
&lt;h3 id="mysql">
&lt;a href="#mysql">#&lt;/a>
MySQL
&lt;/h3>&lt;p>这种方式主要是用到了表的功能，毕竟 MySQL 的核心就是对表的操作嘛。具体的实现方式：&lt;/p>
&lt;ul>
&lt;li>创建一张表，用以存储锁。设置表中的一列为唯一索引来作为排他性&lt;/li>
&lt;li>获取锁时在数据库中添加一条记录&lt;/li>
&lt;li>释放锁的时删除添加的那条记录&lt;/li>
&lt;/ul>
&lt;p>这是常规的用数据库表来实现分布式锁的步骤，不过很明显有两个严重缺陷：没有超时设置、没有重入。解决超时设置和重入问题也不是不行，代价挺高的。比如：&lt;/p>
&lt;ul>
&lt;li>用 select **** for update，来解决超时设置问题&lt;/li>
&lt;li>用 version 这种乐观锁的方式来解决重入问题&lt;/li>
&lt;/ul>
&lt;p>上面的解决方案加重了业务逻辑，况且性能不高（for update 可能会触发表锁等，version 的方式是为每一把锁都建立一张表），还有就是单点故障。所以，这种方案一般不会在生产中使用，这里拿来就是当个比较。&lt;/p>
&lt;h3 id="redis">
&lt;a href="#redis">#&lt;/a>
Redis
&lt;/h3>&lt;p>既然 MySQL 的 方式有单点故障、性能等问题，那我们可以使用缓存数据库。最典型的就是 Redis 了。具体实现方式如下：&lt;/p>
&lt;ul>
&lt;li>用 SETEX key seconds value 命令设置锁（这是个原子命令，seconds 是时间，key 就是锁的名字）&lt;/li>
&lt;li>释放锁的时候直接 删除 key 的方式（如果删除操作也要确保原子特性的话，可采用 lua 脚本的方式）&lt;/li>
&lt;/ul>
&lt;p>这种实现方式有几个缺陷：&lt;/p>
&lt;ul>
&lt;li>单点故障。虽然 Redis 有主从方式备份，但是主从方式是异步的。客户端1 在主上加锁成功，但是主挂了。从变成主之后还没来得及同步客户端1 的加锁操作，客户端2 在新的主上又加锁成功。导致两个客户端同时加了锁。&lt;/li>
&lt;li>超时异常。客户端1 加锁成功，但是阻塞了。超时后客户端2 又拿到锁。这一个锁下有两个进程（一个阻塞、一个正常）可能引发线程安全问题&lt;/li>
&lt;li>时钟漂移。客户端的时间比 redis 的时间晚了，会导致锁提前释放。&lt;/li>
&lt;/ul>
&lt;p>有鉴于此，有了个 RedLock 的方案，大体过程如下：&lt;/p>
&lt;ul>
&lt;li>首先，redis 是多点部署的，不存在主从、集群协调之类，就是实实在在的多个 master 的 redis 进程
客户端获取时间戳。&lt;/li>
&lt;li>使用同一个key和具有唯一值的value依次从 redis 的服务器上尝试获取锁（假设这里有 5 台 redis）&lt;/li>
&lt;li>因为连接redis 是需要时间的，所以这个 key 的时间应当减去连接 redis 的耗时&lt;/li>
&lt;li>当成功获取锁的个数超过 redis 服务器总数的半数以上，即可认为加锁成功（比如5台，获取了3台就算成功）&lt;/li>
&lt;li>如果因为某些原因获取失败，对所有 redis 服务器进行删除锁的操作（防止加锁成功但获取响应失败）&lt;/li>
&lt;/ul>
&lt;p>总的来说，其实就是讲第一种方案做了个分布式的操作作为保障……但，这个也是有隐患的：&lt;/p>
&lt;ul>
&lt;li>客户端1 在5 台 redis 服务器上正确获取到了三台（假设 A、B、C、D、E五台，获取到了A、B、C三台），加锁成功，但是C挂了触发了C的主从切换。这与此同时 客户端2 又在 C、D、E 获取锁成功。&lt;/li>
&lt;li>网络连接的耗时决定了锁的有效时间&lt;/li>
&lt;/ul>
&lt;p>所以，任何一种方案都有缺陷和优点，看取舍了。选择了 redis 作为分布式锁，就是看中了其性能好的方面。但是终归不是强一致性的方案。需要在业务层面保障了，比如设置幂等操作等。&lt;/p>
&lt;h3 id="强一致性算法">
&lt;a href="#%e5%bc%ba%e4%b8%80%e8%87%b4%e6%80%a7%e7%ae%97%e6%b3%95">#&lt;/a>
强一致性算法
&lt;/h3>&lt;p>Redis 的分布式锁方案最根本的隐患总结一句话就是存储锁的这个状态在节点之间（主从之间）并不能达成强一致。自然而然的就能想到基于强一致性算法的实现。这里以 etcd 为例谈谈实践方式。&lt;/p>
&lt;p>首先 etcd 是一个基于 KEY-VALUE 的分布式一致性的存储系统，主要用来服务发现和共享配置。这里我们利用的就是利用 KEY-VALUE 的建立、获取来实现分布式锁。&lt;/p>
&lt;ul>
&lt;li>利用 etcd 的 prefix 机制，让多个抢锁的进程（也就是 etcd 的客户端了）建立前缀相同、名称不同的 key。通过比较每个 key 的 revison 的大小来决定哪个先抢到的锁&lt;/li>
&lt;li>利用 etcd 的 lease 机制设置 key 的超时时间。当然，这个 key 可以续约&lt;/li>
&lt;li>利用 etcd 的 watch 机制来监听锁的释放&lt;/li>
&lt;/ul>
&lt;p>上述是常规的用 etcd 机制实现分布式锁的方案，其实 etcd 很贴心的为我们提供了一个叫 concurrency 的包来给我们是用，原理上就是对上述的业务逻辑进行了封装，拿来用即可。&lt;/p>
&lt;h2 id="方案选择">
&lt;a href="#%e6%96%b9%e6%a1%88%e9%80%89%e6%8b%a9">#&lt;/a>
方案选择
&lt;/h2>&lt;p>上述几个方案在不同的业务需求下可以有不同的选择，在选择的时候考虑的无非就是从性能、可用方面去考虑。那我们这里针对几种方案进行对比。&lt;/p>
&lt;h3 id="权衡利弊">
&lt;a href="#%e6%9d%83%e8%a1%a1%e5%88%a9%e5%bc%8a">#&lt;/a>
权衡利弊
&lt;/h3>&lt;p>针对性能、可用性方面的总结如下：&lt;/p>
&lt;ul>
&lt;li>MySQL 方式性能低、可用性差，几乎不作为生产的选择，一般作为分布式锁的入门理解&lt;/li>
&lt;li>Redis 方式性能高，但有状态不一致的隐患。如果生产上可以配置一些幂等操作的辅助，但代码复杂度就高了&lt;/li>
&lt;li>强一致性算法方式性能比 Redis 低，但因为基于状态强一致性算法的原因，其可用性高。&lt;/li>
&lt;/ul>
&lt;p>所以，追求高性能场景，可以选取 Redis 方式。追求高可用的场景，选取强一致性算法方式。&lt;/p>
&lt;h3 id="思考">
&lt;a href="#%e6%80%9d%e8%80%83">#&lt;/a>
思考
&lt;/h3>&lt;p>一般情况下，系统的可用性越高，其性能就越低。因为可用性方面我们需要考虑的地方就多了，必然带来一定的复杂度，其性能必然下降。&lt;/p>
&lt;p>分布式锁作为一个基础组建，个人认为应该更关心的是可用性方面，毕竟都用到锁了，那说明资源的竞态已经是重中之重，能提高可用性就尽量提高。所以，生产上个人倾向于强一致性方面的实现，比如 etcd 或者 zookeeper 方式等。&lt;/p>
&lt;h2 id="参考资料">
&lt;a href="#%e5%8f%82%e8%80%83%e8%b5%84%e6%96%99">#&lt;/a>
参考资料
&lt;/h2>&lt;p>&lt;a class="link" href="https://redis.io/docs/manual/patterns/distributed-locks/" target="_blank" rel="noopener"
>Distributed Locks with Redis&lt;/a>
&lt;a class="link" href="https://github.com/etcd-io/etcd/tree/v3.4.9/clientv3/concurrency" target="_blank" rel="noopener"
>etcd concurrency&lt;/a>
&lt;a class="link" href="https://medium.com/@bb8s/design-distributed-lock-with-mysql-9bc28ac59629" target="_blank" rel="noopener"
>Design distributed lock with MySQL&lt;/a>&lt;/p></description></item><item><title>RxJava API 与 Java 9 Flow API 的区别</title><link>https://xiuwei.github.io/p/rxjava-vs-java-flow/</link><pubDate>Sun, 12 Dec 2021 18:00:00 +0000</pubDate><guid>https://xiuwei.github.io/p/rxjava-vs-java-flow/</guid><description>&lt;img src="https://xiuwei.github.io/p/rxjava-vs-java-flow/cover.jpg" alt="Featured image of post RxJava API 与 Java 9 Flow API 的区别" />&lt;h2 id="1概述">
&lt;a href="#1%e6%a6%82%e8%bf%b0">#&lt;/a>
1.概述
&lt;/h2>&lt;p>Java Flow API 是在 Java 9 中作为 Reactive Stream 规范的实现引入的。&lt;/p>
&lt;p>在这篇文章里，我们首先介绍响应式流，然后介绍它与RxJava和Flow API的关系。&lt;/p>
&lt;h2 id="2什么是-reactive-stream">
&lt;a href="#2%e4%bb%80%e4%b9%88%e6%98%af-reactive-stream">#&lt;/a>
2.什么是 Reactive Stream
&lt;/h2>&lt;p>&lt;a class="link" href="https://www.reactive-streams.org/" target="_blank" rel="noopener"
>Reactive Manifesto&lt;/a> 引入了 Reactive Streams 来指定具有非阻塞背压的异步流处理的标准。&lt;/p>
&lt;p>Reactive Stream 规范的范围是定义&lt;strong>一组最小的接口&lt;/strong>来实现这些目标：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>&lt;a class="link" href="http://www.reactive-streams.org/reactive-streams-1.0.0-javadoc/org/reactivestreams/Publisher.html" target="_blank" rel="noopener"
>org.reactivestreams.Publisher&lt;/a>&lt;/strong> 是一个数据提供者，根据订阅者的需求向订阅者发布数据&lt;/li>
&lt;li>&lt;strong>&lt;a class="link" href="http://www.reactive-streams.org/reactive-streams-1.0.0-javadoc/org/reactivestreams/Subscriber.html" target="_blank" rel="noopener"
>org.reactivestreams.Subscriber&lt;/a>&lt;/strong> 是数据的消费者——订阅发布者后可以接收数据&lt;/li>
&lt;li>&lt;strong>&lt;a class="link" href="http://www.reactive-streams.org/reactive-streams-1.0.0-javadoc/org/reactivestreams/Subscription.html" target="_blank" rel="noopener"
>org.reactivestreams.Subscription&lt;/a>&lt;/strong> 当发布者接受订阅者时创建&lt;/li>
&lt;li>&lt;strong>&lt;a class="link" href="http://www.reactive-streams.org/reactive-streams-1.0.0-javadoc/org/reactivestreams/Processor.html" target="_blank" rel="noopener"
>org.reactivestreams.Processor&lt;/a>&lt;/strong> 既是订阅者又是发布者 - 它订阅发布者，处理数据，然后将处理后的数据传递给订阅者&lt;/li>
&lt;/ul>
&lt;p>Flow API源自规范，RxJava早于它，但从2.0开始，RxJava也支持该规范。&lt;/p>
&lt;p>我们将深入探讨两者，但首先，让我们看一个实际用例。&lt;/p>
&lt;h2 id="3用例">
&lt;a href="#3%e7%94%a8%e4%be%8b">#&lt;/a>
3.用例
&lt;/h2>&lt;p>在本教程中，我们使用直播视频服务作为我们的用例。与点播视频流相反，直播视频流不依赖于消费者。因此，服务器以自己的速度发布流，而适应是消费者的责任。&lt;/p>
&lt;p>在最简单的形式中，我们的模型由一个视频流发布者和一个作为订阅者的视频播放器组成。&lt;/p>
&lt;p>让我们实现VideoFrame作为我们的数据项：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">class&lt;/span> &lt;span class="nc">VideoFrame&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="cm">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * 编号
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> */&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">private&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">long&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">number&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="cm">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * 视频数据
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> */&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">private&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">byte&lt;/span>&lt;span class="o">[]&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">VideoFrame&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">long&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">number&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">byte&lt;/span>&lt;span class="o">[]&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">number&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">number&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">data&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">VideoFrame&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">long&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">number&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">number&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">number&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">VideoFrame&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">long&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">getNumber&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">return&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">number&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">setNumber&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">long&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">number&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">number&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">number&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">byte&lt;/span>&lt;span class="o">[]&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">getData&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">return&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">setData&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">byte&lt;/span>&lt;span class="o">[]&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">data&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="4flow-api-的实现">
&lt;a href="#4flow-api-%e7%9a%84%e5%ae%9e%e7%8e%b0">#&lt;/a>
4.Flow API 的实现
&lt;/h2>&lt;p>JDK 9 中的 Flow API 对应于 Reactive Streams 规范。使用 Flow API，如果应用程序最初请求 N 个项目，则发布者最多将 N 个项目推送给订阅者。&lt;/p>
&lt;p>Flow API 接口均位于 java.util.concurrent.Flow 接口中。它们在语义上等同于各自的响应式流。&lt;/p>
&lt;p>让我们将 VideoStreamServer 作为 VideoFrame 的发布者。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">class&lt;/span> &lt;span class="nc">VideoStreamServer&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">extends&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">SubmissionPublisher&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">VideoFrame&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">VideoStreamServer&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">super&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Executors&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">newSingleThreadExecutor&lt;/span>&lt;span class="p">(),&lt;/span>&lt;span class="n">5&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>我们从 SubmissionPublisher 扩展了 VideoStreamServer ，而不是直接实现 Flow::Publisher。 SubmissionPublisher 是 Fl​​ow::Publisher 的 JDK 实现，用于与订阅者进行异步通信，因此它让我们的 VideoStreamServer 按照自己的速度发送。&lt;/p>
&lt;p>此外，它对于背压和缓冲区处理也很有帮助，因为当调用 SubmissionPublisher::subscribe 时，它​​会创建 BufferedSubscription 的实例，然后将新订阅添加到其订阅链中。 BufferedSubscription 可以缓冲已发布的项目，最高可达 SubmissionPublisher#maxBufferCapacity。&lt;/p>
&lt;p>现在让我们定义 VideoPlayer，它消耗 VideoFrame 流。因此它必须实现 Flow::Subscriber。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">class&lt;/span> &lt;span class="nc">VideoPlayer&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">implements&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Flow&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">Subscriber&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">VideoFrame&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">Flow&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">Subscription&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">subscription&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">null&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nd">@Override&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">onSubscribe&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Flow&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">Subscription&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">subscription&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">subscription&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">subscription&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">subscription&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">request&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">1&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nd">@Override&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">onNext&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">VideoFrame&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">item&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">System&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;播放 ： &amp;#34;&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">item&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">getNumber&lt;/span>&lt;span class="p">());&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">subscription&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">request&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">1&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nd">@Override&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">onError&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Throwable&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">throwable&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">throwable&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">printStackTrace&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nd">@Override&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">onComplete&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">System&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;播放完了！&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>VideoPlayer 订阅 VideoStreamServer ，订阅成功后调用 VideoPlayer::onSubscribe方法，请求一帧。 VideoPlayer::onNext 接收帧并请求新帧。请求的帧的数量取决于用例和订阅者实现。&lt;/p>
&lt;p>最后，我们把直播场景串起来：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="k">try&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">VideoStreamServer&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">streamServer&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">new&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">VideoStreamServer&lt;/span>&lt;span class="p">())&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">streamServer&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">subscribe&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">new&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">VideoPlayer&lt;/span>&lt;span class="p">());&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">ScheduledExecutorService&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">executorService&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Executors&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">newScheduledThreadPool&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">1&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">AtomicLong&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">frameNumber&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">new&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">AtomicLong&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">executorService&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">scheduleAtFixedRate&lt;/span>&lt;span class="p">(()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">streamServer&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">offer&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">new&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">VideoFrame&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">frameNumber&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">incrementAndGet&lt;/span>&lt;span class="p">()),(&lt;/span>&lt;span class="n">subscriber&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">videoFrame&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">subscriber&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">onError&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">new&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">RuntimeException&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Frame#： &amp;#34;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">videoFrame&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">getNumber&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s">&amp;#34; 因触发背压被丢弃！&amp;#34;&lt;/span>&lt;span class="p">));&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">return&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">});&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">},&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">TimeUnit&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">MILLISECONDS&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">Thread&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">sleep&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">3000&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">catch&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Exception&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">throw&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">new&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">RuntimeException&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="5使用-rxjava-实现">
&lt;a href="#5%e4%bd%bf%e7%94%a8-rxjava-%e5%ae%9e%e7%8e%b0">#&lt;/a>
5.使用 RxJava 实现
&lt;/h2>&lt;p>RxJava 是 ReactiveX 的 Java 实现。 ReactiveX（或 Reactive Extensions）项目旨在提供反应式编程概念。它是观察者模式、迭代器模式和函数式编程的组合。&lt;/p>
&lt;p>RxJava 的最新版本是 3.x。 RxJava 从 2.x 版本开始就支持 Reactive Streams 及其 Flowable 基类，但它比 Reactive Streams 更重要，它有几个基类，如 Flowable、Observable、Single、Completable。&lt;/p>
&lt;p>Flowable 从 Reactive Streams 扩展了 Publisher。因此，许多 RxJava 运算符直接接受 Publisher 并允许与其他 Reactive Streams 实现直接互操作。&lt;/p>
&lt;p>首先，创建一个无限延迟流的视频流生成器：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="n">Stream&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">VideoFrame&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">videoStream&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Stream&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">iterate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">new&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">VideoFrame&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">0&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">videoFrame&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">return&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">new&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">VideoFrame&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">videoFrame&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">getNumber&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">1&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">});&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>然后我们定义一个 Flowable 实例来在单独的线程上生成帧：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="n">Flowable&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">fromStream&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">videoStream&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">subscribeOn&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Schedulers&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">from&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Executors&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">newSingleThreadExecutor&lt;/span>&lt;span class="p">()))&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>需要注意的是，无限流对我们来说已经足够了，但是如果我们需要更灵活的方式来生成流，那么 Flowable.create 是一个不错的选择。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="n">Flowable&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">create&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">new&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">FlowableOnSubscribe&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">VideoFrame&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">AtomicLong&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">frame&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">new&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">AtomicLong&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nd">@Override&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">subscribe&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nd">@NonNull&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">FlowableEmitter&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">VideoFrame&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">emitter&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">while&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">emitter&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">onNext&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">new&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">VideoFrame&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">frame&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">incrementAndGet&lt;/span>&lt;span class="p">()));&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">//sleep for 1 ms to simualte delay&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">},&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="cm">/* Set Backpressure Strategy Here */&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>然后，在下一步中，VideoPlayer 订阅此 Flowable 并观察单独线程上的项目。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="n">videoFlowable&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">observeOn&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Schedulers&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">from&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Executors&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">newSingleThreadExecutor&lt;/span>&lt;span class="p">()))&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">subscribe&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">item&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">log&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">info&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;play #&amp;#34;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">item&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">getNumber&lt;/span>&lt;span class="p">());&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// sleep for 30 ms to simualate frame display&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">});&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>最后，我们将配置背压策略。如果我们想在帧丢失的情况下停止视频，因此我们必须在缓冲区已满时使用 BackPressureOverflowStrategy::ERROR。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="n">Flowable&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">fromStream&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">videoStream&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">subscribeOn&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Schedulers&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">from&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Executors&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">newSingleThreadExecutor&lt;/span>&lt;span class="p">()))&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">onBackpressureBuffer&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">5&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">null&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">BackpressureOverflowStrategy&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">ERROR&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">observeOn&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Schedulers&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">from&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Executors&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">newSingleThreadExecutor&lt;/span>&lt;span class="p">()))&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">subscribe&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">item&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">log&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">info&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;play #&amp;#34;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">item&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">getNumber&lt;/span>&lt;span class="p">());&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// sleep for 30 ms to simualate frame display &lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">});&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="6rxjava-和-flow-api-的比较">
&lt;a href="#6rxjava-%e5%92%8c-flow-api-%e7%9a%84%e6%af%94%e8%be%83">#&lt;/a>
6.RxJava 和 Flow API 的比较
&lt;/h2>&lt;p>即使在这两个简单的实现中，我们也可以看到 RxJava 的 API 是多么丰富，特别是在缓冲区管理、错误处理和反压策略方面。它以其流畅的 API 为我们提供了更多的选择和更少的代码行。现在让我们考虑更复杂的情况。&lt;/p>
&lt;p>假设我们的播放器在没有编解码器的情况下无法显示视频帧。因此，对于 Flow API，我们需要实现一个处理器来模拟编解码器并位于服务器和播放器之间。使用 RxJava，我们可以使用 Flowable::flatMap 或 Flowable::map 来完成。&lt;/p>
&lt;p>或者让我们想象一下，我们的播放器还将播放实时翻译音频，因此我们必须合并来自不同发布商的视频和音频流。有了RxJava，我们可以使用Flowable::combineLatest，但是有了Flow API，这并不是一件容易的事。&lt;/p>
&lt;p>尽管如此，可以编写一个自定义处理器来订阅两个流并将组合数据发送到我们的视频播放器。然而，实施起来却很令人头疼。&lt;/p>
&lt;h2 id="7为什么使用-flow-api">
&lt;a href="#7%e4%b8%ba%e4%bb%80%e4%b9%88%e4%bd%bf%e7%94%a8-flow-api">#&lt;/a>
7.为什么使用 Flow API？
&lt;/h2>&lt;p>说到这里，我们可能会有一个疑问，Flow API 背后的理念是什么？&lt;/p>
&lt;p>如果我们在JDK中搜索Flow API的用法，我们可以在java.net.http和jdk.internal.net.http中找到一些东西。&lt;/p>
&lt;p>此外，我们可以在reactor项目或 reactive stream 包中找到适配器。例如，org.reactivestreams.FlowAdapters 具有将 Flow API 接口转换为 Reactive Stream 接口的方法，反之亦然。因此，它有助于 Flow API 和具有反应式流支持的库之间的互操作性。&lt;/p>
&lt;p>&lt;strong>所有这些事实都有助于我们理解 Flow API 的目的：它被创建为 JDK 中的一组反应式规范接口，无需依赖第三方。&lt;/strong> 此外，Java 期望 Flow API 被接受为反应式规范的标准接口，并在 JDK 或其他为中间件和实用程序实现反应式规范的基于 Java 的库中使用。&lt;/p>
&lt;h2 id="参考资料">
&lt;a href="#%e5%8f%82%e8%80%83%e8%b5%84%e6%96%99">#&lt;/a>
参考资料
&lt;/h2>&lt;ul>
&lt;li>&lt;a class="link" href="https://www.baeldung.com/rxjava-vs-java-flow-api" target="_blank" rel="noopener"
>原文链接&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/eugenp/tutorials/tree/master/core-java-modules/core-java-9-new-features" target="_blank" rel="noopener"
>示例源码&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Java 9 Reactive Streams</title><link>https://xiuwei.github.io/p/java-9-reactive-streams/</link><pubDate>Sun, 12 Dec 2021 12:00:00 +0000</pubDate><guid>https://xiuwei.github.io/p/java-9-reactive-streams/</guid><description>&lt;img src="https://xiuwei.github.io/p/java-9-reactive-streams/cover.jpg" alt="Featured image of post Java 9 Reactive Streams" />&lt;h2 id="1概述">
&lt;a href="#1%e6%a6%82%e8%bf%b0">#&lt;/a>
1.概述
&lt;/h2>&lt;p>在本文中，我们将研究 Java 9 反应式流。简而言之，我们将能够使用 Flow 类，它包含用于构建反应式流处理逻辑的主要构建块。&lt;/p>
&lt;p>Reactive Streams 是具有非阻塞背压的异步流处理标准。该规范在 &lt;a class="link" href="http://www.reactive-streams.org/" target="_blank" rel="noopener"
>Reactive Manifesto&lt;/a> 中定义，并且有多种实现，例如 RxJava 或 Akka-Streams。&lt;/p>
&lt;h2 id="2reactive-api-概览">
&lt;a href="#2reactive-api-%e6%a6%82%e8%a7%88">#&lt;/a>
2.Reactive API 概览
&lt;/h2>&lt;p>为了构建 &lt;em>Flow&lt;/em> ，我们可以使用三个主要抽象并将它们组合成异步处理逻辑。&lt;/p>
&lt;p>&lt;strong>每个 &lt;em>Flow&lt;/em> 都需要处理 &lt;em>Publisher&lt;/em> 实例向其发布的事件；&lt;/strong> Publisher 有一种方法——subscribe()。&lt;/p>
&lt;p>&lt;strong>消息的接收者需要实现 &lt;em>Subscriber&lt;/em> 接口。&lt;/strong> 通常，这是每个流处理的结束，因为它的实例不会进一步发送消息。
我们可以将Subscriber 视为一个接收器。它有四个需要重写的方法 - &lt;em>onSubscribe()&lt;/em>、&lt;em>onNext()&lt;/em>、&lt;em>onError()&lt;/em> 和 &lt;em>onComplete()&lt;/em>。我们将在下一节中讨论这些内容。&lt;/p>
&lt;p>&lt;strong>如果我们想转换传入的消息并将其进一步传递给下一个&lt;em>Subscriber&lt;/em>，我们需要实现 &lt;em>Processor&lt;/em> 接口。&lt;/strong> 它既充当 Subscriber ，因为它接收消息，又充当 Publisher ，因为它处理这些消息并将其发送以进行进一步处理。&lt;/p>
&lt;h2 id="3发布和消费消息">
&lt;a href="#3%e5%8f%91%e5%b8%83%e5%92%8c%e6%b6%88%e8%b4%b9%e6%b6%88%e6%81%af">#&lt;/a>
3.发布和消费消息
&lt;/h2>&lt;p>假设我们要创建一个简单的 &lt;em>Flow&lt;/em>，其中一个发布消息的 &lt;em>Publisher&lt;/em> 和一个简单的 &lt;em>Subscriber&lt;/em> 在消息到达时消费消息 - 一次一个。&lt;/p>
&lt;p>让我们创建一个 &lt;em>EndSubscriber&lt;/em> 类。我们需要实现 &lt;em>Subscriber&lt;/em> 接口。接下来，我们将重写所需方法。&lt;/p>
&lt;p>&lt;em>onSubscribe()&lt;/em> 方法在处理开始之前调用。&lt;em>Subscription&lt;/em> (订阅)的实例作为参数传递。它是一个用于控制 &lt;em>Subscriber&lt;/em> 和 &lt;em>Publisher&lt;/em> 之间的消息流的类：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">class&lt;/span> &lt;span class="nc">MySubscriber&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">implements&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Flow&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">Subscriber&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">private&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Flow&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">Subscription&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">subscription&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">List&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">consumedElements&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">new&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">ArrayList&lt;/span>&lt;span class="o">&amp;lt;&amp;gt;&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nd">@Override&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">onSubscribe&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Flow&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">Subscription&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">subscription&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">subscription&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">subscription&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">subscription&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">request&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">1&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>我们还初始化了一个空的 ConsumerElements 列表，它将在测试中使用。&lt;/p>
&lt;p>现在，我们需要实现 Subscriber 接口的其余方法。这里的主要方法是 onNext() – 每当 Publisher 发布新消息时都会调用该方法：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="nd">@Override&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">onNext&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">item&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">System&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;接收到数据 ： &amp;#34;&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">item&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">consumedElements&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">item&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">subscription&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">request&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">1&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>请注意，当我们在 onSubscribe() 方法中启动订阅并处理消息时，我们需要调用订阅上的 request() 方法来表明当前 Subscriber 已准备好消费更多消息。&lt;/p>
&lt;p>最后，我们需要实现 onError() ——每当处理过程中抛出异常时就会调用它，以及 onComplete() ——当 Publisher 关闭时调用：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="nd">@Override&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">onError&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Throwable&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">throwable&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">throwable&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">printStackTrace&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nd">@Override&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">onComplete&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">System&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;MySubscriber Complete!&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>让我们为处理流程编写一个测试。我们将使用 SubmissionPublisher 类——一个来自 java.util.concurrent 的构造——它实现了
Publisher 接口。&lt;/p>
&lt;p>我们将向 Publisher 提交 N 个元素——我们的最终 Subscriber 将收到这些元素：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="nd">@Test&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">whenSubscribeToIt_thenShouldConsumeAll&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">throws&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">InterruptedException&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">SubmissionPublisher&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">publisher&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">new&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">SubmissionPublisher&lt;/span>&lt;span class="o">&amp;lt;&amp;gt;&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">MySubscriber&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">subscriber&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">new&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">MySubscriber&lt;/span>&lt;span class="o">&amp;lt;&amp;gt;&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">publisher&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">subscribe&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">subscriber&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">List&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">items&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">List&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">of&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;1&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s">&amp;#34;x&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s">&amp;#34;2&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s">&amp;#34;x&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s">&amp;#34;3&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s">&amp;#34;x&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">assertEquals&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">publisher&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">getNumberOfSubscribers&lt;/span>&lt;span class="p">());&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">items&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">forEach&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">publisher&lt;/span>&lt;span class="p">::&lt;/span>&lt;span class="n">submit&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">publisher&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">close&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">await&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="na">atMost&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">1000&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">TimeUnit&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">MILLISECONDS&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">until&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">subscriber&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">consumedElements&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">size&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">==&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">items&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">size&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>请注意，我们正在 EndSubscriber 实例上调用 close() 方法。它将在给定Publisher 的每个 Subscriber 上调用下面的 onComplete() 回调。&lt;/p>
&lt;p>运行该程序将产生以下输出：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">接收到数据 ： &lt;span class="m">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">接收到数据 ： x
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">接收到数据 ： &lt;span class="m">2&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">接收到数据 ： x
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">接收到数据 ： &lt;span class="m">3&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">接收到数据 ： x
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">MySubscriber Complete!
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="4消息的转换">
&lt;a href="#4%e6%b6%88%e6%81%af%e7%9a%84%e8%bd%ac%e6%8d%a2">#&lt;/a>
4.消息的转换
&lt;/h2>&lt;p>假设我们想要在 Publisher 和 Subscriber 之间构建类似的逻辑，但也应用一些消息转换。&lt;/p>
&lt;p>我们将创建实现 Processor 并扩展 SubmissionPublisher 的 TransformProcessor 类 - 这将同时是 Publisher 和 Subscriber。&lt;/p>
&lt;p>我们将传入一个将输入转换为输出的 &lt;code>Function&lt;/code>（函数）：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">class&lt;/span> &lt;span class="nc">TransformProcessor&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">R&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">extends&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">SubmissionPublisher&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">R&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">implements&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Flow&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">Processor&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">R&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">private&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">final&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Function&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">R&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">function&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">private&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Flow&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">Subscription&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">subscription&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">TransformProcessor&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Function&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">R&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">function&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">super&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">function&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">function&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nd">@Override&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">onSubscribe&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Flow&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">Subscription&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">subscription&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">subscription&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">subscription&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">subscription&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">request&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">1&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nd">@Override&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">onNext&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">item&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">submit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">function&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">apply&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">item&lt;/span>&lt;span class="p">));&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">subscription&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">request&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">1&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nd">@Override&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">onError&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Throwable&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">t&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">t&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">printStackTrace&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nd">@Override&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">onComplete&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">close&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>我们快速编写一个将 Publisher 发送的 String 元素转换为 Integer 元素的单元测试：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="nd">@Test&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">whenSubscribeAndTransformElements_thenShouldConsumeAll&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">throws&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">InterruptedException&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">SubmissionPublisher&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">publisher&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">new&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">SubmissionPublisher&lt;/span>&lt;span class="o">&amp;lt;&amp;gt;&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">TransformProcessor&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Integer&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">transformProcessor&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">new&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">TransformProcessor&lt;/span>&lt;span class="o">&amp;lt;&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Integer&lt;/span>&lt;span class="p">::&lt;/span>&lt;span class="n">parseInt&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">MySubscriber&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Integer&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">subscriber&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">new&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">MySubscriber&lt;/span>&lt;span class="o">&amp;lt;&amp;gt;&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">List&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">items&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">List&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">of&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;1&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s">&amp;#34;2&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s">&amp;#34;3&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">List&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Integer&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">expectedResult&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">List&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">of&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">3&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">publisher&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">subscribe&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">transformProcessor&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">transformProcessor&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">subscribe&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">subscriber&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">items&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">forEach&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">publisher&lt;/span>&lt;span class="p">::&lt;/span>&lt;span class="n">submit&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">publisher&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">close&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">await&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="na">atMost&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">1000&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">TimeUnit&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">MILLISECONDS&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">until&lt;/span>&lt;span class="p">(()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">assertIterableEquals&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">expectedResult&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">subscriber&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">consumedElements&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">return&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">subscriber&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">consumedElements&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">size&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">==&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">expectedResult&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">size&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>请注意，调用基础 Publisher 上的 close() 方法将导致调用 TransformProcessor 上的 onComplete() 方法。&lt;/p>
&lt;p>请记住，处理链中的所有 Publisher 都需要以这种方式关闭。&lt;/p>
&lt;h2 id="5使用-subscription-控制消息取值">
&lt;a href="#5%e4%bd%bf%e7%94%a8-subscription-%e6%8e%a7%e5%88%b6%e6%b6%88%e6%81%af%e5%8f%96%e5%80%bc">#&lt;/a>
5.使用 Subscription 控制消息取值
&lt;/h2>&lt;p>假设我们只想使用 Subscription 中的第一个元素，应用一些逻辑并完成处理。我们可以使用 request() 方法来实现这一点。&lt;/p>
&lt;p>让我们修改 MySubscriber 以仅消耗 N 条消息。我们将该数字作为 howMuchMessagesConsume 的构造函数参数进行传递：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">class&lt;/span> &lt;span class="nc">MySubscriber&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">implements&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Flow&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">Subscriber&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">private&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Flow&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">Subscription&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">subscription&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">private&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">final&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">AtomicInteger&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">howMuchMessagesConsume&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">List&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">consumedElements&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">new&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">ArrayList&lt;/span>&lt;span class="o">&amp;lt;&amp;gt;&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">MySubscriber&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Integer&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">howMuchMessagesConsume&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">howMuchMessagesConsume&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">new&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">AtomicInteger&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">howMuchMessagesConsume&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nd">@Override&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">onSubscribe&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Flow&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">Subscription&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">subscription&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">subscription&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">subscription&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">subscription&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">request&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">1&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nd">@Override&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">onNext&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">item&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">howMuchMessagesConsume&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">decrementAndGet&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">System&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;接收到数据 ： &amp;#34;&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">item&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">if&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">howMuchMessagesConsume&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">get&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">==&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">0&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">consumedElements&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">item&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">subscription&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">request&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">1&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nd">@Override&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">onError&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Throwable&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">throwable&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">throwable&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">printStackTrace&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nd">@Override&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">onComplete&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">System&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;MySubscriber Complete!&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>编写单元测试，实现只使用 Subscription 中的第一个元素：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="nd">@Test&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">whenRequestForOnlyOneElement_thenShouldConsumeOne&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">throws&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">InterruptedException&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">SubmissionPublisher&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">publisher&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">new&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">SubmissionPublisher&lt;/span>&lt;span class="o">&amp;lt;&amp;gt;&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">MySubscriber&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">subscriber&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">new&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">MySubscriber&lt;/span>&lt;span class="o">&amp;lt;&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">1&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">publisher&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">subscribe&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">subscriber&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">List&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">items&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">List&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">of&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;1&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s">&amp;#34;x&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s">&amp;#34;2&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s">&amp;#34;x&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s">&amp;#34;3&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s">&amp;#34;x&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">List&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">expected&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">List&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">of&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;1&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">assertEquals&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">publisher&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">getNumberOfSubscribers&lt;/span>&lt;span class="p">());&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">items&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">forEach&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">publisher&lt;/span>&lt;span class="p">::&lt;/span>&lt;span class="n">submit&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">publisher&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">close&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">await&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="na">atMost&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">1000&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">TimeUnit&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">MILLISECONDS&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">until&lt;/span>&lt;span class="p">(()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">assertIterableEquals&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">expected&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">subscriber&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">consumedElements&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">return&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">expected&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">size&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">==&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">subscriber&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">consumedElements&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">size&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>尽管 Publisher 正在发布六个元素，但我们的 MySubscriber 将仅消耗一个元素，因为它发出只处理该单个元素的信号。&lt;/p>
&lt;p>通过在 Subscriber 上使用 request() 方法，我们可以实现更复杂的背压（back-pressure）机制来控制消息消费的速度。&lt;/p></description></item><item><title>Java 8 函数式接口初识</title><link>https://xiuwei.github.io/p/java-8-functional/</link><pubDate>Fri, 18 Dec 2020 19:00:00 +0000</pubDate><guid>https://xiuwei.github.io/p/java-8-functional/</guid><description>&lt;img src="https://xiuwei.github.io/p/java-8-functional/cover.jpg" alt="Featured image of post Java 8 函数式接口初识" />&lt;h2 id="1-概述">
&lt;a href="#1-%e6%a6%82%e8%bf%b0">#&lt;/a>
1. 概述
&lt;/h2>&lt;p>java.util.function 包是 Java 8 引入的一个包，其中包含了一组函数式接口，用于支持函数式编程和Lambda表达式。&lt;/p>
&lt;p>这些函数式接口提供了一种方便的方式来定义和使用函数，可以在很多场景下简化代码的编写和处理。&lt;/p>
&lt;h2 id="2-functionalinterface-是什么鬼">
&lt;a href="#2-functionalinterface-%e6%98%af%e4%bb%80%e4%b9%88%e9%ac%bc">#&lt;/a>
2. @FunctionalInterface 是什么鬼？
&lt;/h2>&lt;p>@FunctionalInterface是一个Java注解，用于声明一个接口是函数式接口。函数式接口是指&lt;strong>只包含一个抽象方法的接口&lt;/strong>，用于表示一个函数类型。&lt;/p>
&lt;p>@FunctionalInterface注解的作用是强制编译器检查被注解的接口是否满足函数式接口的条件，即只包含一个抽象方法。如果接口不满足这个条件，编译器会报错。&lt;/p>
&lt;p>函数式接口和@FunctionalInterface的使用场景是在函数式编程中，特别是在使用Lambda表达式时。Lambda表达式允许我们以更简洁的方式定义匿名函数，并将其作为参数传递给其他方法或函数式接口。函数式接口提供了一种标准化的方式来定义和使用这些可传递的函数。&lt;/p>
&lt;p>下面是一个示例，演示了@FunctionalInterface的用途和示例代码：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="nd">@FunctionalInterface&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kd">interface&lt;/span> &lt;span class="nc">Calculator&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">calculate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">class&lt;/span> &lt;span class="nc">FunctionalInterfaceExample&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">static&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">args&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">Calculator&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">addition&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">result&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">addition&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">calculate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">5&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">3&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">System&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">result&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 输出8&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">Calculator&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">subtraction&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">result&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">subtraction&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">calculate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">10&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">4&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">System&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">result&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 输出6&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="3-javautilfunction-包接口清单介绍">
&lt;a href="#3-javautilfunction-%e5%8c%85%e6%8e%a5%e5%8f%a3%e6%b8%85%e5%8d%95%e4%bb%8b%e7%bb%8d">#&lt;/a>
3. java.util.function 包接口清单介绍
&lt;/h2>&lt;p>java.util.function 包下的接口都有 @FunctionalInterface 注解。&lt;/p>
&lt;p>以下表格是 java.util.function 包下所有接口的用途。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">类&lt;/th>
&lt;th style="text-align:left">描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">Function &amp;lt;T,R&amp;gt;&lt;/td>
&lt;td style="text-align:left">表示接受一个参数并产生结果的函数。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">Predicate &amp;lt;T&amp;gt;&lt;/td>
&lt;td style="text-align:left">表示一个参数的谓词（boolean函数）。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">Consumer &amp;lt;T&amp;gt;&lt;/td>
&lt;td style="text-align:left">表示接受单个输入参数且不返回任何结果的操作。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">Supplier &amp;lt;T&amp;gt;&lt;/td>
&lt;td style="text-align:left">代表结果的提供者。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">UnaryOperator &amp;lt;T&amp;gt;&lt;/td>
&lt;td style="text-align:left">表示对单个操作数的操作，该操作产生与其操作数类型相同的结果。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">BiConsumer &amp;lt;T,U&amp;gt;&lt;/td>
&lt;td style="text-align:left">表示接受两个输入参数且不返回任何结果的操作。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">BiFunction &amp;lt;T,U,R&amp;gt;&lt;/td>
&lt;td style="text-align:left">表示接受两个参数并产生结果的函数。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">BinaryOperator &amp;lt;T&amp;gt;&lt;/td>
&lt;td style="text-align:left">表示对两个相同类型的操作数的操作，产生与操作数相同类型的结果。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">BiPredicate &amp;lt;T,U&amp;gt;&lt;/td>
&lt;td style="text-align:left">表示两个参数的断言（boolean函数）。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">BooleanSupplier&lt;/td>
&lt;td style="text-align:left">代表 boolean 值结果的供应商。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">DoubleBinaryOperator&lt;/td>
&lt;td style="text-align:left">表示对两个 double 值操作数并产生 double 值结果的操作。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">DoubleConsumer&lt;/td>
&lt;td style="text-align:left">表示接受单个 double 值参数且不返回任何结果的操作。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">DoubleFunction &lt;R>&lt;/td>
&lt;td style="text-align:left">表示接受双值参数并产生结果的函数。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">DoublePredicate&lt;/td>
&lt;td style="text-align:left">表示一个 double 值参数的断言（boolean函数）。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">DoubleSupplier&lt;/td>
&lt;td style="text-align:left">代表 double 值结果的供应商。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">DoubleToIntFunction&lt;/td>
&lt;td style="text-align:left">表示接受双值参数并生成 int 值结果的函数。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">DoubleToLongFunction&lt;/td>
&lt;td style="text-align:left">表示接受双值参数并产生 long 值结果的函数。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">DoubleUnaryOperator&lt;/td>
&lt;td style="text-align:left">表示对产生 double 值结果的单个 double 值操作数的操作。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">IntBinaryOperator&lt;/td>
&lt;td style="text-align:left">表示对两个 int 值操作数并产生 int 值结果的操作。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">IntConsumer&lt;/td>
&lt;td style="text-align:left">表示接受单个 int 值参数且不返回任何结果的操作。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">IntFunction &lt;R>&lt;/td>
&lt;td style="text-align:left">表示接受 int 值参数并产生结果的函数。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">IntPredicate&lt;/td>
&lt;td style="text-align:left">表示一个 int 值参数的谓词（boolean函数）。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">IntSupplier&lt;/td>
&lt;td style="text-align:left">代表 int 值结果的供应商。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">IntToDoubleFunction&lt;/td>
&lt;td style="text-align:left">表示接受 int 值参数并生成双值结果的函数。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">IntToLongFunction&lt;/td>
&lt;td style="text-align:left">表示接受 int 值参数并产生 long 值结果的函数。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">IntUnaryOperator&lt;/td>
&lt;td style="text-align:left">表示对产生 int 值结果的单个 int 值操作数的操作。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">LongBinaryOperator&lt;/td>
&lt;td style="text-align:left">表示对两个 long 值操作数并产生 long 值结果的操作。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">LongConsumer&lt;/td>
&lt;td style="text-align:left">表示接受单个 long 值参数且不返回任何结果的操作。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">LongFunction &lt;R>&lt;/td>
&lt;td style="text-align:left">表示接受 long 值参数并产生结果的函数。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">LongPredicate&lt;/td>
&lt;td style="text-align:left">表示一个 long 值参数的断言（boolean函数）。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">LongSupplier&lt;/td>
&lt;td style="text-align:left">代表 long 值结果的供应商。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">LongToDoubleFunction&lt;/td>
&lt;td style="text-align:left">表示接受 long 值参数并产生双值结果的函数。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">LongToIntFunction&lt;/td>
&lt;td style="text-align:left">表示接受 long 值参数并生成 int 值结果的函数。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">LongUnaryOperator&lt;/td>
&lt;td style="text-align:left">表示对产生 long 值结果的单个 long 值操作数的操作。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">ObjDoubleConsumer &amp;lt;T&amp;gt;&lt;/td>
&lt;td style="text-align:left">表示接受对象值和 double 值参数的操作，并且不返回任何结果。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">ObjIntConsumer &amp;lt;T&amp;gt;&lt;/td>
&lt;td style="text-align:left">表示接受对象值和 int 值参数并且不返回任何结果的操作。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">ObjLongConsumer &amp;lt;T&amp;gt;&lt;/td>
&lt;td style="text-align:left">表示接受对象值和 long 值参数并且不返回任何结果的操作。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">ToDoubleBiFunction &amp;lt;T,U&amp;gt;&lt;/td>
&lt;td style="text-align:left">表示接受两个参数并产生双值结果的函数。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">ToDoubleFunction &amp;lt;T&amp;gt;&lt;/td>
&lt;td style="text-align:left">表示产生双值结果的函数。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">ToIntBiFunction &amp;lt;T,U&amp;gt;&lt;/td>
&lt;td style="text-align:left">表示接受两个参数并生成 int 值结果的函数。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">ToIntFunction &amp;lt;T&amp;gt;&lt;/td>
&lt;td style="text-align:left">表示生成 int 值结果的函数。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">ToLongBiFunction &amp;lt;T,U&amp;gt;&lt;/td>
&lt;td style="text-align:left">表示接受两个参数并产生 long结果的函数。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">ToLongFunction &amp;lt;T&amp;gt;&lt;/td>
&lt;td style="text-align:left">表示产生 long 值结果的函数。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="4-常用的函数式接口及其用途">
&lt;a href="#4-%e5%b8%b8%e7%94%a8%e7%9a%84%e5%87%bd%e6%95%b0%e5%bc%8f%e6%8e%a5%e5%8f%a3%e5%8f%8a%e5%85%b6%e7%94%a8%e9%80%94">#&lt;/a>
4. 常用的函数式接口及其用途
&lt;/h2>&lt;ol>
&lt;li>
&lt;p>Function&amp;lt;T, R&amp;gt;&lt;/p>
&lt;ul>
&lt;li>用途：接受一个输入参数并返回一个结果，用于实现将一个类型的值转换为另一个类型的值的操作。&lt;/li>
&lt;li>示例代码：
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="n">Function&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Integer&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">intToString&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">num&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Integer&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">toString&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">num&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">str&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">intToString&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">apply&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">42&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 结果为&amp;#34;42&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>除了apply方法，Function接口还提供了一些默认方法，用于支持函数的组合、转换和处理。下面是Function接口的所有方法的详细介绍和代码示例：
&lt;ol>
&lt;li>default &lt;V> Function&amp;lt;T, V&amp;gt; andThen(Function&amp;lt;? super R, ? extends V&amp;gt; after)
&lt;ul>
&lt;li>用途：返回一个组合函数，首先将当前函数的结果传递给参数after的apply方法，然后将该结果作为组合函数的输出结果。&lt;/li>
&lt;li>示例代码：&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="n">Function&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Integer&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Integer&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">square&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">num&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">num&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">num&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="n">Function&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Integer&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">squareAndToString&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">square&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">andThen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Object&lt;/span>&lt;span class="p">::&lt;/span>&lt;span class="n">toString&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">result&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">squareAndToString&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">apply&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">5&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 结果为&amp;#34;25&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>default &lt;V> Function&amp;lt;V, R&amp;gt; compose(Function&amp;lt;? super V, ? extends T&amp;gt; before)
&lt;ul>
&lt;li>用途：返回一个组合函数，首先将参数before的结果传递给当前函数的apply方法，然后将该结果作为组合函数的输入参数。&lt;/li>
&lt;li>示例代码：&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="n">Function&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Integer&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Integer&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">multiplyBy2&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">num&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">num&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">2&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="n">Function&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Integer&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Integer&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">subtractBy3&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">num&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">num&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">3&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="n">Function&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Integer&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Integer&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">multiplyBy2AndSubtractBy3&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">multiplyBy2&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">compose&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">subtractBy3&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">result&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">multiplyBy2AndSubtractBy3&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">apply&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">5&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 结果为4&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>default &lt;T> Function&amp;lt;T, T&amp;gt; identity()
&lt;ul>
&lt;li>用途：返回一个函数，该函数对输入参数执行恒等转换，即返回输入参数本身。&lt;/li>
&lt;li>示例代码：&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="n">Function&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">identityFunction&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Function&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">identity&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">result&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">identityFunction&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">apply&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Hello&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 结果为&amp;#34;Hello&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Predicate&amp;lt;T&amp;gt;&lt;/p>
&lt;ul>
&lt;li>用途：接受一个输入参数并返回一个布尔值，用于实现条件判断。&lt;/li>
&lt;li>示例代码：
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="n">Predicate&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Integer&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">isEven&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">num&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">num&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">%&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">2&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">==&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">0&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kt">boolean&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">result&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">isEven&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">test&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">5&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 结果为false&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Consumer&amp;lt;T&amp;gt;&lt;/p>
&lt;ul>
&lt;li>用途：接受一个输入参数，但不返回任何结果，用于实现对输入参数的操作。&lt;/li>
&lt;li>示例代码：
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="n">Consumer&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">printMessage&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">message&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">System&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">message&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="n">printMessage&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">accept&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Hello, World!&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 输出&amp;#34;Hello, World!&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Supplier&amp;lt;T&amp;gt;&lt;/p>
&lt;ul>
&lt;li>用途：不接受任何输入参数，但返回一个结果，用于实现对结果的生成。&lt;/li>
&lt;li>示例代码：
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="n">Supplier&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Double&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">getRandomNumber&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Math&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">random&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kt">double&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">number&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">getRandomNumber&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">get&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 返回一个随机数&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>UnaryOperator&amp;lt;T&amp;gt;&lt;/p>
&lt;ul>
&lt;li>用途：接受一个输入参数，并返回与输入参数类型相同的结果，用于实现对输入参数的操作并返回结果。&lt;/li>
&lt;li>示例代码：
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="n">UnaryOperator&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Integer&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">square&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">num&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">num&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">num&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">result&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">square&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">apply&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">5&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 结果为25&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>这只是java.util.function包中的一小部分函数式接口，还有其他一些接口如BiFunction、BiPredicate、BiConsumer等，用于处理两个输入参数的场景。&lt;/p>
&lt;p>这些函数式接口在函数式编程和Lambda表达式中起到了重要的作用，简化了代码的编写，提高了代码的可读性和可维护性。&lt;/p></description></item><item><title>检索</title><link>https://xiuwei.github.io/search/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://xiuwei.github.io/search/</guid><description/></item><item><title>简介</title><link>https://xiuwei.github.io/about/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://xiuwei.github.io/about/</guid><description>&lt;h2 id="页面装修中">
&lt;a href="#%e9%a1%b5%e9%9d%a2%e8%a3%85%e4%bf%ae%e4%b8%ad">#&lt;/a>
页面装修中&amp;hellip;
&lt;/h2></description></item></channel></rss>