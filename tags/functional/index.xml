<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Functional on 哈皮的自言自语</title><link>https://xiuwei.github.io/tags/functional/</link><description>Recent content in Functional on 哈皮的自言自语</description><generator>Hugo -- gohugo.io</generator><language>zh-Hans</language><lastBuildDate>Fri, 18 Dec 2020 19:00:00 +0000</lastBuildDate><atom:link href="https://xiuwei.github.io/tags/functional/index.xml" rel="self" type="application/rss+xml"/><item><title>Java 8 函数式接口初识</title><link>https://xiuwei.github.io/p/java-8-functional/</link><pubDate>Fri, 18 Dec 2020 19:00:00 +0000</pubDate><guid>https://xiuwei.github.io/p/java-8-functional/</guid><description>&lt;img src="https://xiuwei.github.io/p/java-8-functional/cover.jpg" alt="Featured image of post Java 8 函数式接口初识" />&lt;h2 id="1-概述">
&lt;a href="#1-%e6%a6%82%e8%bf%b0">#&lt;/a>
1. 概述
&lt;/h2>&lt;p>java.util.function 包是 Java 8 引入的一个包，其中包含了一组函数式接口，用于支持函数式编程和Lambda表达式。&lt;/p>
&lt;p>这些函数式接口提供了一种方便的方式来定义和使用函数，可以在很多场景下简化代码的编写和处理。&lt;/p>
&lt;h2 id="2-functionalinterface-是什么鬼">
&lt;a href="#2-functionalinterface-%e6%98%af%e4%bb%80%e4%b9%88%e9%ac%bc">#&lt;/a>
2. @FunctionalInterface 是什么鬼？
&lt;/h2>&lt;p>@FunctionalInterface是一个Java注解，用于声明一个接口是函数式接口。函数式接口是指&lt;strong>只包含一个抽象方法的接口&lt;/strong>，用于表示一个函数类型。&lt;/p>
&lt;p>@FunctionalInterface注解的作用是强制编译器检查被注解的接口是否满足函数式接口的条件，即只包含一个抽象方法。如果接口不满足这个条件，编译器会报错。&lt;/p>
&lt;p>函数式接口和@FunctionalInterface的使用场景是在函数式编程中，特别是在使用Lambda表达式时。Lambda表达式允许我们以更简洁的方式定义匿名函数，并将其作为参数传递给其他方法或函数式接口。函数式接口提供了一种标准化的方式来定义和使用这些可传递的函数。&lt;/p>
&lt;p>下面是一个示例，演示了@FunctionalInterface的用途和示例代码：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="nd">@FunctionalInterface&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kd">interface&lt;/span> &lt;span class="nc">Calculator&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">calculate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">class&lt;/span> &lt;span class="nc">FunctionalInterfaceExample&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">static&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">args&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">Calculator&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">addition&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">result&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">addition&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">calculate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">5&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">3&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">System&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">result&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 输出8&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">Calculator&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">subtraction&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">result&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">subtraction&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">calculate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">10&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">4&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">System&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">result&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 输出6&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="3-javautilfunction-包接口清单介绍">
&lt;a href="#3-javautilfunction-%e5%8c%85%e6%8e%a5%e5%8f%a3%e6%b8%85%e5%8d%95%e4%bb%8b%e7%bb%8d">#&lt;/a>
3. java.util.function 包接口清单介绍
&lt;/h2>&lt;p>java.util.function 包下的接口都有 @FunctionalInterface 注解。&lt;/p>
&lt;p>以下表格是 java.util.function 包下所有接口的用途。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">类&lt;/th>
&lt;th style="text-align:left">描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">Function &amp;lt;T,R&amp;gt;&lt;/td>
&lt;td style="text-align:left">表示接受一个参数并产生结果的函数。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">Predicate &amp;lt;T&amp;gt;&lt;/td>
&lt;td style="text-align:left">表示一个参数的谓词（boolean函数）。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">Consumer &amp;lt;T&amp;gt;&lt;/td>
&lt;td style="text-align:left">表示接受单个输入参数且不返回任何结果的操作。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">Supplier &amp;lt;T&amp;gt;&lt;/td>
&lt;td style="text-align:left">代表结果的提供者。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">UnaryOperator &amp;lt;T&amp;gt;&lt;/td>
&lt;td style="text-align:left">表示对单个操作数的操作，该操作产生与其操作数类型相同的结果。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">BiConsumer &amp;lt;T,U&amp;gt;&lt;/td>
&lt;td style="text-align:left">表示接受两个输入参数且不返回任何结果的操作。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">BiFunction &amp;lt;T,U,R&amp;gt;&lt;/td>
&lt;td style="text-align:left">表示接受两个参数并产生结果的函数。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">BinaryOperator &amp;lt;T&amp;gt;&lt;/td>
&lt;td style="text-align:left">表示对两个相同类型的操作数的操作，产生与操作数相同类型的结果。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">BiPredicate &amp;lt;T,U&amp;gt;&lt;/td>
&lt;td style="text-align:left">表示两个参数的断言（boolean函数）。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">BooleanSupplier&lt;/td>
&lt;td style="text-align:left">代表 boolean 值结果的供应商。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">DoubleBinaryOperator&lt;/td>
&lt;td style="text-align:left">表示对两个 double 值操作数并产生 double 值结果的操作。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">DoubleConsumer&lt;/td>
&lt;td style="text-align:left">表示接受单个 double 值参数且不返回任何结果的操作。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">DoubleFunction &lt;R>&lt;/td>
&lt;td style="text-align:left">表示接受双值参数并产生结果的函数。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">DoublePredicate&lt;/td>
&lt;td style="text-align:left">表示一个 double 值参数的断言（boolean函数）。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">DoubleSupplier&lt;/td>
&lt;td style="text-align:left">代表 double 值结果的供应商。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">DoubleToIntFunction&lt;/td>
&lt;td style="text-align:left">表示接受双值参数并生成 int 值结果的函数。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">DoubleToLongFunction&lt;/td>
&lt;td style="text-align:left">表示接受双值参数并产生 long 值结果的函数。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">DoubleUnaryOperator&lt;/td>
&lt;td style="text-align:left">表示对产生 double 值结果的单个 double 值操作数的操作。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">IntBinaryOperator&lt;/td>
&lt;td style="text-align:left">表示对两个 int 值操作数并产生 int 值结果的操作。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">IntConsumer&lt;/td>
&lt;td style="text-align:left">表示接受单个 int 值参数且不返回任何结果的操作。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">IntFunction &lt;R>&lt;/td>
&lt;td style="text-align:left">表示接受 int 值参数并产生结果的函数。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">IntPredicate&lt;/td>
&lt;td style="text-align:left">表示一个 int 值参数的谓词（boolean函数）。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">IntSupplier&lt;/td>
&lt;td style="text-align:left">代表 int 值结果的供应商。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">IntToDoubleFunction&lt;/td>
&lt;td style="text-align:left">表示接受 int 值参数并生成双值结果的函数。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">IntToLongFunction&lt;/td>
&lt;td style="text-align:left">表示接受 int 值参数并产生 long 值结果的函数。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">IntUnaryOperator&lt;/td>
&lt;td style="text-align:left">表示对产生 int 值结果的单个 int 值操作数的操作。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">LongBinaryOperator&lt;/td>
&lt;td style="text-align:left">表示对两个 long 值操作数并产生 long 值结果的操作。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">LongConsumer&lt;/td>
&lt;td style="text-align:left">表示接受单个 long 值参数且不返回任何结果的操作。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">LongFunction &lt;R>&lt;/td>
&lt;td style="text-align:left">表示接受 long 值参数并产生结果的函数。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">LongPredicate&lt;/td>
&lt;td style="text-align:left">表示一个 long 值参数的断言（boolean函数）。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">LongSupplier&lt;/td>
&lt;td style="text-align:left">代表 long 值结果的供应商。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">LongToDoubleFunction&lt;/td>
&lt;td style="text-align:left">表示接受 long 值参数并产生双值结果的函数。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">LongToIntFunction&lt;/td>
&lt;td style="text-align:left">表示接受 long 值参数并生成 int 值结果的函数。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">LongUnaryOperator&lt;/td>
&lt;td style="text-align:left">表示对产生 long 值结果的单个 long 值操作数的操作。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">ObjDoubleConsumer &amp;lt;T&amp;gt;&lt;/td>
&lt;td style="text-align:left">表示接受对象值和 double 值参数的操作，并且不返回任何结果。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">ObjIntConsumer &amp;lt;T&amp;gt;&lt;/td>
&lt;td style="text-align:left">表示接受对象值和 int 值参数并且不返回任何结果的操作。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">ObjLongConsumer &amp;lt;T&amp;gt;&lt;/td>
&lt;td style="text-align:left">表示接受对象值和 long 值参数并且不返回任何结果的操作。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">ToDoubleBiFunction &amp;lt;T,U&amp;gt;&lt;/td>
&lt;td style="text-align:left">表示接受两个参数并产生双值结果的函数。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">ToDoubleFunction &amp;lt;T&amp;gt;&lt;/td>
&lt;td style="text-align:left">表示产生双值结果的函数。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">ToIntBiFunction &amp;lt;T,U&amp;gt;&lt;/td>
&lt;td style="text-align:left">表示接受两个参数并生成 int 值结果的函数。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">ToIntFunction &amp;lt;T&amp;gt;&lt;/td>
&lt;td style="text-align:left">表示生成 int 值结果的函数。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">ToLongBiFunction &amp;lt;T,U&amp;gt;&lt;/td>
&lt;td style="text-align:left">表示接受两个参数并产生 long结果的函数。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">ToLongFunction &amp;lt;T&amp;gt;&lt;/td>
&lt;td style="text-align:left">表示产生 long 值结果的函数。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="4-常用的函数式接口及其用途">
&lt;a href="#4-%e5%b8%b8%e7%94%a8%e7%9a%84%e5%87%bd%e6%95%b0%e5%bc%8f%e6%8e%a5%e5%8f%a3%e5%8f%8a%e5%85%b6%e7%94%a8%e9%80%94">#&lt;/a>
4. 常用的函数式接口及其用途
&lt;/h2>&lt;ol>
&lt;li>
&lt;p>Function&amp;lt;T, R&amp;gt;&lt;/p>
&lt;ul>
&lt;li>用途：接受一个输入参数并返回一个结果，用于实现将一个类型的值转换为另一个类型的值的操作。&lt;/li>
&lt;li>示例代码：
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="n">Function&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Integer&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">intToString&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">num&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Integer&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">toString&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">num&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">str&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">intToString&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">apply&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">42&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 结果为&amp;#34;42&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>除了apply方法，Function接口还提供了一些默认方法，用于支持函数的组合、转换和处理。下面是Function接口的所有方法的详细介绍和代码示例：
&lt;ol>
&lt;li>default &lt;V> Function&amp;lt;T, V&amp;gt; andThen(Function&amp;lt;? super R, ? extends V&amp;gt; after)
&lt;ul>
&lt;li>用途：返回一个组合函数，首先将当前函数的结果传递给参数after的apply方法，然后将该结果作为组合函数的输出结果。&lt;/li>
&lt;li>示例代码：&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="n">Function&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Integer&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Integer&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">square&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">num&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">num&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">num&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="n">Function&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Integer&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">squareAndToString&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">square&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">andThen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Object&lt;/span>&lt;span class="p">::&lt;/span>&lt;span class="n">toString&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">result&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">squareAndToString&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">apply&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">5&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 结果为&amp;#34;25&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>default &lt;V> Function&amp;lt;V, R&amp;gt; compose(Function&amp;lt;? super V, ? extends T&amp;gt; before)
&lt;ul>
&lt;li>用途：返回一个组合函数，首先将参数before的结果传递给当前函数的apply方法，然后将该结果作为组合函数的输入参数。&lt;/li>
&lt;li>示例代码：&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="n">Function&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Integer&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Integer&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">multiplyBy2&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">num&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">num&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">2&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="n">Function&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Integer&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Integer&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">subtractBy3&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">num&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">num&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">3&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="n">Function&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Integer&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Integer&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">multiplyBy2AndSubtractBy3&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">multiplyBy2&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">compose&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">subtractBy3&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">result&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">multiplyBy2AndSubtractBy3&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">apply&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">5&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 结果为4&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>default &lt;T> Function&amp;lt;T, T&amp;gt; identity()
&lt;ul>
&lt;li>用途：返回一个函数，该函数对输入参数执行恒等转换，即返回输入参数本身。&lt;/li>
&lt;li>示例代码：&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="n">Function&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">identityFunction&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Function&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">identity&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">result&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">identityFunction&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">apply&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Hello&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 结果为&amp;#34;Hello&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Predicate&amp;lt;T&amp;gt;&lt;/p>
&lt;ul>
&lt;li>用途：接受一个输入参数并返回一个布尔值，用于实现条件判断。&lt;/li>
&lt;li>示例代码：
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="n">Predicate&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Integer&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">isEven&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">num&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">num&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">%&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">2&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">==&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">0&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kt">boolean&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">result&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">isEven&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">test&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">5&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 结果为false&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Consumer&amp;lt;T&amp;gt;&lt;/p>
&lt;ul>
&lt;li>用途：接受一个输入参数，但不返回任何结果，用于实现对输入参数的操作。&lt;/li>
&lt;li>示例代码：
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="n">Consumer&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">printMessage&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">message&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">System&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">message&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="n">printMessage&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">accept&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Hello, World!&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 输出&amp;#34;Hello, World!&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Supplier&amp;lt;T&amp;gt;&lt;/p>
&lt;ul>
&lt;li>用途：不接受任何输入参数，但返回一个结果，用于实现对结果的生成。&lt;/li>
&lt;li>示例代码：
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="n">Supplier&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Double&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">getRandomNumber&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Math&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">random&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kt">double&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">number&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">getRandomNumber&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">get&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 返回一个随机数&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>UnaryOperator&amp;lt;T&amp;gt;&lt;/p>
&lt;ul>
&lt;li>用途：接受一个输入参数，并返回与输入参数类型相同的结果，用于实现对输入参数的操作并返回结果。&lt;/li>
&lt;li>示例代码：
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="n">UnaryOperator&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Integer&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">square&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">num&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">num&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">num&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">result&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">square&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">apply&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">5&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 结果为25&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>这只是java.util.function包中的一小部分函数式接口，还有其他一些接口如BiFunction、BiPredicate、BiConsumer等，用于处理两个输入参数的场景。&lt;/p>
&lt;p>这些函数式接口在函数式编程和Lambda表达式中起到了重要的作用，简化了代码的编写，提高了代码的可读性和可维护性。&lt;/p></description></item></channel></rss>