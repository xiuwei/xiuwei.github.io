<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>LowCode on 哈皮的自言自语</title><link>https://xiuwei.github.io/tags/lowcode/</link><description>Recent content in LowCode on 哈皮的自言自语</description><generator>Hugo -- gohugo.io</generator><language>zh-Hans</language><lastBuildDate>Thu, 15 Sep 2022 20:00:00 +0000</lastBuildDate><atom:link href="https://xiuwei.github.io/tags/lowcode/index.xml" rel="self" type="application/rss+xml"/><item><title>关于 aPaaS 的几点思考</title><link>https://xiuwei.github.io/p/several-thoughts-on-apaas/</link><pubDate>Thu, 15 Sep 2022 20:00:00 +0000</pubDate><guid>https://xiuwei.github.io/p/several-thoughts-on-apaas/</guid><description>&lt;img src="https://xiuwei.github.io/p/several-thoughts-on-apaas/cover.jpg" alt="Featured image of post 关于 aPaaS 的几点思考" />&lt;h2 id="1-前言">
&lt;a href="#1-%e5%89%8d%e8%a8%80">#&lt;/a>
1. 前言
&lt;/h2>&lt;p>在阅读之前，先统一概念称呼。对于平台，本文统一用aPaaS（应用平台即服务，application Platform as a Service）泛指包含零代码、低代码、iPaaS（集成平台即服务， integration Platform as a Service）等技术的PaaS开发平台/开发工具。而对于技术方向，还是区分为零代码、低代码。&lt;/p>
&lt;p>本文主要记录我对aPaaS相关内容的思考和观点总结，其主要根据我的项目经验和行业观察学习而来。这些思考主要为了回答以下问题，欢迎交流讨论：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>aPaaS目前发展遇到什么问题（困境）？能否解决？&lt;/p>
&lt;/li>
&lt;li>
&lt;p>在这些困境之下，aPaaS价值几何，是否值得继续投入？&lt;/p>
&lt;/li>
&lt;li>
&lt;p>为了最大化实现价值，aPaaS的发展趋势是什么？&lt;/p>
&lt;/li>
&lt;li>
&lt;p>在这种发展趋势下，aPaaS的重点模块可以如何做？&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="2-当前困境">
&lt;a href="#2-%e5%bd%93%e5%89%8d%e5%9b%b0%e5%a2%83">#&lt;/a>
2. 当前困境
&lt;/h2>&lt;h3 id="21-客户现状">
&lt;a href="#21-%e5%ae%a2%e6%88%b7%e7%8e%b0%e7%8a%b6">#&lt;/a>
2.1 客户现状
&lt;/h3>&lt;p>&lt;strong>1）大部分客户更想要解决方案，而非单纯的工具（不想用）&lt;/strong>&lt;/p>
&lt;p>客户首要关心我们是否帮助他们准确地发现问题、快速高效地解决问题。只要能解决问题，用Excel都可以。
所以，客户是否需要aPaaS，关键在于我们能否为其提供切实可行的数字化转型、升级的解决方案（要包含如何使用aPaaS深度参与）。&lt;/p>
&lt;p>也就是，aPaaS不一定适合所有行业的企业的生命周期各个阶段、业务生命周期各个阶段。但如果aPaaS要作为企业的方案候选项，就应该尽可能在不同阶段的痛点上有突出优势/定位，而不是一味地宣传降低代码量。例如对于中小企业的业务起步阶段，aPaaS可以帮助企业低成本地快速试错。&lt;/p>
&lt;p>解决思路：咨询服务+行业解决方案（基于aPaaS的行业全价值链的解决方案，可供单独环节使用）+行业级应用模板&lt;/p>
&lt;p>&lt;strong>2）客户对aPaaS不信任，担心受限受控（不敢用）&lt;/strong>&lt;/p>
&lt;p>&lt;strong>2.1）aPaaS强依赖供应商（锁平台）。&lt;/strong> 目前，aPaaS主要通过解析引擎解析用户的配置让应用跑起来。配置和解析引擎缺一不可，而不同厂家的配置方式不同、解析引擎不同，互不兼容。客户如果想更换产品服务，就要付出巨大成本。&lt;/p>
&lt;p>而且，同为绑定锁平台，与SaaS的开箱即用不同，aPaaS还需要额外付出配置成本，绑定影响更深。这些都让客户的研发受限于aPaaS能力，受控于供应商。&lt;/p>
&lt;p>&lt;strong>2.2）aPaaS的各种标准和规范尚未完善。&lt;/strong> 与成熟的软件开发模式不同，aPaaS的权责边界尚不清晰，且各种功能缺乏透明度，缺少监管。这让aPaaS存在商务纠纷风险。例如版权问题，客户使用aPaaS配置的应用，软著属于谁？&lt;/p>
&lt;p>解决思路：发展的问题在发展中解决。这需要aPaaS自身、业界共同发展才能解决。也侧面证明aPaaS业界还在激烈斗争期。&lt;/p>
&lt;p>&lt;strong>3）采购aPaaS的交易成本大（不会买）&lt;/strong>&lt;/p>
&lt;p>&lt;strong>3.1）难以选型。&lt;/strong> 目前，业界的aPaaS同质化严重，差异化不明显。各个aPaaS缺乏大量且长久的实践经验和数据，导致客户难以量化价值。而且市场也无相关选型报告。&lt;/p>
&lt;p>&lt;strong>3.2）决策压力大。&lt;/strong> 客户担心aPaaS是否又一个数据孤岛，能否兼容老旧系统、以及未来的新系统。如果“一购定终身”，那客户的决策压力非常大。&lt;/p>
&lt;p>解决思路：整体发展+突出卖点、案例报告+生态化&lt;/p>
&lt;p>&lt;strong>4）大部分客户还较难充分使用aPaaS（用不好）&lt;/strong>&lt;/p>
&lt;p>&lt;strong>4.1）业务人员能力差异大。&lt;/strong> 零代码aPaaS主要面向业务人员。现阶段，大部分业务人员连清楚表达需求都较难做到，要他们使用aPaaS准确抽象出业务场景和流程就更难了。而且，部分aPaaS的易用性不够，更提高了学习成本，加剧业务人员的工作负担。&lt;/p>
&lt;p>&lt;strong>4.2）缺少开发者。&lt;/strong> 低代码aPaaS主要面向开发人员（包含专业实施人员、初级程序员、高级程序员）。如果客户没有正式的IT团队或实施团队，他们很难使用低代码aPaaS产出期望结果。而且团队组建并非一朝一夕之功，让团队熟练使用低代码aPaaS也非易事。&lt;/p>
&lt;p>解决思路：整体发展，加强aPaaS的易用性和功能性，提高数字化建设ROI。&lt;/p>
&lt;h3 id="22-产品自身问题">
&lt;a href="#22-%e4%ba%a7%e5%93%81%e8%87%aa%e8%ba%ab%e9%97%ae%e9%a2%98">#&lt;/a>
2，2 产品自身问题
&lt;/h3>&lt;p>在业界内，aPaaS（特别是低代码aPaaS）被很多使用者和开发者称为“KPI项目”，是忽悠老板和投资人的毒瘤。&lt;/p>
&lt;p>我认为，aPaaS的问题主要是以下几点：&lt;/p>
&lt;p>&lt;strong>1）无法满足典型场景的复杂需求&lt;/strong>&lt;/p>
&lt;p>目前，零代码、低代码的底层是声明式编程的DSL（领域特定语言），因此它们继承了声明式编程、DSL的优点和缺点。（声明式编程：描述要做什么（what），至于如何做（how）交由引擎解析执行。&lt;/p>
&lt;p>例如SQL就是经典的声明式编程的DSL）。基于零代码/低代码的aPaaS目前只适合满足在特定领域里的需求，不适合所有场景，这是声明式编程、可视化DSL的天然缺陷。但客户的需求不会只局限于特定领域。&lt;/p>
&lt;p>现在的aPaaS无法满足有传统开发的典型场景需求，例如跨业务系统对接需求、复杂逻辑需求、行业特色需求等。为了项目交付，这种天然缺陷必然要有解决方案。&lt;/p>
&lt;p>&lt;strong>2）功能性（颗粒度）与易用性的矛盾（主要矛盾）&lt;/strong>&lt;/p>
&lt;p>根据软件工程理论，工程的本质复杂度无法避免，没有银弹。工程理论主要解决附属性工作产生的次要复杂度（人为引入复杂度，如编程）。当次要复杂性无限接近0，就是理想中效益最大化。&lt;/p>
&lt;p>降低次要复杂度的有效途径是封装复杂度。当封装的颗粒度越细时，越适合更多场景，越实用。而最细颗粒度的封装是各种专业编程语言、知名脚手架。&lt;/p>
&lt;p>易用性是面向广大普通用户而言的，而非专业程序员。颗粒度越细，普通用户使用门槛越高，丧失低代码的初心。&lt;/p>
&lt;p>&lt;strong>3）成本问题（次要矛盾）&lt;/strong>&lt;/p>
&lt;p>对于开发商，理想的aPaaS是颗粒度足够细，又足够易用，这需要巨大的研发成本才能找到符合产品定位的平衡。而对于客户，颗粒度足够细的高代码用不起，所以追求易用的aPaaS。&lt;/p>
&lt;p>&lt;strong>4）难以对抗熵增&lt;/strong>&lt;/p>
&lt;p>软件在整个生命周期中会不断熵增，表现为需求变更、功能变多、数据变多、性能变慢等。如果不人为干预进行降熵，软件就会逐渐腐烂（software rot），直至出现故障、无法使用等。而aPaaS的对抗熵增能力有待提高，具体表现为：&lt;/p>
&lt;p>&lt;strong>4.1）封装限制了潜力。&lt;/strong> 相比较通用编程语言，零代码、低代码为了降低复杂度，牺牲了拓展性和潜力，最大转化降本增效价值。这是天然缺陷。&lt;/p>
&lt;p>&lt;strong>4.2）功能缺失造成对抗困难。&lt;/strong> 次要复杂度不只包含开发编程，也包含测试、迭代、运维等全生命周期的人为工作。而目前大部分aPaaS的抽象封装重点是开发阶段，忽略其他阶段，没有考虑整体上降低复杂度。&lt;/p>
&lt;p>&lt;strong>4.3）客户无法独立对抗熵增。&lt;/strong> aPaaS运维分为两部分：aPaaS自身迭代运维、配置应用的迭代运维。对于客户，他们能利用aPaaS自身的运维工具对配置应用进行运维，但对aPaaS自身无能为力。如果aPaaS厂商缺乏及时快速的支持，那客户对抗熵增能力极差。&lt;/p>
&lt;p>&lt;strong>4.4）滥用定制化。&lt;/strong> 为了项目交付，部分产品会放弃抽象封装，不断增加定制化组件。这种组件作为独立小模块，很难融合到大一统体系，加剧了系统熵增。&lt;/p>
&lt;h2 id="3-定位和价值">
&lt;a href="#3-%e5%ae%9a%e4%bd%8d%e5%92%8c%e4%bb%b7%e5%80%bc">#&lt;/a>
3. 定位和价值
&lt;/h2>&lt;p>要最大化价值，就要找到PMF，找准定位。&lt;/p>
&lt;h3 id="31-定位">
&lt;a href="#31-%e5%ae%9a%e4%bd%8d">#&lt;/a>
3.1 定位
&lt;/h3>&lt;h4 id="311-目标行业">
&lt;a href="#311-%e7%9b%ae%e6%a0%87%e8%a1%8c%e4%b8%9a">#&lt;/a>
3.1.1 目标行业
&lt;/h4>&lt;p>&lt;strong>1）B端&lt;/strong>&lt;/p>
&lt;p>aPaaS可以面向B端全行业的所有企业。最简单的原因是，中国的程序员缺口非常大。&lt;/p>
&lt;p>同时，根据调查，目前aPaaS在以下行业的渗透率较高，可以针对性发展：通信、金融（银行、保险）、能源、医疗、房地产、制造、教育、零售等行业。这些行业的共性是：用户量大，个性化需求多。可以再细分成两种：&lt;/p>
&lt;p>a）具备一定垄断性质的行业。这些行业的业务流程明确、数据量大。而且，他们利润较好，付得起目前aPaaS的前期培养成本，又处于新时代升级阶段。例如通信、金融等。&lt;/p>
&lt;p>b）政策扶持或劳动密集型的行业。如制造业、教育业。&lt;/p>
&lt;p>另一个方向就是出海，国外的人力成本比国内高很多，aPaaS能更好地发挥价值。&lt;/p>
&lt;p>&lt;strong>2）高校&lt;/strong>&lt;/p>
&lt;p>面向高校可以重点发展产学研一体化。&lt;/p>
&lt;p>对于学校，因为低代码aPaaS本身就是抽象并可视化软件开发过程，所以有利于学生快速掌握开发思维和开发流程。同时也提供项目平台，方便学生从项目落地实践中学习编程。&lt;/p>
&lt;p>对于aPaaS供应商，既可以收集使用数据反哺迭代，也能丰富社区产出。&lt;/p>
&lt;p>对于企业客户，高校培养的零代码、低代码人才可以让企业更好地组建实施团队。&lt;/p>
&lt;p>&lt;strong>3）G端&lt;/strong>&lt;/p>
&lt;p>aPaaS可以面向政府里对服务效率、服务体验要求高的部门。&lt;/p>
&lt;p>这些部门一般业务流程明确、功能规范明确，非常适合使用aPaaS打造安全、高效、统一的服务体系。但政府端的产品由于服务各种终端的用户、与多部门协作、数据敏感等多种特性，更重视产品的多平台、兼容性、开放性、稳定性和安全性。这对aPaaS提出更高要求。&lt;/p>
&lt;h4 id="312-目标客户">
&lt;a href="#312-%e7%9b%ae%e6%a0%87%e5%ae%a2%e6%88%b7">#&lt;/a>
3.1.2 目标客户
&lt;/h4>&lt;p>aPaaS主要面向有数字化转型、升级需求的客户。根据客户的数字化程度，aPaaS有着不同的细分客户：&lt;/p>
&lt;p>1）无数字化经验的客户，一般是小微企业。主要需求是数字化转型，快速拓展市场。&lt;/p>
&lt;p>2）有一定数字化经验的客户，一般是中小企业。主要需求是数字化升级，寻找第二增长曲线，同时解决数字化死角。&lt;/p>
&lt;p>3）有丰富的数字化经验的客户，一般是中大型企业。主要需求是深化数字化改革，加强精细化运营、打破数据孤岛。以求帮助寻求业务迭代和创新机会，帮助进行战略布局。&lt;/p>
&lt;p>而具体到客户内部，零代码aPaaS主要面向业务人员，低代码aPaaS主要面向专业开发者（包含程序员、专门的实施人员）。&lt;/p>
&lt;h4 id="313-目标场景">
&lt;a href="#313-%e7%9b%ae%e6%a0%87%e5%9c%ba%e6%99%af">#&lt;/a>
3.1.3 目标场景
&lt;/h4>&lt;p>根据aPaaS的能力定位不同，目标场景主要有4种：&lt;/p>
&lt;p>1）面向通用型业务场景，普适发展型。面向行业属性较低的通用型场景，主要是企业OA管理。或者基本CRUD场景，主要是简单逻辑的业务。该场景一般是零代码aPaaS产品。例如简道云、明道云、airtable等产品。&lt;/p>
&lt;p>2）面向垂直型业务场景，领域服务型。针对专一领域，深度挖掘领域业务场景，提炼领域共性特征，提供领域专用的功能模块或专用解决方案。例如物联网领域的物模型、告警引擎等，以及常见的电商、CRM领域的有赞、销售易、纷享销客等。&lt;/p>
&lt;p>3）面向综合型业务场景，产品研发型。面向复杂业务场景，同时兼容通用场景。主要满足大型软件、或打造企业内外生态需求。例如mendix、outsystem、华为Astro、微搭、宜搭等产品。&lt;/p>
&lt;p>4）面向B端所有场景，创新先驱型。未来aPaaS的重点定位。可以面向通用、垂直、复杂等场景。因为全面、专业、智能、成熟的aPaaS能与专业研发体系无缝融合，真正做到让业务管业务，让技术管技术。&lt;/p>
&lt;h4 id="314-产品形态">
&lt;a href="#314-%e4%ba%a7%e5%93%81%e5%bd%a2%e6%80%81">#&lt;/a>
3.1.4 产品形态
&lt;/h4>&lt;p>&lt;strong>1）开发工具&lt;/strong>&lt;/p>
&lt;p>根据使用者不同，有两种应用方向。&lt;/p>
&lt;p>1.1）专业开发的辅助工具。低代码aPaaS作为专业开发工具，支持code-in &amp;amp; code-out，支持无缝与专业研发体系融合。开发团队在项目工程里使用aPaaS提高开发效率。也就是，低代码aPaaS只是开发阶段的拼装环节，最终还是输出源码进行部署。相当于把aPaaS作为代码生成器或者说中台。&lt;/p>
&lt;p>1.2）产品的高级能力。aPaaS作为一种能力附加在产品上。客户可以一定程度上调整产品的标准化功能，或者在平台上增加个性化功能。主要为了解决SaaS产品的标准化功能与客户个性化需求的冲突。例如纷享销客、销售易、有赞等厂商的产品。&lt;/p>
&lt;p>&lt;strong>2）开发平台（主流）&lt;/strong>&lt;/p>
&lt;p>aPaaS作为独立开发平台，支持客户在平台上实现应用全生命周期管理，包含设计、开发、测试、部署、迭代和运维等。&lt;/p>
&lt;h3 id="32-价值">
&lt;a href="#32-%e4%bb%b7%e5%80%bc">#&lt;/a>
3.2 价值
&lt;/h3>&lt;p>B端产品的价值体现，最关键的是降本、增效、创收这三方面。总结来说，目前aPaaS主要价值是帮助企业数字化初期快速探索和试错，以及数字化运营期间解决员工与业务、公司与客户的“最后一公里”问题。
而当aPaaS发展成熟后，能作为真正的创新先驱型产品时，aPaaS主要价值是深入并赋能企业全域全价值链的数字化，是企业研发的C位，而不仅局限于打辅助。具体的价值如下，这些价值足以值得继续投入发展：&lt;/p>
&lt;h4 id="321-降本">
&lt;a href="#321-%e9%99%8d%e6%9c%ac">#&lt;/a>
3.2.1 降本
&lt;/h4>&lt;p>降本要分析降的是什么本，只有弄清楚“是什么”，才能知道缺什么，下一步“如何做”。aPaaS的降本主要有几方面：&lt;/p>
&lt;p>&lt;strong>1）机会和试错成本&lt;/strong>&lt;/p>
&lt;p>企业在拓展市场、探索新业务时，需要不断选择机会、试错，直至发现正确道路。而aPaaS可以帮助企业最小化机会成本，降低试错成本。&lt;/p>
&lt;p>1.1）快速响应机会，快速试错，避免错失良机。由于aPaaS开发效率高，响应快、初期投入少（业务人员就可以配置），同样的资源可以响应更多机会、尝试更多次。&lt;/p>
&lt;p>1.2）量化验证、复盘分析。试错关键是量化验证、复盘、方向调整。即要知道是否错、错在哪、如何处理。aPaaS帮助企业自定义监测，量化业务效果。当发现效果不佳，复盘分析原因，然后调整执行方案、及时停止或选择其他机会。&lt;/p>
&lt;p>例如：企业通过aPaaS配置demo给客户验证，效果合适再重点投入。&lt;/p>
&lt;p>&lt;strong>2）时间成本&lt;/strong>&lt;/p>
&lt;p>aPaaS可以帮助企业降低项目实施的时间成本，包含从0到1，以及从1到优的迭代运维阶段的时间成本。&lt;/p>
&lt;p>&lt;strong>3）人力成本&lt;/strong>&lt;/p>
&lt;p>aPaaS可以帮助企业降低研发团队的人力成本。&lt;/p>
&lt;p>3.1）降低初期投入人力成本。数字化转型初期，企业可以使用业务人员或初级开发者探索和试错新机会。当新机会的商业模式跑通后，也明确知道想要什么时，企业可以再采用高代码重构平台。避免一开始就要维护高成本的专业IT团队。&lt;/p>
&lt;p>3.2）降低维持专业IT团队的人力成本。aPaaS可以帮助提高开发效率，且具备应用全生命周期管理。能在很长一段时间内，降低了全周期需要的专业程序员数量，也降低了程序员能力要求。&lt;/p>
&lt;p>SaaS也可以降低人力成本，区别在于aPaaS的个性化效率更高。（所以目前很多SaaS也增加aPaaS能力以弥补效率问题）&lt;/p>
&lt;p>&lt;strong>4）拓展成本&lt;/strong>&lt;/p>
&lt;p>aPaaS可以帮助企业降低软件的拓展成本。主要表现为：&lt;/p>
&lt;p>4.1）降低系统迭代成本。企业可以通过aPaaS对系统进行修改优化，减少定制外包的拓展成本。&lt;/p>
&lt;p>4.2）降低构建生态成本。企业如果存在老旧系统，在采购新系统时，就需要支付集成拓展成本，以便让新系统融合老旧系统。或者需要与其他企业的系统协作时，也需要支付集成拓展成本。而aPaaS可以帮助企业降低连接新老系统的集成拓展成本、企业内外生态的集成拓展成本。&lt;/p>
&lt;h4 id="322-增效">
&lt;a href="#322-%e5%a2%9e%e6%95%88">#&lt;/a>
3.2.2 增效
&lt;/h4>&lt;p>&lt;strong>1）研发效率&lt;/strong>&lt;/p>
&lt;p>1.1）提高全生命周期的研发效率。产品发展成熟后，aPaaS不仅仅提升开发效率，更可以提高企业的设计、测试、部署、迭代和运维阶段的工作效率。&lt;/p>
&lt;p>1.2）提高业务与开发的沟通效率。业务人员可以通过aPaaS可以深度参与应用搭建，这种圆桌式开发可以帮助团队保持共识。&lt;/p>
&lt;p>&lt;strong>2）业务工作效率&lt;/strong>&lt;/p>
&lt;p>除了数字化带来的工作效率提升，aPaaS主要提高了一线员工的业务工作效率。&lt;/p>
&lt;p>2.1）快速满足员工与业务“最后一公里”。一线员工在处理业务时会产生大量优化小需求。这些多变、简单、个性化、长尾需求可以说是员工与业务的“最后一公里”。一般情况下，企业自身的IT团队、SaaS供应商或外包无法快速响应。企业的实施团队或一线员工通过aPaaS搭建各种微应用快速满足需求。&lt;/p>
&lt;p>2.2）提高跨公司业务协同效率。aPaaS通过iPaaS能与其他企业建立生态关系，以便跨租户跨公司进行业务协同。&lt;/p>
&lt;p>&lt;strong>3）服务效率&lt;/strong>&lt;/p>
&lt;p>在服务客户过程中，客户也会产生大量优化需求，也就是员工与客户的“最后一公里”。这种需求也可以通过aPaaS快速解决，从而提高服务效率。&lt;/p>
&lt;p>&lt;strong>4）决策效率&lt;/strong>&lt;/p>
&lt;p>数字化与信息化的最大区别在于数字化可以闭环，从数据产生、数据流转到数据分析与决策，让数据真正活起来。aPaaS通过构建企业生态环境，采集并治理企业内外系统数据，满足企业个性化的BI需求，可以最大程度帮助企业提高决策效率。&lt;/p>
&lt;h4 id="323-创收">
&lt;a href="#323-%e5%88%9b%e6%94%b6">#&lt;/a>
3.2.3 创收
&lt;/h4>&lt;p>&lt;strong>1）直接收入&lt;/strong>&lt;/p>
&lt;p>企业利用aPaaS的产出得到的收入就是直接收入。例如，aPaaS供应商卖aPaaS给企业，企业再使用aPaaS开发应用，然后将应用卖给客户。
适用于外包、ISV，以及将软件作为增值服务的企业。例如，客户购买了设备，可以同时购买设备管理平台。&lt;/p>
&lt;p>&lt;strong>2）间接收入&lt;/strong>&lt;/p>
&lt;p>aPaaS不仅仅是一个工具平台，更是一套数字化变革方案。这种方案会让企业变革工作模式、管理模式、商业模式等。企业利用aPaaS完成数字化转型、升级，最终找到新的增长曲线。这种收入就是间接收入。&lt;/p>
&lt;h2 id="4-产品发展">
&lt;a href="#4-%e4%ba%a7%e5%93%81%e5%8f%91%e5%b1%95">#&lt;/a>
4. 产品发展
&lt;/h2>&lt;p>aPaaS发展主要有两个方向：易用性、功能性。也就是多快好省，提高软件全生命周期的ROI。这两个方向的发展具体表现以下几个方面：&lt;/p>
&lt;h3 id="41-apaas本质">
&lt;a href="#41-apaas%e6%9c%ac%e8%b4%a8">#&lt;/a>
4.1 aPaaS本质
&lt;/h3>&lt;p>新时代是数据时代，数据就是信息，而提取信息里的规律就能预测未来，把控个人和企业的未来发展。aPaaS的本质是方便普通人对数据的生命周期管控，包括数据产生、收集、管理、分析、流转。也就是aPaaS是普通人在数据时代的车票，避免被时代抛弃。&lt;/p>
&lt;h3 id="41-全域化">
&lt;a href="#41-%e5%85%a8%e5%9f%9f%e5%8c%96">#&lt;/a>
4.1 全域化
&lt;/h3>&lt;p>&lt;strong>1）概念&lt;/strong>&lt;/p>
&lt;p>全域化有两种方向：数据全价值链、软件全生命周期。数据全价值链是指aPaaS能帮助企业高效使用数据资产，包括数据产生、收集、管理和利用等环节。软件全生命周期是指从需求、设计、开发、测试、部署、迭代和运维的全流程都可以在aPaaS上完成。&lt;/p>
&lt;p>&lt;strong>2）趋势原因&lt;/strong>&lt;/p>
&lt;p>2.1）降低体系复杂度。整体降低软件次要复杂度，而非只降低单一环节，提高与纯代码研发的竞争力。&lt;/p>
&lt;p>2.2）高效全面协同。全面云上一体化，让业务、产品、设计、研发、测试和运维等团队能跨时间、跨空间高效协同。&lt;/p>
&lt;p>&lt;strong>3）方案想法&lt;/strong>&lt;/p>
&lt;p>详见5.2章节：应用全生命周期管理。&lt;/p>
&lt;h3 id="42-智能化">
&lt;a href="#42-%e6%99%ba%e8%83%bd%e5%8c%96">#&lt;/a>
4.2 智能化
&lt;/h3>&lt;p>&lt;strong>1）概念&lt;/strong>&lt;/p>
&lt;p>智能化就是aPaaS+AI，旨在用AI帮助用户快速上手，提高实施人员的配置效率，提高应用的使用效率，以及帮助企业优化业务。&lt;/p>
&lt;p>&lt;strong>2）趋势原因&lt;/strong>&lt;/p>
&lt;p>2.1）追求易用性是基本目标。从机器语言到汇编语言，从汇编语言到高级语言，人类从未停止对编程易用性的追求。而AI是否能降低编程门槛，正在积极探索中。但希望很大，正如AI绘画让更多没有绘画基础的用户能产出不错的画作。&lt;/p>
&lt;p>2.2）提高效率。智能化可以让用户更快地配置应用，而且能让人真正从标准、重复枯燥的工作中解放。&lt;/p>
&lt;p>2.3）赋能业务。AI可以帮助企业更全面、深入、持久地审视数据，发现优化点，真正赋能业务。&lt;/p>
&lt;p>&lt;strong>3）方案想法&lt;/strong>&lt;/p>
&lt;p>&lt;strong>3.0）本质思考&lt;/strong>&lt;/p>
&lt;p>利用AI拓展“适用场景的范围”，也就是：允许无规则输入，转化为有规则的输出&lt;/p>
&lt;p>&lt;strong>第一阶段：限制有规则的输入。&lt;/strong> 让用户先自己理解完，再输入。这一步如果无法实现，直接跳到第二步很难。&lt;/p>
&lt;p>例如：要销售手动填线索单、或者让采购手动填采购明细单。又例如：自动生成JS事件，用户用特定语句输入，系统后台自动转化为脚本。&lt;/p>
&lt;p>&lt;strong>第二阶段：利用AI的理解能力，扩展输入范围。&lt;/strong> 也就是把“让用户理解”的任务交给AI。&lt;/p>
&lt;p>例如：销售直接自然语言描述，AI理解后自动对应规则字段。或者采购给出原始的采购明细单，AI理解自动对应标准字段。又例如：用户用自然语言输入，系统就能生成相应脚本。&lt;/p>
&lt;p>&lt;strong>3.1）AI辅助配置&lt;/strong>&lt;/p>
&lt;p>AI自动生成模块、应用、BI图表还在探索阶段。以下是我的想法：&lt;/p>
&lt;p>a）在aPaaS自带的原型平台上画原型和流程图，然后AI直接根据原型生成数据模型、页面及其事件动、流程等内容。（如果是单纯的CRUD页面，不用AI也能生成了）&lt;/p>
&lt;p>b）约定好PRD格式规范和语句规范，AI根据PRD自动生成数据模型、页面及其事件动作、流程、API等内容。或者参考figma，设计专门的PRD功能，边写PRD边生成。&lt;/p>
&lt;p>c）终极目标是自然语言编程。AI根据业务人员的自然语言直接生成模块或BI图表。&lt;/p>
&lt;p>&lt;strong>3.2）AI辅助使用&lt;/strong>&lt;/p>
&lt;p>AI辅助用户使用配置平台或应用，使工作更有效率。&lt;/p>
&lt;p>例如，参考ChatGPT，通过对话可以生成相关代码。那AI的应用场景可能是：通过与AI对话，生成所需代码，直接粘贴到配置页面就可完成复杂功能配置。&lt;/p>
&lt;p>或者，AI根据客户需求智能推荐字段，避免业务人员一无所措。&lt;/p>
&lt;p>又例如，在移动端上，用户直接文字或语音询问系统某个功能，或者查询某条数据。或者通过问答对话形式生成临时BI图表。&lt;/p>
&lt;p>&lt;strong>3.3）AI辅助业务优化&lt;/strong>&lt;/p>
&lt;p>通过流程挖掘技术，AI可以帮助企业定位业务流转的“堵点”，以便企业针对性地优化调整业务方案（包含业务执行方案、aPaaS配置改动等）。&lt;/p>
&lt;h3 id="43-垂直化">
&lt;a href="#43-%e5%9e%82%e7%9b%b4%e5%8c%96">#&lt;/a>
4.3 垂直化
&lt;/h3>&lt;p>&lt;strong>1）概念&lt;/strong>&lt;/p>
&lt;p>垂直化是指aPaaS为细分行业客户提供特有功能模块或解决方案。但垂直化并不意味着停止发展通用化，为了更好的ROI和更大的市场，追求一种“协议”通用是很正常的，详见4.4章节的专业化。&lt;/p>
&lt;p>&lt;strong>2）趋势原因&lt;/strong>&lt;/p>
&lt;p>2.1）行业经验是B端产品的有效且牢固的产品壁垒，也是重要的差异化。&lt;/p>
&lt;p>2.2）针对垂直行业的抽象封装会更为准确，能满足客户的核心需求，而非停留在通用层次。&lt;/p>
&lt;p>2.3）功能性深入发展的具体表现。越垂直，越深入，这种时候，垂直化模块会成为一个“库”，不但aPaaS能用，专业研发体系也能用。&lt;/p>
&lt;p>&lt;strong>3）方案想法&lt;/strong>&lt;/p>
&lt;p>&lt;strong>3.1）官方或ISV提供垂直化模块和解决方案&lt;/strong>&lt;/p>
&lt;p>官方或ISV在aPaaS的生态市场上提供垂直化物料，包含组件、连接器等。以及提供垂直化解决方案，包含应用模板、工作流程、完整方案文档等。&lt;/p>
&lt;p>例如针对物联网领域，aPaaS可以提供iot物料（物模型、告警引擎、iot连接器等）、组态可视化、售后知识图谱等行业模块。&lt;/p>
&lt;h3 id="44-专业化">
&lt;a href="#44-%e4%b8%93%e4%b8%9a%e5%8c%96">#&lt;/a>
4.4 专业化
&lt;/h3>&lt;p>&lt;strong>1）概念&lt;/strong>&lt;/p>
&lt;p>专业化是指让零代码、低代码要更加专业，能真正降低复杂度，而不是玩具。要能与专业的编程语言相比较，真正具备新一代编程语言风范。而非简单的拖拉拽可视化编程，低代码并不low。例如要有自己的思想内核、有体系、有规范。&lt;/p>
&lt;p>&lt;strong>2）趋势原因&lt;/strong>&lt;/p>
&lt;p>2.1）专业化才能真正提高易用性，降低学习门槛。专业地抽象封装，才能有效降低复杂度。&lt;/p>
&lt;p>2.2）专业的语言才能研发出专业的软件，真正解决需求，而不是研发出一个玩具。&lt;/p>
&lt;p>&lt;strong>3）方案想法&lt;/strong>&lt;/p>
&lt;p>&lt;strong>3.1）零代码是业务语言编程的DSL&lt;/strong>
对于业务人员，如果要重新学习程序思维和程序知识，那零代码的使用难度还是太高。&lt;/p>
&lt;p>所以我的想法是，零代码应该是一种以业务思维为核心，以业务语言进行声明式编程的DSL。也就是从业务侧出发，将代码逻辑封装成具体的业务语言模块，再设计可视化交互。与中文编程易语言比较，零代码只能面向特定领域，灵活性更低但更易用。&lt;/p>
&lt;p>具体表现为通过可视化编排，告诉系统在某个业务的每一步工作内容，然后交由系统解析执行。&lt;/p>
&lt;p>未来，更进一步就是自然语言的AI编程了。&lt;/p>
&lt;p>例子：用户不用按代码那样写循环，只需要告诉系统要对哪些数据做什么内容。例如将某些数据里符合条件的数据的状态字段改为1，系统会自动解析执行循环。&lt;/p>
&lt;p>&lt;strong>3.2）低代码未来方向仍在探索中&lt;/strong>
低代码主要面向开发者（包含程序员、实施人员），仍然是程序思维。现阶段低代码是将代码语言可视化的DSL。可视化的实体能降低抽象思维能力，帮助用户更易理解、沟通和编排。同时，可视化一定程度上降低了门槛，让初级开发者能越级承担部分高级工作。&lt;/p>
&lt;p>可视化是现阶段低代码DSL的解决思路，但绝不是未来。因为从功能性出发，最有效的复用是引用库，库实际上就是一种低代码。而从易用性出发，就必须明白现在的代码有什么困难之处，才能将困难封装起来，形成一门新的dsl，甚至通用编程语言。这需要非常深入的研究，例如当初java的诞生就是因为c++不能跨平台。&lt;/p>
&lt;p>低代码的未来仍值得继续深入研究。&lt;/p>
&lt;h3 id="45-生态化">
&lt;a href="#45-%e7%94%9f%e6%80%81%e5%8c%96">#&lt;/a>
4.5 生态化
&lt;/h3>&lt;p>&lt;strong>1）概念&lt;/strong>&lt;/p>
&lt;p>生态化是指aPaaS覆盖或连接企业管理全域、业务全价值链，帮助企业构建内外统一的数字化生态。&lt;/p>
&lt;p>&lt;strong>2）趋势原因&lt;/strong>&lt;/p>
&lt;p>2.1）aPaaS需要内循环，才能有效赋能企业生态建设。&lt;/p>
&lt;p>2.2）互联互通是数字化基本要求。生态化可以帮助企业打破内外数据孤岛。&lt;/p>
&lt;p>2.3）当产业链上的企业们共同完成数字化转型升级，企业的效益才能最大化。&lt;/p>
&lt;p>&lt;strong>3）方案想法&lt;/strong>&lt;/p>
&lt;p>&lt;strong>3.1）aPaaS自身内循环生态&lt;/strong>&lt;/p>
&lt;p>构建应用模板生态、物料生态，尽可能覆盖更多场景，提高用户配置效率。&lt;/p>
&lt;p>&lt;strong>3.2）企业内外生态（产业链生态 / 价值链生态）&lt;/strong>&lt;/p>
&lt;p>通过跨平台（web、APP、小程序等）+iPaaS+跨租户业务协同等功能，打通企业内部各系统、企业外部各系统。同时，通过BI功能，帮助企业分析内外生态数据，辅助决策，形成闭环。&lt;/p>
&lt;h3 id="46-兼容化">
&lt;a href="#46-%e5%85%bc%e5%ae%b9%e5%8c%96">#&lt;/a>
4.6 兼容化
&lt;/h3>&lt;p>&lt;strong>1）概念&lt;/strong>&lt;/p>
&lt;p>兼容化是指零代码研发体系、低代码研发体系、高代码研发体系相互兼容，三者混合研发。&lt;/p>
&lt;p>&lt;strong>2）趋势原因&lt;/strong>&lt;/p>
&lt;p>2.1）三者互补，保障项目交付，保障应用生命周期正常。零代码、低代码作为DSL，必然存在不适用的领域。零代码、低代码、高代码三者互补，可以保证满足业务需求，保障项目的交付以及后续迭代运维。&lt;/p>
&lt;p>2.2）体系建设和拓展成本低。兼容化可以让aPaaS与当前专业研发体系无缝融合，无缝兼容旧物料，避免重复解决问题。&lt;/p>
&lt;p>2.3）资源价值最大化。让业务人员、初级开发者、高级开发者做符合能力的工作，共同为同一产品付出。&lt;/p>
&lt;p>2.4）保障生态统一。企业数字化要求互联互通，统一管理生态。三者兼容可以让企业内外的系统更易对接。&lt;/p>
&lt;p>&lt;strong>3）方案想法&lt;/strong>&lt;/p>
&lt;p>&lt;strong>3.1）零代码（no code）与低代码（low code）&lt;/strong>&lt;/p>
&lt;p>同一平台的零代码、低代码，底层可以都是模型驱动。这样保证底层逻辑相同，天然地支持互相调用。只是零代码与低代码的抽象角度不同，配置逻辑和交互有所不同。&lt;/p>
&lt;p>&lt;strong>3.2）低代码（low code）与高代码（pro code）&lt;/strong>&lt;/p>
&lt;p>低代码与高代码相互兼容有几种形式：&lt;/p>
&lt;p>a）物料+微服务&lt;/p>
&lt;p>在aPaaS上，高代码可以利用云IDE或本地IDE研发物料或者微服务，实现即插即用。&lt;/p>
&lt;p>配置的物料与高代码物料支持相互调用。最终共同发布到同一服务器。物料一般包含前端组件、区块、页面、后端插件等。&lt;/p>
&lt;p>b）在线代码拓展（内嵌）&lt;/p>
&lt;p>直接在aPaaS上编写代码，实现复杂功能。例如，页面配置时，没有合适的动作事件，就可以通过代码形式实现。或者配置API时，可以调用代码块节点实现复杂逻辑。&lt;/p>
&lt;p>c）code-in &amp;amp; code-out&lt;/p>
&lt;p>支持输入源码（主要是组件源码），然后在aPaaS上将源码可视化，允许用户拖拉拽配置。&lt;/p>
&lt;p>支持输出源码，有两种方向：开发环境输出代码，相当于代码生成器，缺点是二开后不可逆。&lt;/p>
&lt;p>另一种方向是在服务端实时生成源码，即不经过解析引擎解析，直接以源码运行。&lt;/p>
&lt;h2 id="5-部分模块简析">
&lt;a href="#5-%e9%83%a8%e5%88%86%e6%a8%a1%e5%9d%97%e7%ae%80%e6%9e%90">#&lt;/a>
5. 部分模块简析
&lt;/h2>&lt;h3 id="51-概述">
&lt;a href="#51-%e6%a6%82%e8%bf%b0">#&lt;/a>
5.1 概述
&lt;/h3>&lt;p>在aPaaS项目里，产品经理的主要职责是抽象业务场景和软件开发过程，并输出功能模块的业务逻辑和交互设计。产品经理可以不会代码编程，但要知道编程有什么输入输出。例如，告诉技术要开发哪些组件，每个组件的配置属性、交互怎么样。&lt;/p>
&lt;p>我的主要设计方法论是：IPO模型（输入-处理-输出）+数据流转路径。
数据只有流转起来，系统才是活的，输入输出要考虑上下游。同时，用拆分思维从上往下、或从下往上分析对象每层的IPO。&lt;/p>
&lt;p>1）输入。输入什么、输入从哪里来、什么时候输入、如何更容易更快更准确地输入等5w2h问题。一般来说，需要结合业务场景和软件技术，封装设计时才知道要对外提供哪些输入，可以隐藏哪些细节（隐藏细节不代表不做，而是做好不给改）。&lt;/p>
&lt;p>2）输出。输出什么、如何更快更准确地展示输出、输出到哪里、什么时候等5w2h问题。&lt;/p>
&lt;p>3）处理。即如何实现输入向输出转化。根据拆分层次，越靠近底层，代码思维会越多。拆到最底层时，就是研发封装处理逻辑的代码。&lt;/p>
&lt;p>而在业务项目里，产品经理主要是抽象业务场景，并输出设计。这种思维与零代码是一致的，产品经理输出的PRD，就像一份声明式编程，告诉程序员要做什么，然后程序员解析如何实现。&lt;/p>
&lt;h3 id="52-应用全生命周期管理">
&lt;a href="#52-%e5%ba%94%e7%94%a8%e5%85%a8%e7%94%9f%e5%91%bd%e5%91%a8%e6%9c%9f%e7%ae%a1%e7%90%86">#&lt;/a>
5.2 应用全生命周期管理
&lt;/h3>&lt;p>应用全生命周期管理是支持软件的设计、开发、测试、部署、迭代、运维的一体化服务管理能力。也是全栈化的核心模块。&lt;/p>
&lt;p>&lt;strong>1）设计&lt;/strong>&lt;/p>
&lt;p>1.1）战略设计-领域建模&lt;/p>
&lt;p>领域模型是表达业务实体及其逻辑的一种统一语言。领域建模就是构建业务领域，以及领域内的业务实体、业务行为、业务关系。是一种业务抽象的具象化表现。&lt;/p>
&lt;p>后续开发阶段，数据建模时就可以根据领域建模构建ER图，然后构建数据表。&lt;/p>
&lt;p>对于简单的系统，可以直接跳过战略设计。对于复杂系统，零代码、低代码都可以使用领域建模进行战略设计，然后再搭建应用。目前，领域建模还是文档资料，承担沟通、辅助理解等作用，尚未完全与其他阶段融合一体化。&lt;/p>
&lt;p>1.2）产品战术设计-思维导图、原型、流程图、UI图、PRD等
具体落地设计的文档主要支持本地上传和在线浏览。开始智能化后，在线画原型或在线PRD将会成为关键。&lt;/p>
&lt;p>&lt;strong>2）开发&lt;/strong>&lt;/p>
&lt;p>目前aPaaS配置的应用可以采用三层架构：表现层、业务逻辑层（BLL/service）、数据访问层（DAL/DAO），对应的主要模块是页面-API和流程-数据建模。而在对于表现层页面，前端可以采用MVC或MVVM架构。&lt;/p>
&lt;p>对于零代码的业务语言编程，实际上只有页面-工作流（API逻辑和流程逻辑混合）。&lt;/p>
&lt;p>未来可能会有更符合零代码、低代码的架构出现。例如DDD架构（领域驱动设计）就很有潜力。&lt;/p>
&lt;p>&lt;strong>3）测试&lt;/strong>&lt;/p>
&lt;p>3.1）沙箱环境&lt;/p>
&lt;p>提供沙箱环境给用户测试配置应用。用户配置应用后，直接点击“预览”即可进入沙箱环境调试应用。&lt;/p>
&lt;p>同时，支持将部分生产数据同步到沙盒环境，以便更好地测试。&lt;/p>
&lt;p>3.2）自动化测试&lt;/p>
&lt;p>UI自动化测试：利用RPA配置页面自动化测试用例。&lt;/p>
&lt;p>API自动化测试：与API模块结合，为每个API配置用例（输入、比较值），同时配置用例执行规则。&lt;/p>
&lt;p>测试日志：查看自动化测试用例执行结果。&lt;/p>
&lt;p>3.3）在线调试&lt;/p>
&lt;p>在线实时地输入模拟参数，系统输出模拟参数，观察出参是否期望结果。可以用于流程仿真、逻辑仿真、脚本调试、连接器调试等地方。这些场景本质上就是入参和出参。&lt;/p>
&lt;p>&lt;strong>4）部署&lt;/strong>&lt;/p>
&lt;p>部署主要分为初次部署和升级部署。应用初次发布/部署是相对简单的。而升级部署需要考虑变更内容对生产数据的影响。例如提供升级差异比较功能，展示所有影响条目。&lt;/p>
&lt;p>同时，应用还可以支持独立部署，即单独作为一个系统使用，而不依赖于应用平台入口。&lt;/p>
&lt;p>&lt;strong>5）迭代和运维&lt;/strong>&lt;/p>
&lt;p>5.1）版本管理。管理应用版本，支持版本对比。最好支持回滚，但由于涉及数据问题，没有很好的封装方案。除了应用版本，对于数据建模、页面、API、流程、连接器等功能模块都需要版本管理。&lt;/p>
&lt;p>5.2）引用关系。引用关系是在建模、页面、API、连接器等模块里，支持查看各元素的引用关系，包含引用了哪些数据表、API、节点参数等。例如当修改某个字段/API时，可以快速定位所有引用地点，确保功能修改完整。&lt;/p>
&lt;p>5.3）日志管理。管理前端组件、后端API、连接器、集成流等各种模块的运行日志。日志可以具体到各个节点的出入参，方便开发和运维定位问题点。&lt;/p>
&lt;p>5.4）源码。支持输出应用的源码，方便二开。但这种目前做不到可逆，即还无法做到从源码转换回aPaaS的配置。&lt;/p>
&lt;p>5.5）管理基础设施。管理数据库、各种服务器等底层基础设施。&lt;/p>
&lt;p>5.6）运维监控。可以通过埋点采集、BI和iPaaS等模块，进行自定义运维监控。&lt;/p>
&lt;h3 id="53-数据建模">
&lt;a href="#53-%e6%95%b0%e6%8d%ae%e5%bb%ba%e6%a8%a1">#&lt;/a>
5.3 数据建模
&lt;/h3>&lt;p>数据建模本质是抽象业务实体及其数据特征，构建数据表以及表之间的关系。可视化表现为ER建模或普通表格式建模。如果已经存在领域模型，也可以直接根据领域构建数据模型。&lt;/p>
&lt;p>模块设计：&lt;/p>
&lt;p>&lt;strong>1）输入&lt;/strong>&lt;/p>
&lt;p>输入什么：表关系、字段（普通字段、引用字段、外键字段、动态字段、系统内置字段）、索引等内容。细化一层，需要设计每种字段的输入（各种约束属性）、输出（数据表表头字段）&lt;/p>
&lt;p>输入方式：手动新建，或者批量导入。&lt;/p>
&lt;p>&lt;strong>2）输出&lt;/strong>&lt;/p>
&lt;p>输出什么：数据表&lt;/p>
&lt;p>输出怎样用：根据架构，需要定义DAO层服务以访问数据库。（通过配置定义DAO层服务，又是另一个输入输出了）&lt;/p>
&lt;p>输出用到哪里：通过引用关系功能，可以查看该字段被哪个页面、API等模块使用。&lt;/p>
&lt;p>&lt;strong>3）处理&lt;/strong>&lt;/p>
&lt;p>将字段表和DAO层配置转化为数据表以及封装的DAO层服务。&lt;/p>
&lt;p>对于零代码，业务人员不需要关心这种底层，只需要构建页面（表单页面建模或者多维表格建模）。保存页面后，页面的字段会自动转化为数据模型。&lt;/p>
&lt;p>如果低代码要调用零代码的数据模型，可以进一步管理DAO层服务。&lt;/p>
&lt;h3 id="53-页面设计">
&lt;a href="#53-%e9%a1%b5%e9%9d%a2%e8%ae%be%e8%ae%a1">#&lt;/a>
5.3 页面设计
&lt;/h3>&lt;p>B端产品的页面本质是根据场景，让用户高效输入数据，经过前后端处理后，将输出数据以合适的形式展示出来。&lt;/p>
&lt;p>页面设计是前端编排的重要模块。页面的主要设计架构是MVC或MVVM。与MVC的区别在于MVC是页面与前端模型单向绑定，而MVVM是双向绑定（页面与前端模型自动同步，可以更快地响应）。&lt;/p>
&lt;p>模块设计：&lt;/p>
&lt;p>&lt;strong>1）输入&lt;/strong>&lt;/p>
&lt;p>输入什么：将组件拼装。细化到组件层，根据业务场景和架构，可以抽象出多个组件及其属性，而组件属性主要有几种大类：前端模型（M）、展示样式和布局（V）、业务逻辑（VM，包含动作事件、自动填充等逻辑）。&lt;/p>
&lt;p>如何输入：手动拖拉拽前端模型的字段或空白组件字段，或者导入Excel自动生成&lt;/p>
&lt;p>&lt;strong>2）输出&lt;/strong>&lt;/p>
&lt;p>输出什么：应用页面。对于零代码，还会输出数据模型（属于间接输出，因为只是触发生成）&lt;/p>
&lt;p>输出如何展示：支持配置不同页面形态展示输出。例如表格、思维导图、甘特图、看板等形态。&lt;/p>
&lt;p>输出会用到哪里：页面可以与菜单绑定、被事件调用展示，或者通过分享功能对外公开等。&lt;/p>
&lt;p>&lt;strong>3）处理&lt;/strong>&lt;/p>
&lt;p>将解析代码封装成引擎，将用户的配置解析渲染为真正的应用页面。&lt;/p>
&lt;h3 id="55-流程编排bpm">
&lt;a href="#55-%e6%b5%81%e7%a8%8b%e7%bc%96%e6%8e%92bpm">#&lt;/a>
5.5 流程编排（BPM）
&lt;/h3>&lt;p>流程（BPM）的本质是：人为规定的有序工作路径，规定每一步由 “谁（who）” 在 “什么时候（when）” 、“什么场景（where）” 应该 “做什么事（what）”，“怎样做（how）”。&lt;/p>
&lt;p>对于低代码，流程编排是以只对业务流进行编排（一般称为审批流），不包含API。而对于零代码，流程编排实际上是工作流编排，融合了流程和API。&lt;/p>
&lt;p>对于流程，我采用从下往上的封装方法。从业务场景抽象出本质，分析流程细节，然后根据常用的业务场景和BPM规范封装一层，就可以得到具体的流程节点。流程细节如下：&lt;/p>
&lt;p>&lt;strong>1）有序工作路径&lt;/strong>&lt;/p>
&lt;p>路径有开始、有结束、有流转方向、也有分支。具体可封装成开始、结束、判断、分离/合并等路径控制节点。&lt;/p>
&lt;p>&lt;strong>2）谁&lt;/strong>&lt;/p>
&lt;p>当前步骤/节点的任务由谁去做。所以需要选择对象。对于低代码，一般对象范围是企业内外的用户（技术思维，流程与API是两个东西，不混在一起编排）。对于零代码，对象范围是用户或系统（业务思维，人做或系统做都是业务工作流的一部分）。&lt;/p>
&lt;p>选择用户对象的方法：从组织架构树选择企业内部或外部的具体用户、选择某个群体（角色、用户标签、部门等）、表达式计算（通过参数计算当前节点）、关系链（通过组织关系链找到具体用户，例如流程发起人的部门经理）。&lt;/p>
&lt;p>表达式和关系链实际上都是让系统自动计算出用户，免得用户手动选择执行人，使用体验更好。&lt;/p>
&lt;p>&lt;strong>3）什么时候&lt;/strong>&lt;/p>
&lt;p>当前步骤/节点的任务在什么时候要做。具体可表现为定时做（周期/非周期）、即时做&lt;/p>
&lt;p>&lt;strong>4）什么场景&lt;/strong>&lt;/p>
&lt;p>当前步骤/节点的任务环境是怎样的，包含在哪里做、场景限制。具体可表现为：流入/流出限制（符合条件的数据才能流入或流出）、页面环境（页面关联、字段权限。在哪个页面上操作控制能看到/操作页面的哪些字段）等。&lt;/p>
&lt;p>&lt;strong>5）做什么事&lt;/strong>&lt;/p>
&lt;p>当前步骤/节点的具体任务是什么，或者要执行什么行为。具体可表现为：填表、审批、调用子流程、调用API、发送消息、发送事件等行为。&lt;/p>
&lt;p>&lt;strong>6）怎样做&lt;/strong>&lt;/p>
&lt;p>当前步骤/节点的行为规则。具体可表现为会签规则、自动审批规则、催办规则等。&lt;/p>
&lt;p>封装例子：&lt;/p>
&lt;p>1）业务场景有审批，封装的审批节点就会限定部分元素，不给修改。例如限定分支路径只有通过/拒绝两条、限定审批规则（下拉选择，不能自定义）、限定必须做审批行为（要关联相应审批页面）&lt;/p>
&lt;h3 id="56-逻辑编排api工作流">
&lt;a href="#56-%e9%80%bb%e8%be%91%e7%bc%96%e6%8e%92api%e5%b7%a5%e4%bd%9c%e6%b5%81">#&lt;/a>
5.6 逻辑编排（API/工作流）
&lt;/h3>&lt;p>对使用者来说，API是封装好函数逻辑的黑匣子，输入入参，得到出参。在aPaaS配置层面，API的本质是一种封装好的满足特定需求的逻辑处理流模块。与流程类似，API也是一种人为规定的有序路径，也有各种要素。主要区别为API是对代码逻辑的可视化，而流程是对业务过程的可视化。&lt;/p>
&lt;p>模块设计：&lt;/p>
&lt;p>逻辑编排是以技术思维抽象程序语法，将其可视化为节点。然后，根据业务场景，抽象分析常用的代码情况，将其可视化为节点。节点包含节点样式（布局、样式）、节点属性配置（主要是节点出入参配置）。同时，为了兼容高代码，也支持代码模式开发。&lt;/p>
&lt;p>逻辑编排的可视化表现形式有多种，目前aPaaS主流可视化形式是类似流程的节点路径图（执行树）。而在传统开发里，时序图是API最常见的可视化建模形式。&lt;/p>
&lt;p>1）可视化代码的基本语法。例如判断、循环、变量定义、捕捉处理异常、请求函数等语法。&lt;/p>
&lt;p>2）可视化常见场景。例如调用DAO层服务、数据结构转换、协议转换、动态SQL、调用脚本等。&lt;/p>
&lt;p>3）连接iPaaS和物料中心。例如调用ipaaS封装的连接器，调用物料中心的插件等。&lt;/p>
&lt;p>4）调试和运维。手动调试、自动调试、引用关系、版本管理、运行日志等功能模块。&lt;/p>
&lt;p>限于篇幅，具体节点的IPO模型就不展开详聊。&lt;/p>
&lt;h3 id="57-组织架构">
&lt;a href="#57-%e7%bb%84%e7%bb%87%e6%9e%b6%e6%9e%84">#&lt;/a>
5.7 组织架构
&lt;/h3>&lt;p>平台的组织架构是体现企业的内部组织关系（公司部门等）、外部企业关系（产业链上下游）的数字孪生。&lt;/p>
&lt;p>因此，一个租户里，可以分为内部架构和外部架构。&lt;/p>
&lt;p>内部架构要支持多公司，例如大型集团有总部、子公司和分公司。且多公司之间支持业务协同。&lt;/p>
&lt;p>外部架构里，由于不同租户可能使用不同产品，所以除了要支持同产品的跨租户业务协同，还需要支持不同产品的跨租户协同（主要通过iPaaS）。&lt;/p>
&lt;p>同时，可以在平台的基础属性上，个性化组织架构的附属属性，更符合真实情况。例如，为部门设置专门的个性化属性（如一个部门有多种职责负责人）。&lt;/p>
&lt;h3 id="58-权限">
&lt;a href="#58-%e6%9d%83%e9%99%90">#&lt;/a>
5.8 权限
&lt;/h3>&lt;p>权限体系是企业精细化管理、数据安全的重要模块。B端产品里，权限与企业规定有关，往往与组织及其角色/身份绑定，也可以直接与用户绑定。&lt;/p>
&lt;p>权限主要有以下3种：&lt;/p>
&lt;p>1）功能权限（菜单权限、页面权限、按钮权限）&lt;/p>
&lt;p>功能权限是前端控制用户能看到哪个菜单、页面、按钮。&lt;/p>
&lt;p>2）数据权限（行权限、列权限、字段权限）&lt;/p>
&lt;p>数据权限是前端控制用户能看到哪些字段/字段数据。行权限和列权限主要针对列表页面，而字段权限主要针对表单页面。&lt;/p>
&lt;p>3）API权限&lt;/p>
&lt;p>API权限是后端控制用户能访问哪些API。这是数据权限的加强版，避免用户修改传参，强制调用API导致数据安全问题。&lt;/p>
&lt;h3 id="59-跨平台">
&lt;a href="#59-%e8%b7%a8%e5%b9%b3%e5%8f%b0">#&lt;/a>
5.9 跨平台
&lt;/h3>&lt;p>跨平台是指aPaaS能产出web、APP、小程序等终端的应用，且多端支持数据互通。&lt;/p>
&lt;p>主要有两种玩法：&lt;/p>
&lt;p>&lt;strong>1）一次配置，多端共用&lt;/strong>&lt;/p>
&lt;p>以web端配置为主，自动生成移动端的样式。而且需要兼容不同厂商的APP（IOS、Android、鸿蒙）、小程序（钉钉、飞书、企微）。&lt;/p>
&lt;p>移动端主要作为所有微应用和微BI的入口，进入应用内部后，各个模块的功能逻辑与web端一致。&lt;/p>
&lt;p>&lt;strong>2）多端各自配置&lt;/strong>&lt;/p>
&lt;p>web端、APP、小程序的页面和交互在各自的设计器里配置，但仍然共用后端逻辑。主要适用于移动端对交互要求较高的领域。&lt;/p>
&lt;h3 id="510-集成和开放ipaas">
&lt;a href="#510-%e9%9b%86%e6%88%90%e5%92%8c%e5%bc%80%e6%94%beipaas">#&lt;/a>
5.10 集成和开放（iPaaS）
&lt;/h3>&lt;p>iPaaS的本质是本系统主动或被动地与企业内外的其他系统相互进行数据交流。iPaaS是打通企业内外系统，连接企业全域全价值链场景、解决数据孤岛的重要利器。主要分为集成、开放两部分：&lt;/p>
&lt;p>&lt;strong>1）集成&lt;/strong>&lt;/p>
&lt;p>集成是本系统访问或操作其他系统的数据和功能。基本模块是连接器和集成流。连接器是一个封装了某个库/系统的功能的组件，使用者不需要关心如何对接系统，直接根据业务选择合适操作调用即可。而集成流是可视化的数据逻辑处理流，可以根据场景自动处理跨系统交流任务。&lt;/p>
&lt;p>&lt;strong>2）开放&lt;/strong>&lt;/p>
&lt;p>本系统的API开放给其他系统，允许其他系统访问和操作本系统的数据和功能。除了官方直接通过代码提供开放API（主要是一些系统内置功能，例如组织架构基础信息），也可以与逻辑编排融合，允许用户自定义开放API。相当于把本系统封装成一个连接器，开放给其他租户的同产品，或不同产品。&lt;/p>
&lt;p>&lt;strong>模块设计：&lt;/strong>&lt;/p>
&lt;p>1）连接器&lt;/p>
&lt;p>抽象系统对接的业务场景，可以将连接器拆分为6个模块：基本信息、授权配置、操作配置、调试、文档、运维管理。&lt;/p>
&lt;p>1.1）授权配置。配置授权方式、授权参数等内容。&lt;/p>
&lt;p>1.2）操作配置。管理封装对象所有支持的操作，每个操作都是一个逻辑处理流（可复用逻辑编排功能，也支持代码编程）。例如获取授权出参（如token）、增删改查对接系统的数据、订阅对方系统事件等。&lt;/p>
&lt;p>1.3）调试。测试连接器是否双方都畅通。&lt;/p>
&lt;p>1.4）文档。根据授权和操作模块自动输出对接文档。&lt;/p>
&lt;p>1.5）运维管理。连接器的版本管理、引用关系、日志管理等运维功能。&lt;/p>
&lt;p>同时，为了方便客户快速调用，官方一般需要提前对接好国内各大软件，通过生态市场提供给客户。例如钉钉、飞书、企微、用友、金蝶等软件。&lt;/p>
&lt;p>2）集成流&lt;/p>
&lt;p>集成流可以看做触发器+逻辑编排，区别在于集成流非常适合管理需要在后台长时间运行的任务，而API编排主要管理即时任务。例如从其他系统的数据库里同步数据到本平台就是长任务。&lt;/p>
&lt;h3 id="511-数据可视化bi">
&lt;a href="#511-%e6%95%b0%e6%8d%ae%e5%8f%af%e8%a7%86%e5%8c%96bi">#&lt;/a>
5.11 数据可视化（BI）
&lt;/h3>&lt;p>BI的本质是根据场景，将隐形的原始数据转化成显性的具有参考价值的信息，且以恰当方式展示出来，为不同用户提供数据依据和决策支持。
在aPaaS上的BI有个优势：aPaaS可以集成并统一管理企业全域全价值链的数据，并支持用户灵活自助地使用BI辅助决策。&lt;/p>
&lt;p>&lt;strong>模块设计：&lt;/strong>&lt;/p>
&lt;p>1）数据集成。“输入从哪里来”。通过iPaaS集成本平台、跨平台、跨公司的所有数据源，包含API、数据库（mysql、MongoDB）、静态数据等多种格式的数据源。&lt;/p>
&lt;p>2）数据清洗。“输入限制”，配置规则清洗“脏数据”，得到符合BI输入限制的数据。&lt;/p>
&lt;p>3）可视化配置。“BI处理”。对于整体BI配置，主要处理整个BI图表的输入问题。例如什么时候输入和如何输入，可以通过websocket通道实时输入、或者定时调用API。&lt;/p>
&lt;p>再拆一层，就是各个图元配置的IPO了。例如，输入内容是数据源（本平台模型数据、API、外部平台数据源）和图表要素配置（指标维度、数据权限、动作事件、样式等）。为了更快输入，可以提前为每个模型设计好指标模板，方便直接引用。&lt;/p>
&lt;p>4）使用BI。“输出什么、输出到哪里”。最终输出大屏、看板、组态或传统报表等展示给用户查看，可以独立页面展示或嵌入其他页面展示。&lt;/p>
&lt;h3 id="512-其他">
&lt;a href="#512-%e5%85%b6%e4%bb%96">#&lt;/a>
5.12 其他
&lt;/h3>&lt;p>aPaaS还有很多重要模块，例如物料中心（前后端组件、区块、用户自定义模板等）、RPA、事件、定时任务、打印模板等。但限于篇幅，暂且不表。&lt;/p>
&lt;h2 id="6-浅谈运营">
&lt;a href="#6-%e6%b5%85%e8%b0%88%e8%bf%90%e8%90%a5">#&lt;/a>
6. 浅谈运营
&lt;/h2>&lt;h3 id="61-运营方式">
&lt;a href="#61-%e8%bf%90%e8%90%a5%e6%96%b9%e5%bc%8f">#&lt;/a>
6.1 运营方式
&lt;/h3>&lt;p>目前aPaaS业界内主要有两种运营方式：&lt;/p>
&lt;p>&lt;strong>1）纯定制项目+实施团队&lt;/strong>&lt;/p>
&lt;p>公司组织实施团队，将aPaaS作为公司的开发工具，实施定制项目并交付给客户。这里的aPaaS可以是公司自研或采购的。&lt;/p>
&lt;p>还有一种情况也会采用该方式：公司自研的aPaaS还不足以作为产品推向市场，但为了更快得到落地经验，进而反哺迭代。这种玩法有时也派人到客户那里驻场，根据客户需求随时调整配置。同时，为了减少成本，实施团队会大量雇佣实习生。&lt;/p>
&lt;p>&lt;strong>2）订阅制+增值服务&lt;/strong>&lt;/p>
&lt;p>公司提供不同套餐版本以供客户订阅或私有化部署，然后提供插件市场、模板市场、专家顾问、定制等增值服务。整体玩法与SaaS相似。&lt;/p>
&lt;h3 id="62-浅谈增长">
&lt;a href="#62-%e6%b5%85%e8%b0%88%e5%a2%9e%e9%95%bf">#&lt;/a>
6.2 浅谈增长
&lt;/h3>&lt;p>运营的本质是降低交易成本，提高交易效率。现阶段，对于想单独推向市场的aPaaS，我认为比较适合采用AARRR模型进行用户增长分析。前提是保证产品与市场匹配，否则产品即使到达了客户也会被抛弃。&lt;/p>
&lt;p>&lt;strong>1）拉新（Acquisition）：小灯塔&lt;/strong>&lt;/p>
&lt;p>拉新主要解决拉谁，怎么拉的问题。&lt;/p>
&lt;p>正如上面所说，aPaaS主要面向有数字化转型、升级需求的客户。针对不同层次的用户需要用不同的解决方案和拉新渠道。&lt;/p>
&lt;p>目前拉新最重要的两种渠道是：企业通讯与办公工具（飞书/钉钉/企业微信）引流、客户相互推荐。除此之外招投标、地推、广告也是常见的方式。&lt;/p>
&lt;p>我认为，目前最好的广告是成为国家推荐的样本。国家背书让客户采购选型成本更低：工信部、财政部的“小灯塔”数字化转型样本项目。
两部门关于开展财政支持中小企业数字化转型试点工作的通知&lt;/p>
&lt;p>&lt;strong>2）激活（Activation）：免费基础版+专人引导+模板生态&lt;/strong>&lt;/p>
&lt;p>开箱即用、永久免费的基础版可降低客户的注册成本。&lt;/p>
&lt;p>注册后，为了降低客户初次使用的学习成本和迷茫感，需要帮助客户解决第一个问题，让其迅速体验到数字化的效果。公司可派专人服务引导新客户，
调研客户当前问题，帮助客户寻找和安装合适的应用模板或指导使用，让客户产生第一条数据，完成激活。&lt;/p>
&lt;p>&lt;strong>3）留存（Retention）：打铁还需自身硬&lt;/strong>&lt;/p>
&lt;p>留存关键是aPaaS能真正解决客户问题，有效地实现产品价值。&lt;/p>
&lt;p>&lt;strong>4）转化（Revenue）：基础版+按需付费+自主试用&lt;/strong>&lt;/p>
&lt;p>目前主流的订阅是区分不同套餐，每个套餐包含不同功能和不同基础设施。但我认为，在使用初期，客户不清楚每个功能的作用，也不知道自己未来是否会用到某个功能。如果强行推销高级版套餐，由于客户并不用到某个属性/节点，客户心理可能抵抗采购，也就提高了客户的交易成本。这种玩法非常容易变成价格战。&lt;/p>
&lt;p>我的想法是：类比以前IaaS将硬件基础设施拆分，以及现在serverless热潮，那aPaaS是否可以将功能模块拆分，允许客户按需采购呢？或者直接根据功能使用情况按需付费。例如，客户用不到API的复杂节点，那就不收费。很少使用时，按调用次数收费。如果要频繁使用，允许单独买断功能项。&lt;/p>
&lt;p>同时，我比较赞同简道云的试用玩法，由客户自己决定什么时候领取高级功能使用机会。而不是注册后直接开启高级试用，避免客户连基础版功能都尚未掌握，就被迫浪费高级试用机会。&lt;/p>
&lt;p>&lt;strong>5）传播（Referral）：生态化&lt;/strong>&lt;/p>
&lt;p>B端产品传播在于客户之间的相互推荐。例如某次政府组织的分享会、以及熟人推荐。除了产品自身口碑好，我认为还可以通过生态化让客户进一步主动传播。客户为了进一步提高效率，有概率把产品分享给产业链上下游，以实现跨租户协同处理业务。&lt;/p></description></item></channel></rss>